// Copyright (c) 2011, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// WARNING:
//   This file contains documentation that is merged into the real source.
//   Do not make code changes here.

/**
 * HttpRequest is Dart's name for the XMLHttpRequest object, as described below.
 */

/// @domName XMLHttpRequest
abstract class HttpRequest implements EventTarget {
  factory HttpRequest.get(String url, onSuccess(HttpRequest request)) =>
      _HttpRequestFactoryProvider.createHttpRequest_get(url, onSuccess);

  factory HttpRequest.getWithCredentials(String url, onSuccess(HttpRequest request)) =>
      _HttpRequestFactoryProvider.createHttpRequestgetWithCredentials(url, onSuccess);

  factory HttpRequest() => _HttpRequestFactoryProvider.createHttpRequest();

  /**
   * @domName EventTarget.addEventListener, EventTarget.removeEventListener, EventTarget.dispatchEvent
   */
  HttpRequestEvents get on;

  static const int DONE = 4;

  static const int HEADERS_RECEIVED = 2;

  static const int LOADING = 3;

  static const int OPENED = 1;

  static const int UNSENT = 0;

  /** @domName XMLHttpRequest.readyState */
  abstract int get readyState;

  /** @domName XMLHttpRequest.response */
  abstract Object get response;

  /** @domName XMLHttpRequest.responseText */
  abstract String get responseText;

  /** @domName XMLHttpRequest.responseType */
  String responseType;

  /** @domName XMLHttpRequest.responseXML */
  abstract Document get responseXML;

  /** @domName XMLHttpRequest.status */
  abstract int get status;

  /** @domName XMLHttpRequest.statusText */
  abstract String get statusText;

  /** @domName XMLHttpRequest.upload */
  abstract HttpRequestUpload get upload;

  /** @domName XMLHttpRequest.withCredentials */
  bool withCredentials;

  /** @domName XMLHttpRequest.abort */
  void abort();

  /** @domName XMLHttpRequest.addEventListener */
  void $dom_addEventListener(String type, EventListener listener, [bool useCapture]);

  /** @domName XMLHttpRequest.dispatchEvent */
  bool $dom_dispatchEvent(Event evt);

  /** @domName XMLHttpRequest.getAllResponseHeaders */
  String getAllResponseHeaders();

  /** @domName XMLHttpRequest.getResponseHeader */
  String getResponseHeader(String header);

  /** @domName XMLHttpRequest.open */
  void open(String method, String url, [bool async, String user, String password]);

  /** @domName XMLHttpRequest.overrideMimeType */
  void overrideMimeType(String override);

  /** @domName XMLHttpRequest.removeEventListener */
  void $dom_removeEventListener(String type, EventListener listener, [bool useCapture]);

  /** @domName XMLHttpRequest.send */
  void send([data]);

  /** @domName XMLHttpRequest.setRequestHeader */
  void setRequestHeader(String header, String value);
}

abstract class HttpRequestEvents implements Events {

  EventListenerList get abort;

  EventListenerList get error;

  EventListenerList get load;

  EventListenerList get loadEnd;

  EventListenerList get loadStart;

  EventListenerList get progress;

  EventListenerList get readyStateChange;
}
