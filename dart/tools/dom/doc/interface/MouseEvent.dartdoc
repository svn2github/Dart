// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// WARNING:
//   This file contains documentation that is merged into the real source.
//   Do not make code changes here.

/// @domName MouseEvent
abstract class MouseEvent implements UIEvent {

  factory MouseEvent(String type, Window view, int detail, int screenX, int screenY,
      int clientX, int clientY, int button, [bool canBubble = true,
      bool cancelable = true, bool ctrlKey = false, bool altKey = false,
      bool shiftKey = false, bool metaKey = false,
      EventTarget relatedTarget = null]) =>
      _MouseEventFactoryProvider.createMouseEvent(
          type, view, detail, screenX, screenY,
          clientX, clientY, button, canBubble, cancelable,
          ctrlKey, altKey, shiftKey, metaKey,
          relatedTarget);


  /** @domName MouseEvent.altKey */
  abstract bool get altKey;

  /** @domName MouseEvent.button */
  abstract int get button;

  /** @domName MouseEvent.clientX */
  abstract int get clientX;

  /** @domName MouseEvent.clientY */
  abstract int get clientY;

  /** @domName MouseEvent.ctrlKey */
  abstract bool get ctrlKey;

  /** @domName MouseEvent.dataTransfer */
  abstract Clipboard get dataTransfer;

  /** @domName MouseEvent.fromElement */
  abstract Node get fromElement;

  /** @domName MouseEvent.metaKey */
  abstract bool get metaKey;

  /**
   * The X coordinate of the mouse pointer in target node coordinates.
   * This value may vary between platforms if the target node moves
   * after the event has fired or if the element has CSS transforms affecting
   * it.
   */
  abstract int get offsetX;

  /**
   * The Y coordinate of the mouse pointer in target node coordinates.
   * This value may vary between platforms if the target node moves
   * after the event has fired or if the element has CSS transforms affecting
   * it.
   */
  abstract int get offsetY;

  /** @domName MouseEvent.relatedTarget */
  abstract EventTarget get relatedTarget;

  /** @domName MouseEvent.screenX */
  abstract int get screenX;

  /** @domName MouseEvent.screenY */
  abstract int get screenY;

  /** @domName MouseEvent.shiftKey */
  abstract bool get shiftKey;

  /** @domName MouseEvent.toElement */
  abstract Node get toElement;

  /** @domName MouseEvent.webkitMovementX */
  abstract int get webkitMovementX;

  /** @domName MouseEvent.webkitMovementY */
  abstract int get webkitMovementY;

  /** @domName MouseEvent.x */
  abstract int get x;

  /** @domName MouseEvent.y */
  abstract int get y;

  /** @domName MouseEvent.initMouseEvent */
  void $dom_initMouseEvent(String type, bool canBubble, bool cancelable, LocalWindow view, int detail, int screenX, int screenY, int clientX, int clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, int button, EventTarget relatedTarget);
}
