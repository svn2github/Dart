// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// DO NOT EDIT
// Auto-generated dart:html library.

library html;

import 'dart:isolate';
import 'dart:json';
import 'dart:nativewrappers';

$!GENERATED_DART_FILES

part '$AUXILIARY_DIR/CrossFrameTypes.dart';
part '$AUXILIARY_DIR/EventListener.dart';
part '$AUXILIARY_DIR/KeyCode.dart';
part '$AUXILIARY_DIR/KeyLocation.dart';
part '$AUXILIARY_DIR/KeyName.dart';
part '$AUXILIARY_DIR/ReadyState.dart';
part '$AUXILIARY_DIR/Timer.dart';
part '$AUXILIARY_DIR/_Collections.dart';
part '$AUXILIARY_DIR/_HttpRequestUtils.dart';
part '$AUXILIARY_DIR/shared_FactoryProviders.dart';
part '$AUXILIARY_DIR/dartium_FactoryProviders.dart';
part '$AUXILIARY_DIR/Device.dart';
part '$AUXILIARY_DIR/Isolates.dart';
part '$AUXILIARY_DIR/Measurement.dart';
part '$AUXILIARY_DIR/Serialization.dart';
part '$AUXILIARY_DIR/dartium_MutationObserverSupported.dart';
part '$AUXILIARY_DIR/_Testing.dart';
part '$AUXILIARY_DIR/_ListIterators.dart';
part '$AUXILIARY_DIR/_Lists.dart';

part '$AUXILIARY_DIR/native_DOMPublic.dart';
part '$AUXILIARY_DIR/native_DOMImplementation.dart';

// FIXME (blois): Rename to _window (ditto __document).
LocalWindow __window;

LocalWindow get window {
  if (__window != null) {
    return __window;
  }
  __window = _Utils.window();
  return __window;
}

Document __document;

Document get document {
  if (__document != null) {
    return __document;
  }
  __document = window.document;
  return __document;
}


Element query(String selector) => document.query(selector);
List<Element> queryAll(String selector) => document.queryAll(selector);

int _getNewIsolateId() => _Utils._getNewIsolateId();

bool _callPortInitialized = false;
var _callPortLastResult = null;

_callPortSync(num id, var message) {
  if (!_callPortInitialized) {
    window.on['js-result'].add((event) {
      _callPortLastResult = JSON.parse(_getPortSyncEventData(event));
    }, false);
    _callPortInitialized = true;
  }
  assert(_callPortLastResult == null);
  _dispatchEvent('js-sync-message', {'id': id, 'message': message});
  var result = _callPortLastResult;
  _callPortLastResult = null;
  return result;
}
