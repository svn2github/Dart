diff --git a/.status b/.status
new file mode 100644
index 0000000..18e0561
--- /dev/null
+++ b/.status
@@ -0,0 +1,31 @@
+# Don't run any test-like files that show up in packages directories. It
+# shouldn't be necessary to run "pub install" in these packages, but if you do
+# it shouldn't break the tests.
+*/packages/*/*: Skip
+*/*/packages/*/*: Skip
+*/*/*/packages/*/*: Skip
+*/*/*/*/packages/*/*: Skip
+*/*/*/*/*/packages/*/*: Skip
+
+test/*: Skip
+
+[ $runtime == vm || $runtime == d8 || $runtime == jsshell ]
+*: Skip # uses dart:html
+
+[ $browser]
+build/test/listorder_test: Pass, RuntimeError # Issue 19265
+
+[ $compiler == none && ($runtime == dartium || $runtime == ContentShellOnAndroid) ]
+build/test/listorder_test: Pass, RuntimeError, Timeout # Issue 18931, Issue 19127
+build/test/mainpage_test: Pass, RuntimeError # Issue 18931
+build/test/markdone_shadow_test: Pass, RuntimeError # Issue 18931
+build/test/markdone_test: Pass, RuntimeError # Issue 18931
+
+[ $compiler == none && $runtime == ContentShellOnAndroid ]
+build/test/listorder_test: Skip # Times out
+build/test/mainpage_test: Skip # Times out
+build/test/markdone_shadow_test: Skip # Times out
+build/test/markdone_test: Skip # Times out
+
+[ $compiler == none && $runtime == drt ]
+build/test/markdone_shadow_test: RuntimeError # Issue 19414
diff --git a/lib/app/app.css b/lib/app/app.css
new file mode 100644
index 0000000..68a1468
--- /dev/null
+++ b/lib/app/app.css
@@ -0,0 +1,206 @@
+/* base.css overrides */
+
+html,
+body {
+  margin: 0;
+  padding: 0;
+}
+
+body {
+  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
+  line-height: 1.4em;
+  background: #eaeaea url('bg.png');
+  color: #4d4d4d;
+  width: 550px;
+  margin: 0 auto;
+  -webkit-font-smoothing: antialiased;
+  -moz-font-smoothing: antialiased;
+  -ms-font-smoothing: antialiased;
+  -o-font-smoothing: antialiased;
+  font-smoothing: antialiased;
+}
+
+body > header {
+  padding-top: 22px;
+  margin-bottom: -5px;
+}
+
+h1 {
+  /*  position: absolute;
+  top: -120px;*/
+  width: 100%;
+  font-size: 70px;
+  font-weight: bold;
+  text-align: center;
+  color: #b3b3b3;
+  color: rgba(255, 255, 255, 0.3);
+  text-shadow: -1px -1px rgba(0, 0, 0, 0.2);
+  -webkit-text-rendering: optimizeLegibility;
+  -moz-text-rendering: optimizeLegibility;
+  -ms-text-rendering: optimizeLegibility;
+  -o-text-rendering: optimizeLegibility;
+  text-rendering: optimizeLegibility;
+}
+
+#info {
+  margin: 65px auto 0;
+  color: #a6a6a6;
+  font-size: 12px;
+  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.7);
+  text-align: center;
+}
+
+#info a {
+  color: inherit;
+}
+
+.hidden{
+  display:none;
+}
+
+hr {
+  margin: 20px 0;
+  border: 0;
+  border-top: 1px dashed #C5C5C5;
+  border-bottom: 1px dashed #F7F7F7;
+}
+
+.learn a {
+  font-weight: normal;
+  text-decoration: none;
+  color: #b83f45;
+}
+
+.learn a:hover {
+  text-decoration: underline;
+  color: #787e7e;
+}
+
+.learn h3,
+.learn h4,
+.learn h5 {
+  margin: 10px 0;
+  font-weight: 500;
+  line-height: 1.2;
+  color: #000;
+}
+
+.learn h3 {
+  font-size: 24px;
+}
+
+.learn h4 {
+  font-size: 18px;
+}
+
+.learn h5 {
+  margin-bottom: 0;
+  font-size: 14px;
+}
+
+.learn ul {
+  padding: 0;
+  margin: 0 0 30px 25px;
+}
+
+.learn li {
+  line-height: 20px;
+}
+
+.learn p {
+  font-size: 15px;
+  font-weight: 300;
+  line-height: 1.3;
+  margin-top: 0;
+  margin-bottom: 0;
+}
+
+.quote {
+  border: none;
+  margin: 20px 0 60px 0;
+}
+
+.quote p {
+  font-style: italic;
+}
+
+.quote p:before {
+  content: '“';
+  font-size: 50px;
+  opacity: .15;
+  position: absolute;
+  top: -20px;
+  left: 3px;
+}
+
+.quote p:after {
+  content: '”';
+  font-size: 50px;
+  opacity: .15;
+  position: absolute;
+  bottom: -42px;
+  right: 3px;
+}
+
+.quote footer {
+  position: absolute;
+  bottom: -40px;
+  right: 0;
+}
+
+.quote footer img {
+  border-radius: 3px;
+}
+
+.quote footer a {
+  margin-left: 5px;
+  vertical-align: middle;
+}
+
+.speech-bubble {
+  position: relative;
+  padding: 10px;
+  background: rgba(0, 0, 0, .04);
+  border-radius: 5px;
+}
+
+.speech-bubble:after {
+  content: '';
+  position: absolute;
+  top: 100%;
+  right: 30px;
+  border: 13px solid transparent;
+  border-top-color: rgba(0, 0, 0, .04);
+}
+
+/**body*/.learn-bar > .learn {
+  position: absolute;
+  width: 272px;
+  top: 8px;
+  left: -300px;
+  padding: 10px;
+  border-radius: 5px;
+  background-color: rgba(255, 255, 255, .6);
+  transition-property: left;
+  transition-duration: 500ms;
+}
+
+
+/* IE doesn't support the hidden attribute */
+[hidden] {
+  display: none;
+}
+
+@media (min-width: 899px) {
+  /**body*/.learn-bar {
+    width: auto;
+    margin: 0 0 0 300px;
+  }
+  /**body*/.learn-bar > .learn {
+    left: 8px;
+  }
+  /**body*/.learn-bar #todoapp {
+    width: 550px;
+    margin: 130px auto 40px auto;
+  }
+}
\ No newline at end of file
diff --git a/lib/app/bg.png b/lib/app/bg.png
new file mode 100644
index 0000000..b2a7600
Binary files /dev/null and b/lib/app/bg.png differ
diff --git a/lib/router/simple_router.dart b/lib/router/simple_router.dart
new file mode 100644
index 0000000..1337a26
--- /dev/null
+++ b/lib/router/simple_router.dart
@@ -0,0 +1,41 @@
+// Copyright 2013 The Polymer Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+library todomvc.web.lib_elements.simple_router;
+
+import 'dart:async';
+import 'dart:html';
+import 'package:polymer/polymer.dart';
+
+// A very simple router for TodoMVC. Real app should use package:route, but it
+// does not currently support Shadow DOM.
+@CustomTag('simple-router')
+class SimpleRouter extends PolymerElement {
+  @published String route = '';
+
+  StreamSubscription _sub;
+
+  factory SimpleRouter() => new Element.tag('simple-router');
+  SimpleRouter.created() : super.created();
+
+  attached() {
+    super.attached();
+    _sub = windowLocation.changes.listen((_) {
+      var hash = window.location.hash;
+      if (hash.startsWith('#/')) hash = hash.substring(2);
+      // TODO(jmesserly): empty string is not triggering a call to TodoList
+      // routeChanged after deployment. Use 'all' as a workaround.
+      if (hash == '') hash = 'all';
+      route = hash;
+    });
+  }
+
+  detached() {
+    super.detached();
+    _sub.cancel();
+  }
+
+  routeChanged() {
+    fire('route', detail: route);
+  }
+}
diff --git a/lib/router/simple_router.html b/lib/router/simple_router.html
new file mode 100644
index 0000000..f2b4d4b
--- /dev/null
+++ b/lib/router/simple_router.html
@@ -0,0 +1,9 @@
+<!--
+Copyright 2013 The Polymer Authors. All rights reserved.
+Use of this source code is governed by a BSD-style
+license that can be found in the LICENSE file.
+-->
+<link rel="import" href="../../../packages/polymer/polymer.html">
+<polymer-element name="simple-router">
+  <script type="application/dart" src="simple_router.dart"></script>
+</polymer-element>
diff --git a/lib/td_input.dart b/lib/td_input.dart
new file mode 100644
index 0000000..d255968
--- /dev/null
+++ b/lib/td_input.dart
@@ -0,0 +1,27 @@
+library todomvc.td_input;
+
+import 'dart:html';
+import 'package:polymer/polymer.dart';
+
+@CustomTag('td-input')
+class TodoInput extends InputElement with Polymer, Observable {
+  factory TodoInput() => new Element.tag('input', 'td-input');
+  TodoInput.created() : super.created() {
+    polymerCreated();
+  }
+
+  keypressAction(e) {
+    // Listen for enter on keypress but esc on keyup, because
+    // IE doesn't fire keyup for enter.
+    if (e.keyCode == KeyCode.ENTER) {
+      e.preventDefault();
+      fire('td-input-commit');
+    }
+  }
+
+  keyupAction(e) {
+    if (e.keyCode == KeyCode.ESC) {
+      fire('td-input-cancel');
+    }
+  }
+}
diff --git a/lib/td_input.html b/lib/td_input.html
new file mode 100644
index 0000000..8cefb3d
--- /dev/null
+++ b/lib/td_input.html
@@ -0,0 +1,5 @@
+<link rel="import" href="../../packages/polymer/polymer.html">
+<polymer-element name="td-input" extends="input"
+    on-keyup="{{keyupAction}}" on-keypress="{{keypressAction}}">
+  <script type="application/dart" src="td_input.dart"></script>
+</polymer-element>
diff --git a/lib/td_item.css b/lib/td_item.css
new file mode 100644
index 0000000..61feb6c
--- /dev/null
+++ b/lib/td_item.css
@@ -0,0 +1,161 @@
+/* base.css overrides */
+@host {
+  .editing {
+    border-bottom: none;
+    padding: 0;
+  }
+}
+
+button {
+  margin: 0;
+  padding: 0;
+  border: 0;
+  background-color: transparent;
+  background-image: none;
+  font-size: 100%;
+  vertical-align: baseline;
+  font-family: inherit;
+  color: inherit;
+  -webkit-appearance: none;
+  /*-moz-appearance: none;*/
+  -ms-appearance: none;
+  -o-appearance: none;
+  appearance: none;
+}
+
+
+.edit {
+  position: relative;
+  margin: 0;
+  width: 100%;
+  font-size: 24px;
+  font-family: inherit;
+  line-height: 1.4em;
+  border: 0;
+  outline: none;
+  color: inherit;
+  padding: 6px;
+  border: 1px solid #999;
+  box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
+  -webkit-box-sizing: border-box;
+  -moz-box-sizing: border-box;
+  -ms-box-sizing: border-box;
+  -o-box-sizing: border-box;
+  box-sizing: border-box;
+  -webkit-font-smoothing: antialiased;
+  -moz-font-smoothing: antialiased;
+  -ms-font-smoothing: antialiased;
+  -o-font-smoothing: antialiased;
+  font-smoothing: antialiased;
+}
+
+.edit {
+  width: 506px;
+  padding: 13px 17px 12px 17px;
+  margin: 0 0 0 43px;
+}
+
+.toggle {
+  text-align: center;
+  width: 40px;
+  /* auto, since non-WebKit browsers doesn't support input styling */
+  height: auto;
+  position: absolute;
+  top: 0;
+  bottom: 0;
+  margin: auto 0;
+  border: none; /* Mobile Safari */
+  -webkit-appearance: none;
+  /*-moz-appearance: none;*/
+  -ms-appearance: none;
+  -o-appearance: none;
+  appearance: none;
+}
+
+.toggle:after {
+  content: '✔';
+  line-height: 43px; /* 40 + a couple of pixels visual adjustment */
+  font-size: 20px;
+  color: #d9d9d9;
+  text-shadow: 0 -1px 0 #bfbfbf;
+}
+
+.toggle:checked:after {
+  color: #85ada7;
+  text-shadow: 0 1px 0 #669991;
+  bottom: 1px;
+  position: relative;
+}
+
+label {
+  word-break: break-word;
+  padding: 15px;
+  margin-left: 45px;
+  display: block;
+  line-height: 1.2;
+  -webkit-transition: color 0.4s;
+  -moz-transition: color 0.4s;
+  -ms-transition: color 0.4s;
+  -o-transition: color 0.4s;
+  transition: color 0.4s;
+}
+
+.completed label {
+  color: #a9a9a9;
+  text-decoration: line-through;
+}
+
+.destroy {
+  display: none;
+  position: absolute;
+  top: 0;
+  right: 10px;
+  bottom: 0;
+  width: 40px;
+  height: 40px;
+  margin: auto 0;
+  font-size: 22px;
+  color: #a88a8a;
+  -webkit-transition: all 0.2s;
+  -moz-transition: all 0.2s;
+  -ms-transition: all 0.2s;
+  -o-transition: all 0.2s;
+  transition: all 0.2s;
+}
+
+.destroy:hover {
+  text-shadow: 0 0 1px #000,
+         0 0 10px rgba(199, 107, 107, 0.8);
+  -webkit-transform: scale(1.3);
+  -moz-transform: scale(1.3);
+  -ms-transform: scale(1.3);
+  -o-transform: scale(1.3);
+  transform: scale(1.3);
+}
+
+.destroy:after {
+  content: '✖';
+}
+
+.view:hover .destroy {
+  display: block;
+}
+
+/*
+  Hack to remove background from Mobile Safari.
+  Can't use it globally since it destroys checkboxes in Firefox and Opera
+*/
+@media screen and (-webkit-min-device-pixel-ratio:0) {
+  .toggle {
+    background: none;
+    /*
+      ShadowDOM Polyfill work around for webkit/blink bug
+      https://code.google.com/p/chromium/issues/detail?id=251510
+    */
+    background-color: transparent;
+  }
+
+  .toggle {
+    height: 40px;
+  }
+}
diff --git a/lib/td_item.dart b/lib/td_item.dart
new file mode 100644
index 0000000..b5ed6a6
--- /dev/null
+++ b/lib/td_item.dart
@@ -0,0 +1,45 @@
+library todomvc.td_item;
+
+import 'dart:html';
+import 'package:polymer/polymer.dart';
+import 'td_model.dart';
+
+@CustomTag('td-item')
+class TodoItem extends LIElement with Polymer, Observable {
+  @published bool editing = false;
+  @published Todo item;
+
+  factory TodoItem() => new Element.tag('li', 'td-item');
+  TodoItem.created() : super.created() { polymerCreated(); }
+
+  editAction() {
+    editing = true;
+    // schedule focus for the end of microtask, when the input will be visible
+    async((_) => $['edit'].focus());
+  }
+
+  commitAction() {
+    if (editing) {
+      editing = false;
+      item.title = item.title.trim();
+      if (item.title == '') {
+        destroyAction();
+      }
+      fire('td-item-changed');
+    }
+  }
+
+  cancelAction() {
+    editing = false;
+  }
+
+  itemChangeAction() {
+    // TODO(jmesserly): asyncFire is needed because "click" fires before
+    // "item.checked" is updated on Firefox. Need to check Polymer.js.
+    asyncFire('td-item-changed');
+  }
+
+  destroyAction() {
+    fire('td-destroy-item', detail: item);
+  }
+}
diff --git a/lib/td_item.html b/lib/td_item.html
new file mode 100644
index 0000000..8d5dd0d
--- /dev/null
+++ b/lib/td_item.html
@@ -0,0 +1,17 @@
+<link rel="import" href="td_input.html">
+<polymer-element name="td-item" extends="li" on-blur="{{commitAction}}">
+  <template>
+    <link rel="stylesheet" href="td_item.css">
+    <div class="view {{ {'completed': item.completed, 'editing': editing} }}"
+        hidden?="{{editing}}" on-dblclick="{{editAction}}">
+      <input type="checkbox" class="toggle" checked="{{item.completed}}"
+          on-click="{{itemChangeAction}}">
+      <label>{{item.title}}</label>
+      <button class="destroy" on-click="{{destroyAction}}"></button>
+    </div>
+    <input is="td-input" id="edit" class="edit" value="{{item.title}}"
+        hidden?="{{!editing}}" on-td-input-commit="{{commitAction}}"
+        on-td-input-cancel="{{cancelAction}}">
+  </template>
+  <script type="application/dart" src="td_item.dart"></script>
+</polymer-element>
diff --git a/lib/td_model.dart b/lib/td_model.dart
new file mode 100644
index 0000000..3cf4081
--- /dev/null
+++ b/lib/td_model.dart
@@ -0,0 +1,110 @@
+library todomvc.td_model;
+
+import 'dart:async';
+import 'dart:html';
+import 'package:polymer/polymer.dart';
+import 'package:core_elements/core_localstorage_dart.dart';
+
+class Todo extends Observable {
+  @observable String title;
+  @observable bool completed = false;
+
+  Todo(this.title);
+
+  Todo.fromJson(Map json)
+      : title = json['title'], completed = json['completed'];
+
+  Map toJson() => { 'title': title, 'completed': completed };
+
+  String toString() => "$title (${completed ? '' : 'not '}done)";
+}
+
+@CustomTag('td-model')
+class TodoModel extends PolymerElement {
+  @published ObservableList<Todo> items;
+  @published Iterable<Todo> filtered;
+  @published String storageId;
+
+  @observable int completedCount = 0;
+  @observable int activeCount = 0;
+  @observable bool allCompleted = false;
+  @observable CoreLocalStorage storage;
+  @observable String filter;
+  @observable String activeItemWord;
+
+  final filters = {
+    'active': (item) => !item.completed,
+    'completed': (item) => item.completed
+  };
+
+  factory TodoModel() => new Element.tag('td-model');
+  TodoModel.created() : super.created();
+
+  void ready() {
+    async((_) {
+      if (items == null && storage == null) {
+        items = new ObservableList<Todo>();
+      }
+    });
+  }
+
+
+  void filterChanged() {
+    filterItems();
+  }
+
+  void itemsChanged() {
+    completedCount = items.where(filters['completed']).length;
+    activeCount = items.length - completedCount;
+    allCompleted = completedCount > 0 && activeCount == 0;
+
+    filterItems();
+    if (storage != null) {
+      storage.value = items;
+      storage.save();
+    }
+
+    // TODO(jmesserly): polymer_expressions lacks ternary operator.
+    activeItemWord = activeCount == 1 ? 'item' : 'items';
+  }
+
+  void storageIdChanged() {
+    storage = document.querySelector('#$storageId');
+    if (storage == null) return;
+    if (storage.loaded) {
+      items = toObservable(storage.value.map((i) => new Todo.fromJson(i)));
+    } else {
+      storage.on['core-localstorage-load'].listen((e) {
+        items = toObservable(storage.value.map((i) => new Todo.fromJson(i)));
+      });
+    }
+  }
+
+  void filterItems() {
+    var fn = filters[filter];
+    filtered = fn != null ? items.where(fn) : items;
+  }
+
+  void newItem(String title) {
+    title = title.trim();
+    if (title != '') {
+      items.add(new Todo(title));
+      itemsChanged();
+    }
+  }
+
+  void destroyItem(Todo item) {
+    if (items.remove(item)) itemsChanged();
+  }
+
+  void clearItems() {
+    items.removeWhere(filters['completed']);
+  }
+
+  void setItemsCompleted(bool completed) {
+    for (var item in items) {
+      item.completed = completed;
+    }
+    itemsChanged();
+  }
+}
diff --git a/lib/td_model.html b/lib/td_model.html
new file mode 100644
index 0000000..e2fbcfb
--- /dev/null
+++ b/lib/td_model.html
@@ -0,0 +1,4 @@
+<link rel="import" href="../../packages/polymer/polymer.html">
+<polymer-element name="td-model">
+  <script type="application/dart" src="td_model.dart"></script>
+</polymer-element>
diff --git a/lib/td_todos.css b/lib/td_todos.css
new file mode 100644
index 0000000..4806384
--- /dev/null
+++ b/lib/td_todos.css
@@ -0,0 +1,267 @@
+/* base.css overrides */
+
+@host {
+  * {
+    display: block;
+    position: relative;
+  }
+}
+
+button {
+  margin: 0;
+  padding: 0;
+  border: 0;
+  background: none;
+  font-size: 100%;
+  vertical-align: baseline;
+  font-family: inherit;
+  color: inherit;
+  -webkit-appearance: none;
+  /*-moz-appearance: none;*/
+  -ms-appearance: none;
+  -o-appearance: none;
+  appearance: none;
+}
+
+input::-webkit-input-placeholder {
+  font-style: italic;
+}
+
+input::-moz-placeholder {
+  font-style: italic;
+  color: #a9a9a9;
+}
+
+input:-ms-input-placeholder, #new-todo:-ms-input-placeholder {
+  font-style: italic;
+  color: #a9a9a9;
+}
+
+#todoapp {
+  background: #fff;
+  background: rgba(255, 255, 255, 0.9);
+  /*margin: 130px 0 40px 0;*/
+  margin: 0 0 40px 0;
+  border: 1px solid #ccc;
+  position: relative;
+  border-top-left-radius: 2px;
+  border-top-right-radius: 2px;
+  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.2),
+        0 25px 50px 0 rgba(0, 0, 0, 0.15);
+}
+
+#todoapp:before {
+  content: '';
+  border-left: 1px solid #f5d6d6;
+  border-right: 1px solid #f5d6d6;
+  width: 2px;
+  position: absolute;
+  top: 0;
+  left: 40px;
+  height: 100%;
+}
+
+#header {
+  padding-top: 15px;
+  border-radius: inherit;
+}
+
+#header:before {
+  content: '';
+  position: absolute;
+  top: 0;
+  right: 0;
+  left: 0;
+  height: 15px;
+  z-index: 2;
+  border-bottom: 1px solid #6c615c;
+  background: #8d7d77;
+  background: -webkit-gradient(linear, left top, left bottom, from(rgba(132, 110, 100, 0.8)),to(rgba(101, 84, 76, 0.8)));
+  background: -webkit-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
+  background: -moz-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
+  background: -o-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
+  background: -ms-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
+  background: linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
+  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#9d8b83', EndColorStr='#847670');
+  border-top-left-radius: 1px;
+  border-top-right-radius: 1px;
+}
+
+#new-todo,
+.edit {
+  position: relative;
+  margin: 0;
+  width: 100%;
+  font-size: 24px;
+  font-family: inherit;
+  line-height: 1.4em;
+  border: 0;
+  outline: none;
+  color: inherit;
+  padding: 6px;
+  border: 1px solid #999;
+  box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
+  -webkit-box-sizing: border-box;
+  -moz-box-sizing: border-box;
+  -ms-box-sizing: border-box;
+  -o-box-sizing: border-box;
+  box-sizing: border-box;
+  -webkit-font-smoothing: antialiased;
+  -moz-font-smoothing: antialiased;
+  -ms-font-smoothing: antialiased;
+  -o-font-smoothing: antialiased;
+  /* font-smoothing: antialiased; */
+}
+
+#new-todo {
+  padding: 16px 16px 16px 60px;
+  border: none;
+  background: rgba(0, 0, 0, 0.02);
+  z-index: 2;
+  box-shadow: none;
+}
+
+#main {
+  position: relative;
+  z-index: 2;
+  border-top: 1px dotted #adadad;
+}
+
+label[for='toggle-all'] {
+  display: none;
+}
+
+#toggle-all {
+  position: absolute;
+  top: -42px;
+  left: -4px;
+  width: 40px;
+  text-align: center;
+  border: none; /* Mobile Safari */
+}
+
+#toggle-all:before {
+  content: '»';
+  font-size: 28px;
+  color: #d9d9d9;
+  padding: 0 25px 7px;
+}
+
+#toggle-all:checked:before {
+  color: #737373;
+}
+
+#todo-list {
+  margin: 0;
+  padding: 0;
+  list-style: none;
+}
+
+#todo-list li {
+  position: relative;
+  font-size: 24px;
+  border-bottom: 1px dotted #ccc;
+}
+
+#todo-list li:last-child {
+  border-bottom: none;
+}
+
+#todo-list li.editing {
+  border-bottom: none;
+  padding: 0;
+}
+
+#footer {
+  color: #777;
+  padding: 0 15px;
+  position: absolute;
+  right: 0;
+  bottom: -31px;
+  left: 0;
+  height: 20px;
+  z-index: 1;
+  text-align: center;
+}
+
+#footer:before {
+  content: '';
+  position: absolute;
+  right: 0;
+  bottom: 31px;
+  left: 0;
+  height: 50px;
+  z-index: -1;
+  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),
+        0 6px 0 -3px rgba(255, 255, 255, 0.8),
+        0 7px 1px -3px rgba(0, 0, 0, 0.3),
+        0 43px 0 -6px rgba(255, 255, 255, 0.8),
+        0 44px 2px -6px rgba(0, 0, 0, 0.2);
+}
+
+#todo-count {
+  float: left;
+  text-align: left;
+}
+
+#filters {
+  margin: 0;
+  padding: 0;
+  list-style: none;
+  position: absolute;
+  right: 0;
+  left: 0;
+}
+
+#filters li {
+  display: inline;
+}
+
+#filters li a {
+  color: #83756f;
+  margin: 2px;
+  text-decoration: none;
+}
+
+#filters li.polymer-selected a {
+  font-weight: bold;
+}
+
+#clear-completed {
+  float: right;
+  position: relative;
+  line-height: 20px;
+  text-decoration: none;
+  background: rgba(0, 0, 0, 0.1);
+  font-size: 11px;
+  padding: 0 10px;
+  border-radius: 3px;
+  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.2);
+}
+
+#clear-completed:hover {
+  background: rgba(0, 0, 0, 0.15);
+  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.3);
+}
+
+@media screen and (-webkit-min-device-pixel-ratio:0) {
+  #toggle-all {
+    background: none;
+    /*
+      ShadowDOM Polyfill work around for webkit/blink bug
+      https://code.google.com/p/chromium/issues/detail?id=251510
+    */
+    background-color: transparent;
+  }
+
+  #toggle-all {
+    top: -56px;
+    left: -15px;
+    width: 65px;
+    height: 41px;
+    -webkit-transform: rotate(90deg);
+    transform: rotate(90deg);
+    -webkit-appearance: none;
+    appearance: none;
+  }
+}
diff --git a/lib/td_todos.dart b/lib/td_todos.dart
new file mode 100644
index 0000000..7464656
--- /dev/null
+++ b/lib/td_todos.dart
@@ -0,0 +1,61 @@
+library todomvc.td_todos;
+
+import 'dart:html';
+import 'package:polymer/polymer.dart';
+import 'td_input.dart';
+import 'td_model.dart';
+
+@CustomTag('td-todos')
+class TodoList extends PolymerElement {
+  @published String modelId;
+
+  @observable TodoModel model;
+  @observable String activeRoute;
+
+  factory TodoList() => new Element.tag('td-todos');
+  TodoList.created() : super.created();
+
+  TodoInput get _newTodo => $['new-todo'];
+
+  void modelIdChanged() {
+    model = document.querySelector('#$modelId');
+  }
+
+  void routeAction(e, route) {
+    if (model != null) model.filter = route;
+
+    // TODO(jmesserly): polymer_expressions lacks boolean conversions.
+    activeRoute = (route != null && route != '') ? route : 'all';
+  }
+
+  void addTodoAction() {
+    model.newItem(_newTodo.value);
+    // when polyfilling Object.observe, make sure we update immediately
+    Observable.dirtyCheck();
+    _newTodo.value = '';
+  }
+
+  void cancelAddTodoAction() {
+    _newTodo.value = '';
+  }
+
+  void itemChangedAction() {
+    if (model != null) model.itemsChanged();
+  }
+
+  void destroyItemAction(e, detail) {
+    model.destroyItem(detail);
+  }
+
+  void toggleAllCompletedAction(e, detail, sender) {
+    model.setItemsCompleted(sender.checked);
+  }
+
+  void clearCompletedAction() {
+    model.clearItems();
+  }
+
+  // TODO(jmesserly): workaround for HTML Imports not setting correct baseURI
+  String get baseUri =>
+      element.element.ownerDocument == document ? '../' : '';
+}
diff --git a/lib/td_todos.html b/lib/td_todos.html
new file mode 100644
index 0000000..a41bcb5
--- /dev/null
+++ b/lib/td_todos.html
@@ -0,0 +1,51 @@
+<link rel="import" href="../../packages/core_elements/core_selector.html">
+<link rel="import" href="router/simple_router.html">
+<link rel="import" href="td_input.html">
+<link rel="import" href="td_item.html">
+
+<polymer-element name="td-todos">
+  <template>
+    <link rel="stylesheet" href="td_todos.css">
+    <simple-router on-route="{{routeAction}}"></simple-router>
+    <section id="todoapp">
+      <header id="header">
+        <input is="td-input" id="new-todo" placeholder="What needs to be done?"
+            autofocus on-td-input-commit="{{addTodoAction}}"
+            on-td-input-cancel="{{cancelAddTodoAction}}">
+      </header>
+      <section id="main" hidden?="{{model.items.length == 0}}">
+        <input id="toggle-all" type="checkbox"
+            on-change="{{toggleAllCompletedAction}}"
+            checked="{{model.allCompleted}}">
+        <label for="toggle-all">Mark all as complete</label>
+        <ul id="todo-list" on-td-item-changed="{{itemChangedAction}}"
+            on-td-destroy-item="{{destroyItemAction}}">
+          <template repeat="{{model.filtered}}">
+            <li is="td-item" item="{{}}"></li>
+          </template>
+        </ul>
+      </section>
+      <footer id="footer" hidden?="{{model.items.length == 0}}">
+        <span id="todo-count"><strong>{{model.activeCount}}</strong>
+            {{model.activeItemWord}} left</span>
+        <core-selector id="filters" selected="{{activeRoute}}">
+          <li label="all">
+            <a _href="{{baseUri}}#/">All</a>
+          </li>
+          <li label="active">
+            <a _href="{{baseUri}}#/active">Active</a>
+          </li>
+          <li label="completed">
+            <a _href="{{baseUri}}#/completed">Completed</a>
+          </li>
+        </core-selector>
+        <button hidden?="{{model.completedCount == 0}}" id="clear-completed"
+            on-click="{{clearCompletedAction}}">Clear completed
+            ({{model.completedCount}})</button>
+      </footer>
+    </section>
+  </template>
+
+  <script type="application/dart" src="td_todos.dart"></script>
+
+</polymer-element>
diff --git a/pubspec.yaml b/pubspec.yaml
index 55fca21..20b49bb 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -2,10 +2,16 @@ name: todomvc
 description: TodoMVC built with the polymer.dart package
 version: 0.15.1
 dependencies:
-  polymer: ">=0.14.0 <0.15.0"
+  polymer: ">=0.15.0 <0.16.0"
+  core_elements: ">= 0.4.0 <0.5.0"
 transformers:
 - polymer:
-    entry_points: web/index.html
+    entry_points:
+    - web/index.html
+    - test/listorder_test.html
+    - test/markdone_test.html
+    - test/markdone_shadow_test.html
+    - test/mainpage_test.html
 dev_dependencies:
   unittest: ">=0.10.0 <0.11.0"
 environment:
diff --git a/test/listorder_test.dart b/test/listorder_test.dart
index f059943..f75190a 100644
--- a/test/listorder_test.dart
+++ b/test/listorder_test.dart
@@ -9,8 +9,8 @@ import 'dart:html';
 import 'package:polymer/polymer.dart';
 import 'package:unittest/unittest.dart';
 import 'package:unittest/html_config.dart';
-import '../web/elements/td_model.dart';
-import '../web/elements/td_todos.dart';
+import 'package:todomvc/td_model.dart';
+import 'package:todomvc/td_todos.dart';
 import 'utils.dart';
 
 /**
diff --git a/test/listorder_test.html b/test/listorder_test.html
index 4e07cf7..0af5be6 100644
--- a/test/listorder_test.html
+++ b/test/listorder_test.html
@@ -9,10 +9,9 @@ BSD-style license that can be found in the LICENSE file.
   <!--polymer-test: this comment is needed for test_suite.dart-->
   <meta charset="utf-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
-  <link rel="stylesheet" href="../web/app/app.css">
-  <script src="packages/web_components/dart_support.js"></script>
-  <link rel="import" href="../web/elements/td_model.html">
-  <link rel="import" href="../web/elements/td_todos.html">
+  <link rel="stylesheet" href="packages/todomvc/app/app.css">
+  <link rel="import" href="packages/todomvc/td_model.html">
+  <link rel="import" href="packages/todomvc/td_todos.html">
   <script src="/root_dart/tools/testing/dart/test_controller.js"></script>
   <title>Polymer.dart • TodoMVC</title>
 </head>
diff --git a/test/mainpage_test.dart b/test/mainpage_test.dart
index 4b199f4..a2b93c1 100644
--- a/test/mainpage_test.dart
+++ b/test/mainpage_test.dart
@@ -10,8 +10,8 @@ import 'dart:js' as js;
 import 'package:polymer/polymer.dart';
 import 'package:unittest/html_config.dart';
 import 'package:unittest/unittest.dart';
-import '../web/elements/td_model.dart';
-import '../web/elements/td_todos.dart';
+import 'package:todomvc/td_model.dart';
+import 'package:todomvc/td_todos.dart';
 import 'utils.dart';
 
 /**
diff --git a/test/mainpage_test.html b/test/mainpage_test.html
index 47070da..25fe9f9 100644
--- a/test/mainpage_test.html
+++ b/test/mainpage_test.html
@@ -9,10 +9,9 @@ BSD-style license that can be found in the LICENSE file.
   <!--polymer-test: this comment is needed for test_suite.dart-->
   <meta charset="utf-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
-  <link rel="stylesheet" href="../web/app/app.css">
-  <script src="packages/web_components/dart_support.js"></script>
-  <link rel="import" href="../web/elements/td_model.html">
-  <link rel="import" href="../web/elements/td_todos.html">
+  <link rel="stylesheet" href="packages/todomvc/app/app.css">
+  <link rel="import" href="packages/todomvc/td_model.html">
+  <link rel="import" href="packages/todomvc/td_todos.html">
   <script src="/root_dart/tools/testing/dart/test_controller.js"></script>
   <title>Polymer.dart • TodoMVC</title>
 </head>
diff --git a/test/markdone_shadow_test.html b/test/markdone_shadow_test.html
index b189e61..cb3b099 100644
--- a/test/markdone_shadow_test.html
+++ b/test/markdone_shadow_test.html
@@ -15,10 +15,11 @@ BSD-style license that can be found in the LICENSE file.
   Platform.flags = Platform.flags || {};
   Platform.flags.shadow = true;
   </script>
-  <link rel="stylesheet" href="../web/app/app.css">
+  <script src="packages/web_components/platform.js"></script>
   <script src="packages/web_components/dart_support.js"></script>
-  <link rel="import" href="../web/elements/td_model.html">
-  <link rel="import" href="../web/elements/td_todos.html">
+  <link rel="stylesheet" href="packages/todomvc/app/app.css">
+  <link rel="import" href="packages/todomvc/td_model.html">
+  <link rel="import" href="packages/todomvc/td_todos.html">
   <script src="/root_dart/tools/testing/dart/test_controller.js"></script>
   <title>Polymer.dart • TodoMVC</title>
 </head>
diff --git a/test/markdone_test.dart b/test/markdone_test.dart
index 1622a43..1a99923 100644
--- a/test/markdone_test.dart
+++ b/test/markdone_test.dart
@@ -9,7 +9,7 @@ import 'dart:html';
 import 'package:polymer/polymer.dart';
 import 'package:unittest/unittest.dart';
 import 'package:unittest/html_config.dart';
-import '../web/elements/td_model.dart';
+import 'package:todomvc/td_model.dart';
 import 'utils.dart';
 
 Node findWithText(Node node, String text) {
diff --git a/test/markdone_test.html b/test/markdone_test.html
index abc1500..ff45a5a 100644
--- a/test/markdone_test.html
+++ b/test/markdone_test.html
@@ -9,10 +9,9 @@ BSD-style license that can be found in the LICENSE file.
   <!--polymer-test: this comment is needed for test_suite.dart-->
   <meta charset="utf-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
-  <link rel="stylesheet" href="../web/app/app.css">
-  <script src="packages/web_components/dart_support.js"></script>
-  <link rel="import" href="../web/elements/td_model.html">
-  <link rel="import" href="../web/elements/td_todos.html">
+  <link rel="stylesheet" href="packages/todomvc/app/app.css">
+  <link rel="import" href="packages/todomvc/td_model.html">
+  <link rel="import" href="packages/todomvc/td_todos.html">
   <script src="/root_dart/tools/testing/dart/test_controller.js"></script>
   <title>Polymer.dart • TodoMVC</title>
 </head>
diff --git a/web/app/app.css b/web/app/app.css
deleted file mode 100644
index 68a1468..0000000
--- a/web/app/app.css
+++ /dev/null
@@ -1,206 +0,0 @@
-/* base.css overrides */
-
-html,
-body {
-  margin: 0;
-  padding: 0;
-}
-
-body {
-  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
-  line-height: 1.4em;
-  background: #eaeaea url('bg.png');
-  color: #4d4d4d;
-  width: 550px;
-  margin: 0 auto;
-  -webkit-font-smoothing: antialiased;
-  -moz-font-smoothing: antialiased;
-  -ms-font-smoothing: antialiased;
-  -o-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-}
-
-body > header {
-  padding-top: 22px;
-  margin-bottom: -5px;
-}
-
-h1 {
-  /*  position: absolute;
-  top: -120px;*/
-  width: 100%;
-  font-size: 70px;
-  font-weight: bold;
-  text-align: center;
-  color: #b3b3b3;
-  color: rgba(255, 255, 255, 0.3);
-  text-shadow: -1px -1px rgba(0, 0, 0, 0.2);
-  -webkit-text-rendering: optimizeLegibility;
-  -moz-text-rendering: optimizeLegibility;
-  -ms-text-rendering: optimizeLegibility;
-  -o-text-rendering: optimizeLegibility;
-  text-rendering: optimizeLegibility;
-}
-
-#info {
-  margin: 65px auto 0;
-  color: #a6a6a6;
-  font-size: 12px;
-  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.7);
-  text-align: center;
-}
-
-#info a {
-  color: inherit;
-}
-
-.hidden{
-  display:none;
-}
-
-hr {
-  margin: 20px 0;
-  border: 0;
-  border-top: 1px dashed #C5C5C5;
-  border-bottom: 1px dashed #F7F7F7;
-}
-
-.learn a {
-  font-weight: normal;
-  text-decoration: none;
-  color: #b83f45;
-}
-
-.learn a:hover {
-  text-decoration: underline;
-  color: #787e7e;
-}
-
-.learn h3,
-.learn h4,
-.learn h5 {
-  margin: 10px 0;
-  font-weight: 500;
-  line-height: 1.2;
-  color: #000;
-}
-
-.learn h3 {
-  font-size: 24px;
-}
-
-.learn h4 {
-  font-size: 18px;
-}
-
-.learn h5 {
-  margin-bottom: 0;
-  font-size: 14px;
-}
-
-.learn ul {
-  padding: 0;
-  margin: 0 0 30px 25px;
-}
-
-.learn li {
-  line-height: 20px;
-}
-
-.learn p {
-  font-size: 15px;
-  font-weight: 300;
-  line-height: 1.3;
-  margin-top: 0;
-  margin-bottom: 0;
-}
-
-.quote {
-  border: none;
-  margin: 20px 0 60px 0;
-}
-
-.quote p {
-  font-style: italic;
-}
-
-.quote p:before {
-  content: '“';
-  font-size: 50px;
-  opacity: .15;
-  position: absolute;
-  top: -20px;
-  left: 3px;
-}
-
-.quote p:after {
-  content: '”';
-  font-size: 50px;
-  opacity: .15;
-  position: absolute;
-  bottom: -42px;
-  right: 3px;
-}
-
-.quote footer {
-  position: absolute;
-  bottom: -40px;
-  right: 0;
-}
-
-.quote footer img {
-  border-radius: 3px;
-}
-
-.quote footer a {
-  margin-left: 5px;
-  vertical-align: middle;
-}
-
-.speech-bubble {
-  position: relative;
-  padding: 10px;
-  background: rgba(0, 0, 0, .04);
-  border-radius: 5px;
-}
-
-.speech-bubble:after {
-  content: '';
-  position: absolute;
-  top: 100%;
-  right: 30px;
-  border: 13px solid transparent;
-  border-top-color: rgba(0, 0, 0, .04);
-}
-
-/**body*/.learn-bar > .learn {
-  position: absolute;
-  width: 272px;
-  top: 8px;
-  left: -300px;
-  padding: 10px;
-  border-radius: 5px;
-  background-color: rgba(255, 255, 255, .6);
-  transition-property: left;
-  transition-duration: 500ms;
-}
-
-
-/* IE doesn't support the hidden attribute */
-[hidden] {
-  display: none;
-}
-
-@media (min-width: 899px) {
-  /**body*/.learn-bar {
-    width: auto;
-    margin: 0 0 0 300px;
-  }
-  /**body*/.learn-bar > .learn {
-    left: 8px;
-  }
-  /**body*/.learn-bar #todoapp {
-    width: 550px;
-    margin: 130px auto 40px auto;
-  }
-}
\ No newline at end of file
diff --git a/web/app/bg.png b/web/app/bg.png
deleted file mode 100644
index b2a7600..0000000
Binary files a/web/app/bg.png and /dev/null differ
diff --git a/web/elements/td_input.dart b/web/elements/td_input.dart
deleted file mode 100644
index fc3211f..0000000
--- a/web/elements/td_input.dart
+++ /dev/null
@@ -1,27 +0,0 @@
-library todomvc.web.elements.td_input;
-
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-
-@CustomTag('td-input')
-class TodoInput extends InputElement with Polymer, Observable {
-  factory TodoInput() => new Element.tag('input', 'td-input');
-  TodoInput.created() : super.created() {
-    polymerCreated();
-  }
-
-  keypressAction(e) {
-    // Listen for enter on keypress but esc on keyup, because
-    // IE doesn't fire keyup for enter.
-    if (e.keyCode == KeyCode.ENTER) {
-      e.preventDefault();
-      fire('td-input-commit');
-    }
-  }
-
-  keyupAction(e) {
-    if (e.keyCode == KeyCode.ESC) {
-      fire('td-input-cancel');
-    }
-  }
-}
diff --git a/web/elements/td_input.html b/web/elements/td_input.html
deleted file mode 100644
index 192d0c7..0000000
--- a/web/elements/td_input.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<link rel="import" href="../packages/polymer/polymer.html">
-<polymer-element name="td-input" extends="input"
-    on-keyup="{{keyupAction}}" on-keypress="{{keypressAction}}">
-  <script type="application/dart" src="td_input.dart"></script>
-</polymer-element>
diff --git a/web/elements/td_item.css b/web/elements/td_item.css
deleted file mode 100644
index 61feb6c..0000000
--- a/web/elements/td_item.css
+++ /dev/null
@@ -1,161 +0,0 @@
-/* base.css overrides */
-@host {
-  .editing {
-    border-bottom: none;
-    padding: 0;
-  }
-}
-
-button {
-  margin: 0;
-  padding: 0;
-  border: 0;
-  background-color: transparent;
-  background-image: none;
-  font-size: 100%;
-  vertical-align: baseline;
-  font-family: inherit;
-  color: inherit;
-  -webkit-appearance: none;
-  /*-moz-appearance: none;*/
-  -ms-appearance: none;
-  -o-appearance: none;
-  appearance: none;
-}
-
-
-.edit {
-  position: relative;
-  margin: 0;
-  width: 100%;
-  font-size: 24px;
-  font-family: inherit;
-  line-height: 1.4em;
-  border: 0;
-  outline: none;
-  color: inherit;
-  padding: 6px;
-  border: 1px solid #999;
-  box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
-  -webkit-box-sizing: border-box;
-  -moz-box-sizing: border-box;
-  -ms-box-sizing: border-box;
-  -o-box-sizing: border-box;
-  box-sizing: border-box;
-  -webkit-font-smoothing: antialiased;
-  -moz-font-smoothing: antialiased;
-  -ms-font-smoothing: antialiased;
-  -o-font-smoothing: antialiased;
-  font-smoothing: antialiased;
-}
-
-.edit {
-  width: 506px;
-  padding: 13px 17px 12px 17px;
-  margin: 0 0 0 43px;
-}
-
-.toggle {
-  text-align: center;
-  width: 40px;
-  /* auto, since non-WebKit browsers doesn't support input styling */
-  height: auto;
-  position: absolute;
-  top: 0;
-  bottom: 0;
-  margin: auto 0;
-  border: none; /* Mobile Safari */
-  -webkit-appearance: none;
-  /*-moz-appearance: none;*/
-  -ms-appearance: none;
-  -o-appearance: none;
-  appearance: none;
-}
-
-.toggle:after {
-  content: '✔';
-  line-height: 43px; /* 40 + a couple of pixels visual adjustment */
-  font-size: 20px;
-  color: #d9d9d9;
-  text-shadow: 0 -1px 0 #bfbfbf;
-}
-
-.toggle:checked:after {
-  color: #85ada7;
-  text-shadow: 0 1px 0 #669991;
-  bottom: 1px;
-  position: relative;
-}
-
-label {
-  word-break: break-word;
-  padding: 15px;
-  margin-left: 45px;
-  display: block;
-  line-height: 1.2;
-  -webkit-transition: color 0.4s;
-  -moz-transition: color 0.4s;
-  -ms-transition: color 0.4s;
-  -o-transition: color 0.4s;
-  transition: color 0.4s;
-}
-
-.completed label {
-  color: #a9a9a9;
-  text-decoration: line-through;
-}
-
-.destroy {
-  display: none;
-  position: absolute;
-  top: 0;
-  right: 10px;
-  bottom: 0;
-  width: 40px;
-  height: 40px;
-  margin: auto 0;
-  font-size: 22px;
-  color: #a88a8a;
-  -webkit-transition: all 0.2s;
-  -moz-transition: all 0.2s;
-  -ms-transition: all 0.2s;
-  -o-transition: all 0.2s;
-  transition: all 0.2s;
-}
-
-.destroy:hover {
-  text-shadow: 0 0 1px #000,
-         0 0 10px rgba(199, 107, 107, 0.8);
-  -webkit-transform: scale(1.3);
-  -moz-transform: scale(1.3);
-  -ms-transform: scale(1.3);
-  -o-transform: scale(1.3);
-  transform: scale(1.3);
-}
-
-.destroy:after {
-  content: '✖';
-}
-
-.view:hover .destroy {
-  display: block;
-}
-
-/*
-  Hack to remove background from Mobile Safari.
-  Can't use it globally since it destroys checkboxes in Firefox and Opera
-*/
-@media screen and (-webkit-min-device-pixel-ratio:0) {
-  .toggle {
-    background: none;
-    /*
-      ShadowDOM Polyfill work around for webkit/blink bug
-      https://code.google.com/p/chromium/issues/detail?id=251510
-    */
-    background-color: transparent;
-  }
-
-  .toggle {
-    height: 40px;
-  }
-}
diff --git a/web/elements/td_item.dart b/web/elements/td_item.dart
deleted file mode 100644
index 8970fe5..0000000
--- a/web/elements/td_item.dart
+++ /dev/null
@@ -1,45 +0,0 @@
-library todomvc.web.elements.td_item;
-
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-import 'td_model.dart';
-
-@CustomTag('td-item')
-class TodoItem extends LIElement with Polymer, Observable {
-  @published bool editing = false;
-  @published Todo item;
-
-  factory TodoItem() => new Element.tag('li', 'td-item');
-  TodoItem.created() : super.created() { polymerCreated(); }
-
-  editAction() {
-    editing = true;
-    // schedule focus for the end of microtask, when the input will be visible
-    async((_) => $['edit'].focus());
-  }
-
-  commitAction() {
-    if (editing) {
-      editing = false;
-      item.title = item.title.trim();
-      if (item.title == '') {
-        destroyAction();
-      }
-      fire('td-item-changed');
-    }
-  }
-
-  cancelAction() {
-    editing = false;
-  }
-
-  itemChangeAction() {
-    // TODO(jmesserly): asyncFire is needed because "click" fires before
-    // "item.checked" is updated on Firefox. Need to check Polymer.js.
-    asyncFire('td-item-changed');
-  }
-
-  destroyAction() {
-    fire('td-destroy-item', detail: item);
-  }
-}
diff --git a/web/elements/td_item.html b/web/elements/td_item.html
deleted file mode 100644
index 8d5dd0d..0000000
--- a/web/elements/td_item.html
+++ /dev/null
@@ -1,17 +0,0 @@
-<link rel="import" href="td_input.html">
-<polymer-element name="td-item" extends="li" on-blur="{{commitAction}}">
-  <template>
-    <link rel="stylesheet" href="td_item.css">
-    <div class="view {{ {'completed': item.completed, 'editing': editing} }}"
-        hidden?="{{editing}}" on-dblclick="{{editAction}}">
-      <input type="checkbox" class="toggle" checked="{{item.completed}}"
-          on-click="{{itemChangeAction}}">
-      <label>{{item.title}}</label>
-      <button class="destroy" on-click="{{destroyAction}}"></button>
-    </div>
-    <input is="td-input" id="edit" class="edit" value="{{item.title}}"
-        hidden?="{{!editing}}" on-td-input-commit="{{commitAction}}"
-        on-td-input-cancel="{{cancelAction}}">
-  </template>
-  <script type="application/dart" src="td_item.dart"></script>
-</polymer-element>
diff --git a/web/elements/td_model.dart b/web/elements/td_model.dart
deleted file mode 100644
index 40fe756..0000000
--- a/web/elements/td_model.dart
+++ /dev/null
@@ -1,101 +0,0 @@
-library todomvc.web.elements.td_model;
-
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-import '../lib-elements/polymer_localstorage.dart';
-
-class Todo extends Observable {
-  @observable String title;
-  @observable bool completed = false;
-
-  Todo(this.title);
-
-  Todo.fromJson(Map json)
-      : title = json['title'], completed = json['completed'];
-
-  Map toJson() => { 'title': title, 'completed': completed };
-
-  String toString() => "$title (${completed ? '' : 'not '}done)";
-}
-
-@CustomTag('td-model')
-class TodoModel extends PolymerElement {
-  @published ObservableList<Todo> items;
-  @published Iterable<Todo> filtered;
-  @published String storageId;
-
-  @observable int completedCount = 0;
-  @observable int activeCount = 0;
-  @observable bool allCompleted = false;
-  @observable PolymerLocalStorage storage;
-  @observable String filter;
-  @observable String activeItemWord;
-
-  final filters = {
-    'active': (item) => !item.completed,
-    'completed': (item) => item.completed
-  };
-
-  factory TodoModel() => new Element.tag('td-model');
-  TodoModel.created() : super.created();
-
-  void ready() {
-    async((_) {
-      if (items == null) items = new ObservableList<Todo>();
-    });
-  }
-
-  void filterChanged() {
-    filterItems();
-  }
-
-  void itemsChanged() {
-    completedCount = items.where(filters['completed']).length;
-    activeCount = items.length - completedCount;
-    allCompleted = completedCount > 0 && activeCount == 0;
-
-    filterItems();
-    if (storage != null) {
-      storage.value = items;
-      storage.save();
-    }
-
-    // TODO(jmesserly): polymer_expressions lacks ternary operator.
-    activeItemWord = activeCount == 1 ? 'item' : 'items';
-  }
-
-  void storageIdChanged() {
-    storage = document.querySelector('#$storageId');
-    if (storage != null && storage.value != null) {
-      items = toObservable(storage.value.map((i) => new Todo.fromJson(i)));
-    }
-  }
-
-  void filterItems() {
-    var fn = filters[filter];
-    filtered = fn != null ? items.where(fn) : items;
-  }
-
-  void newItem(String title) {
-    title = title.trim();
-    if (title != '') {
-      items.add(new Todo(title));
-      itemsChanged();
-    }
-  }
-
-  void destroyItem(Todo item) {
-    if (items.remove(item)) itemsChanged();
-  }
-
-  void clearItems() {
-    items.removeWhere(filters['completed']);
-  }
-
-  void setItemsCompleted(bool completed) {
-    for (var item in items) {
-      item.completed = completed;
-    }
-    itemsChanged();
-  }
-}
diff --git a/web/elements/td_model.html b/web/elements/td_model.html
deleted file mode 100644
index 4c5d8d3..0000000
--- a/web/elements/td_model.html
+++ /dev/null
@@ -1,4 +0,0 @@
-<link rel="import" href="../packages/polymer/polymer.html">
-<polymer-element name="td-model">
-  <script type="application/dart" src="td_model.dart"></script>
-</polymer-element>
diff --git a/web/elements/td_todos.css b/web/elements/td_todos.css
deleted file mode 100644
index 4806384..0000000
--- a/web/elements/td_todos.css
+++ /dev/null
@@ -1,267 +0,0 @@
-/* base.css overrides */
-
-@host {
-  * {
-    display: block;
-    position: relative;
-  }
-}
-
-button {
-  margin: 0;
-  padding: 0;
-  border: 0;
-  background: none;
-  font-size: 100%;
-  vertical-align: baseline;
-  font-family: inherit;
-  color: inherit;
-  -webkit-appearance: none;
-  /*-moz-appearance: none;*/
-  -ms-appearance: none;
-  -o-appearance: none;
-  appearance: none;
-}
-
-input::-webkit-input-placeholder {
-  font-style: italic;
-}
-
-input::-moz-placeholder {
-  font-style: italic;
-  color: #a9a9a9;
-}
-
-input:-ms-input-placeholder, #new-todo:-ms-input-placeholder {
-  font-style: italic;
-  color: #a9a9a9;
-}
-
-#todoapp {
-  background: #fff;
-  background: rgba(255, 255, 255, 0.9);
-  /*margin: 130px 0 40px 0;*/
-  margin: 0 0 40px 0;
-  border: 1px solid #ccc;
-  position: relative;
-  border-top-left-radius: 2px;
-  border-top-right-radius: 2px;
-  box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.2),
-        0 25px 50px 0 rgba(0, 0, 0, 0.15);
-}
-
-#todoapp:before {
-  content: '';
-  border-left: 1px solid #f5d6d6;
-  border-right: 1px solid #f5d6d6;
-  width: 2px;
-  position: absolute;
-  top: 0;
-  left: 40px;
-  height: 100%;
-}
-
-#header {
-  padding-top: 15px;
-  border-radius: inherit;
-}
-
-#header:before {
-  content: '';
-  position: absolute;
-  top: 0;
-  right: 0;
-  left: 0;
-  height: 15px;
-  z-index: 2;
-  border-bottom: 1px solid #6c615c;
-  background: #8d7d77;
-  background: -webkit-gradient(linear, left top, left bottom, from(rgba(132, 110, 100, 0.8)),to(rgba(101, 84, 76, 0.8)));
-  background: -webkit-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
-  background: -moz-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
-  background: -o-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
-  background: -ms-linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
-  background: linear-gradient(top, rgba(132, 110, 100, 0.8), rgba(101, 84, 76, 0.8));
-  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#9d8b83', EndColorStr='#847670');
-  border-top-left-radius: 1px;
-  border-top-right-radius: 1px;
-}
-
-#new-todo,
-.edit {
-  position: relative;
-  margin: 0;
-  width: 100%;
-  font-size: 24px;
-  font-family: inherit;
-  line-height: 1.4em;
-  border: 0;
-  outline: none;
-  color: inherit;
-  padding: 6px;
-  border: 1px solid #999;
-  box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
-  -webkit-box-sizing: border-box;
-  -moz-box-sizing: border-box;
-  -ms-box-sizing: border-box;
-  -o-box-sizing: border-box;
-  box-sizing: border-box;
-  -webkit-font-smoothing: antialiased;
-  -moz-font-smoothing: antialiased;
-  -ms-font-smoothing: antialiased;
-  -o-font-smoothing: antialiased;
-  /* font-smoothing: antialiased; */
-}
-
-#new-todo {
-  padding: 16px 16px 16px 60px;
-  border: none;
-  background: rgba(0, 0, 0, 0.02);
-  z-index: 2;
-  box-shadow: none;
-}
-
-#main {
-  position: relative;
-  z-index: 2;
-  border-top: 1px dotted #adadad;
-}
-
-label[for='toggle-all'] {
-  display: none;
-}
-
-#toggle-all {
-  position: absolute;
-  top: -42px;
-  left: -4px;
-  width: 40px;
-  text-align: center;
-  border: none; /* Mobile Safari */
-}
-
-#toggle-all:before {
-  content: '»';
-  font-size: 28px;
-  color: #d9d9d9;
-  padding: 0 25px 7px;
-}
-
-#toggle-all:checked:before {
-  color: #737373;
-}
-
-#todo-list {
-  margin: 0;
-  padding: 0;
-  list-style: none;
-}
-
-#todo-list li {
-  position: relative;
-  font-size: 24px;
-  border-bottom: 1px dotted #ccc;
-}
-
-#todo-list li:last-child {
-  border-bottom: none;
-}
-
-#todo-list li.editing {
-  border-bottom: none;
-  padding: 0;
-}
-
-#footer {
-  color: #777;
-  padding: 0 15px;
-  position: absolute;
-  right: 0;
-  bottom: -31px;
-  left: 0;
-  height: 20px;
-  z-index: 1;
-  text-align: center;
-}
-
-#footer:before {
-  content: '';
-  position: absolute;
-  right: 0;
-  bottom: 31px;
-  left: 0;
-  height: 50px;
-  z-index: -1;
-  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3),
-        0 6px 0 -3px rgba(255, 255, 255, 0.8),
-        0 7px 1px -3px rgba(0, 0, 0, 0.3),
-        0 43px 0 -6px rgba(255, 255, 255, 0.8),
-        0 44px 2px -6px rgba(0, 0, 0, 0.2);
-}
-
-#todo-count {
-  float: left;
-  text-align: left;
-}
-
-#filters {
-  margin: 0;
-  padding: 0;
-  list-style: none;
-  position: absolute;
-  right: 0;
-  left: 0;
-}
-
-#filters li {
-  display: inline;
-}
-
-#filters li a {
-  color: #83756f;
-  margin: 2px;
-  text-decoration: none;
-}
-
-#filters li.polymer-selected a {
-  font-weight: bold;
-}
-
-#clear-completed {
-  float: right;
-  position: relative;
-  line-height: 20px;
-  text-decoration: none;
-  background: rgba(0, 0, 0, 0.1);
-  font-size: 11px;
-  padding: 0 10px;
-  border-radius: 3px;
-  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.2);
-}
-
-#clear-completed:hover {
-  background: rgba(0, 0, 0, 0.15);
-  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.3);
-}
-
-@media screen and (-webkit-min-device-pixel-ratio:0) {
-  #toggle-all {
-    background: none;
-    /*
-      ShadowDOM Polyfill work around for webkit/blink bug
-      https://code.google.com/p/chromium/issues/detail?id=251510
-    */
-    background-color: transparent;
-  }
-
-  #toggle-all {
-    top: -56px;
-    left: -15px;
-    width: 65px;
-    height: 41px;
-    -webkit-transform: rotate(90deg);
-    transform: rotate(90deg);
-    -webkit-appearance: none;
-    appearance: none;
-  }
-}
diff --git a/web/elements/td_todos.dart b/web/elements/td_todos.dart
deleted file mode 100644
index 17db5d7..0000000
--- a/web/elements/td_todos.dart
+++ /dev/null
@@ -1,61 +0,0 @@
-library todomvc.web.elements.td_todos;
-
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-import 'td_input.dart';
-import 'td_model.dart';
-
-@CustomTag('td-todos')
-class TodoList extends PolymerElement {
-  @published String modelId;
-
-  @observable TodoModel model;
-  @observable String activeRoute;
-
-  factory TodoList() => new Element.tag('td-todos');
-  TodoList.created() : super.created();
-
-  TodoInput get _newTodo => $['new-todo'];
-
-  void modelIdChanged() {
-    model = document.querySelector('#$modelId');
-  }
-
-  void routeAction(e, route) {
-    if (model != null) model.filter = route;
-
-    // TODO(jmesserly): polymer_expressions lacks boolean conversions.
-    activeRoute = (route != null && route != '') ? route : 'all';
-  }
-
-  void addTodoAction() {
-    model.newItem(_newTodo.value);
-    // when polyfilling Object.observe, make sure we update immediately
-    Observable.dirtyCheck();
-    _newTodo.value = '';
-  }
-
-  void cancelAddTodoAction() {
-    _newTodo.value = '';
-  }
-
-  void itemChangedAction() {
-    if (model != null) model.itemsChanged();
-  }
-
-  void destroyItemAction(e, detail) {
-    model.destroyItem(detail);
-  }
-
-  void toggleAllCompletedAction(e, detail, sender) {
-    model.setItemsCompleted(sender.checked);
-  }
-
-  void clearCompletedAction() {
-    model.clearItems();
-  }
-
-  // TODO(jmesserly): workaround for HTML Imports not setting correct baseURI
-  String get baseUri =>
-      element.element.ownerDocument == document ? '../' : '';
-}
diff --git a/web/elements/td_todos.html b/web/elements/td_todos.html
deleted file mode 100644
index 5b4860d..0000000
--- a/web/elements/td_todos.html
+++ /dev/null
@@ -1,51 +0,0 @@
-<link rel="import" href="../lib-elements/polymer-selector.html">
-<link rel="import" href="../lib-elements/simple_router.html">
-<link rel="import" href="td_input.html">
-<link rel="import" href="td_item.html">
-
-<polymer-element name="td-todos">
-  <template>
-    <link rel="stylesheet" href="td_todos.css">
-    <simple-router on-route="{{routeAction}}"></simple-router>
-    <section id="todoapp">
-      <header id="header">
-        <input is="td-input" id="new-todo" placeholder="What needs to be done?"
-            autofocus on-td-input-commit="{{addTodoAction}}"
-            on-td-input-cancel="{{cancelAddTodoAction}}">
-      </header>
-      <section id="main" hidden?="{{model.items.length == 0}}">
-        <input id="toggle-all" type="checkbox"
-            on-change="{{toggleAllCompletedAction}}"
-            checked="{{model.allCompleted}}">
-        <label for="toggle-all">Mark all as complete</label>
-        <ul id="todo-list" on-td-item-changed="{{itemChangedAction}}"
-            on-td-destroy-item="{{destroyItemAction}}">
-          <template repeat="{{model.filtered}}">
-            <li is="td-item" item="{{}}"></li>
-          </template>
-        </ul>
-      </section>
-      <footer id="footer" hidden?="{{model.items.length == 0}}">
-        <span id="todo-count"><strong>{{model.activeCount}}</strong>
-            {{model.activeItemWord}} left</span>
-        <polymer-selector id="filters" selected="{{activeRoute}}">
-          <li label="all">
-            <a _href="{{baseUri}}#/">All</a>
-          </li>
-          <li label="active">
-            <a _href="{{baseUri}}#/active">Active</a>
-          </li>
-          <li label="completed">
-            <a _href="{{baseUri}}#/completed">Completed</a>
-          </li>
-        </polymer-selector>
-        <button hidden?="{{model.completedCount == 0}}" id="clear-completed"
-            on-click="{{clearCompletedAction}}">Clear completed
-            ({{model.completedCount}})</button>
-      </footer>
-    </section>
-  </template>
-
-  <script type="application/dart" src="td_todos.dart"></script>
-
-</polymer-element>
diff --git a/web/index.html b/web/index.html
index 90028d9..79ca666 100644
--- a/web/index.html
+++ b/web/index.html
@@ -4,19 +4,18 @@
     <meta charset="utf-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
     <title>Polymer.dart • TodoMVC</title>
-    <link rel="stylesheet" href="app/app.css">
-    <script src="packages/web_components/dart_support.js"></script>
-    <link rel="import" href="lib-elements/polymer_localstorage.html">
-    <link rel="import" href="elements/td_model.html">
-    <link rel="import" href="elements/td_todos.html">
+    <link rel="stylesheet" href="packages/todomvc/app/app.css">
+    <link rel="import" href="packages/core_elements/core_localstorage_dart.html">
+    <link rel="import" href="packages/todomvc/td_model.html">
+    <link rel="import" href="packages/todomvc/td_todos.html">
     <script type="application/dart">export 'package:polymer/init.dart';</script>
   </head>
   <body unresolved>
     <header>
       <h1>todos</h1>
     </header>
-    <polymer-localstorage id="storage" name="todos-polymer">
-    </polymer-localstorage>
+    <core-localstorage-dart id="storage" name="todos-polymer">
+    </core-localstorage-dart>
     <td-model id="model" storageId="storage"></td-model>
     <td-todos modelId="model"></td-todos>
     <footer id="info">
diff --git a/web/lib-elements/polymer-selection.html b/web/lib-elements/polymer-selection.html
deleted file mode 100644
index 1213b43..0000000
--- a/web/lib-elements/polymer-selection.html
+++ /dev/null
@@ -1,152 +0,0 @@
-<!--
-Copyright 2013 The Polymer Authors. All rights reserved.
-Use of this source code is governed by a BSD-style
-license that can be found in the LICENSE file.
--->
-<!--
-/**
- * @module Polymer Elements
- */
--->
-<!--
-/**
- * The polymer-selection element is used to manage selection state. It has no
- * visual appearance and is typically used in conjuneciton with another element.
- * For example, <a href="polymer-selector.html">polymer-selector</a>
- * use a polymer-selection to manage selection.
- *
- * To mark an item as selected, call the select(item) method on
- * polymer-selection. Notice that the item itself is an argument to this method.
- * The polymer-selection element manages selection state for any given set of
- * items. When an item is selected, the `polymer-select` event is fired.
- * The attribute "multi" indicates if multiple items can be selected at once.
- *
- * Example:
- *
- *     <polymer-element name="selection-example">
- *        <template>
- *          <style>
- *            ::-webkit-distributed(> .selected) {
- *              font-weight: bold;
- *              font-style: italic;
- *            }
- *          </style>
- *          <ul on-tap="{{itemTapAction}}">
- *            <content></content>
- *          </ul>
- *          <polymer-selection id="selection" multi on-polymer-select="{{selectAction}}"></polymer-selection>
- *        </template>
- *        <script>
- *          Polymer('selection-example', {
- *            itemTapAction: function(e) {
- *              this.$.selection.select(e.target);
- *            },
- *            selectAction: function(e, detail) {
- *              detail.item.classList.toggle('selected', detail.isSelected);
- *            }
- *          });
- *        </script>
- *     </polymer-element>
- *
- *     <selection-example>
- *       <li>Red</li>
- *       <li>Green</li>
- *       <li>Blue</li>
- *     </selection-example>
- *
- * @class polymer-selection
- */
- /**
- * Fired when an item's selection state is changed. This event is fired both
- * when an item is selected or deselected. The `isSelected` detail property
- * contains the selection state.
- *
- * @event polymer-select
- * @param {Object} detail
- *   @param {boolean} detail.isSelected true for selection and false for deselection
- *   @param {Object} detail.item the item element
- */
--->
-<link rel="import" href="../packages/polymer/polymer.html">
-<polymer-element name="polymer-selection" attributes="multi">
-  <template>
-    <style>
-      :host {
-        display: none !important;
-      }
-    </style>
-  </template>
-  <script>
-    Polymer('polymer-selection', {
-      /**
-       * If true, multiple selections are allowed.
-       *
-       * @attribute multi
-       * @type boolean
-       * @default false
-       */
-      multi: false,
-      ready: function() {
-        this.clear();
-      },
-      clear: function() {
-        this.selection = [];
-      },
-      /**
-       * Retrieves the selected item(s).
-       * @method getSelection
-       * @returns Returns the selected item(s). If the multi property is true,
-       * getSelection will return an array, otherwise it will return
-       * the selected item or undefined if there is no selection.
-      */
-      getSelection: function() {
-        return this.multi ? this.selection : this.selection[0];
-      },
-      /**
-       * Indicates if a given item is selected.
-       * @method isSelected
-       * @param {any} item The item whose selection state should be checked.
-       * @returns Returns true if `item` is selected.
-      */
-      isSelected: function(item) {
-        return this.selection.indexOf(item) >= 0;
-      },
-      setItemSelected: function(item, isSelected) {
-        if (item !== undefined && item !== null) {
-          if (isSelected) {
-            this.selection.push(item);
-          } else {
-            var i = this.selection.indexOf(item);
-            if (i >= 0) {
-              this.selection.splice(i, 1);
-            }
-          }
-          this.fire("polymer-select", {isSelected: isSelected, item: item});
-        }
-      },
-      /**
-       * Set the selection state for a given `item`. If the multi property
-       * is true, then the selected state of `item` will be toggled; otherwise
-       * the `item` will be selected.
-       * @method select
-       * @param {any} item: The item to select.
-      */
-      select: function(item) {
-        if (this.multi) {
-          this.toggle(item);
-        } else if (this.getSelection() !== item) {
-          this.setItemSelected(this.getSelection(), false);
-          this.setItemSelected(item, true);
-        }
-      },
-      /**
-       * Toggles the selection state for `item`.
-       * @method toggle
-       * @param {any} item: The item to toggle.
-      */
-      toggle: function(item) {
-        this.setItemSelected(item, !this.isSelected(item));
-      }
-    });
-  </script>
-</polymer-element>
diff --git a/web/lib-elements/polymer-selector.html b/web/lib-elements/polymer-selector.html
deleted file mode 100644
index 9fd5074..0000000
--- a/web/lib-elements/polymer-selector.html
+++ /dev/null
@@ -1,353 +0,0 @@
-<!--
-Copyright 2013 The Polymer Authors. All rights reserved.
-Use of this source code is governed by a BSD-style
-license that can be found in the LICENSE file.
--->
-<!--
-/**
- * @module Polymer Elements
- */
-/**
- * polymer-selector is used to manage a list of elements that can be selected.
- * The attribute "selected" indicates which item element is being selected.
- * The attribute "multi" indicates if multiple items can be selected at once.
- * Tapping on the item element would fire "polymer-activate" event. Use
- * "polymer-select" event to listen for selection changes.
- *
- * Example:
- *
- *     <polymer-selector selected="0">
- *       <div>Item 1</div>
- *       <div>Item 2</div>
- *       <div>Item 3</div>
- *     </polymer-selector>
- *
- * polymer-selector is not styled.  So one needs to use "polymer-selected" CSS
- * class to style the selected element.
- *
- *     <style>
- *       .item.polymer-selected {
- *         background: #eee;
- *       }
- *     </style>
- *     ...
- *     <polymer-selector>
- *       <div class="item">Item 1</div>
- *       <div class="item">Item 2</div>
- *       <div class="item">Item 3</div>
- *     </polymer-selector>
- *
- * @class polymer-selector
- */
-/**
- * Fired when an item's selection state is changed. This event is fired both
- * when an item is selected or deselected. The `isSelected` detail property
- * contains the selection state.
- *
- * @event polymer-select
- * @param {Object} detail
- *   @param {boolean} detail.isSelected true for selection and false for deselection
- *   @param {Object} detail.item the item element
- */
-/**
- * Fired when an item element is tapped.
- *
- * @event polymer-activate
- * @param {Object} detail
- *   @param {Object} detail.item the item element
- */
--->
-<link rel="import" href="polymer-selection.html">
-
-<polymer-element name="polymer-selector"
-    attributes="selected multi valueattr selectedClass selectedProperty selectedItem selectedModel selectedIndex notap target itemsSelector activateEvent">
-  <template>
-    <polymer-selection id="selection" multi="{{multi}}" on-polymer-select="{{selectionSelect}}"></polymer-selection>
-    <content id="items" select="*"></content>
-  </template>
-  <script>
-    Polymer('polymer-selector', {
-      /**
-       * Gets or sets the selected element.  Default to use the index
-       * of the item element.
-       *
-       * If you want a specific attribute value of the element to be
-       * used instead of index, set "valueattr" to that attribute name.
-       *
-       * Example:
-       *
-       *     <polymer-selector valueattr="label" selected="foo">
-       *       <div label="foo"></div>
-       *       <div label="bar"></div>
-       *       <div label="zot"></div>
-       *     </polymer-selector>
-       *
-       * In multi-selection this should be an array of values.
-       *
-       * Example:
-       *
-       *     <polymer-selector id="selector" valueattr="label" multi>
-       *       <div label="foo"></div>
-       *       <div label="bar"></div>
-       *       <div label="zot"></div>
-       *     </polymer-selector>
-       *
-       *     this.$.selector.selected = ['foo', 'zot'];
-       *
-       * @attribute selected
-       * @type Object
-       * @default null
-       */
-      selected: null,
-      /**
-       * If true, multiple selections are allowed.
-       *
-       * @attribute multi
-       * @type boolean
-       * @default false
-       */
-      multi: false,
-      /**
-       * Specifies the attribute to be used for "selected" attribute.
-       *
-       * @attribute valueattr
-       * @type string
-       * @default 'name'
-       */
-      valueattr: 'name',
-      /**
-       * Specifies the CSS class to be used to add to the selected element.
-       *
-       * @attribute selectedClass
-       * @type string
-       * @default 'polymer-selected'
-       */
-      selectedClass: 'polymer-selected',
-      /**
-       * Specifies the property to be used to set on the selected element
-       * to indicate its active state.
-       *
-       * @attribute selectedProperty
-       * @type string
-       * @default 'active'
-       */
-      selectedProperty: 'active',
-      /**
-       * Returns the currently selected element. In multi-selection this returns
-       * an array of selected elements.
-       *
-       * @attribute selectedItem
-       * @type Object
-       * @default null
-       */
-      selectedItem: null,
-      /**
-       * In single selection, this returns the model associated with the
-       * selected element.
-       *
-       * @attribute selectedModel
-       * @type Object
-       * @default null
-       */
-      selectedModel: null,
-      /**
-       * In single selection, this returns the selected index.
-       *
-       * @attribute selectedIndex
-       * @type number
-       * @default -1
-       */
-      selectedIndex: -1,
-      /**
-       * The target element that contains items.  If this is not set
-       * polymer-selector is the container.
-       *
-       * @attribute target
-       * @type Object
-       * @default null
-       */
-      target: null,
-      /**
-       * This can be used to query nodes from the target node to be used for
-       * selection items.  Note this only works if the 'target' property is set.
-       *
-       * Example:
-       *
-       *     <polymer-selector target="{{$.myForm}}" itemsSelector="input[type=radio]"></polymer-selector>
-       *     <form id="myForm">
-       *       <label><input type="radio" name="color" value="red"> Red</label> <br>
-       *       <label><input type="radio" name="color" value="green"> Green</label> <br>
-       *       <label><input type="radio" name="color" value="blue"> Blue</label> <br>
-       *       <p>color = {{color}}</p>
-       *     </form>
-       *
-       * @attribute itemSelector
-       * @type string
-       * @default ''
-       */
-      itemsSelector: '',
-      /**
-       * The event that would be fired from the item element to indicate
-       * it is being selected.
-       *
-       * @attribute activateEvent
-       * @type string
-       * @default 'tap'
-       */
-      activateEvent: 'tap',
-      notap: false,
-      ready: function() {
-        this.activateListener = this.activateHandler.bind(this);
-        this.observer = new MutationObserver(this.updateSelected.bind(this));
-        if (!this.target) {
-          this.target = this;
-        }
-      },
-      get items() {
-        var nodes = this.target !== this ? (this.itemsSelector ?
-            this.target.querySelectorAll(this.itemsSelector) :
-                this.target.children) : this.$.items.getDistributedNodes();
-        return Array.prototype.filter.call(nodes || [], function(n) {
-          return n && n.localName !== 'template';
-        });
-      },
-      targetChanged: function(old) {
-        if (old) {
-          this.removeListener(old);
-          this.observer.disconnect();
-        }
-        if (this.target) {
-          this.addListener(this.target);
-          this.observer.observe(this.target, {childList: true});
-        }
-      },
-      addListener: function(node) {
-        node.addEventListener(this.activateEvent, this.activateListener);
-      },
-      removeListener: function(node) {
-        node.removeEventListener(this.activateEvent, this.activateListener);
-      },
-      get selection() {
-        return this.$.selection.getSelection();
-      },
-      selectedChanged: function() {
-        this.updateSelected();
-      },
-      updateSelected: function() {
-        this.validateSelected();
-        if (this.multi) {
-          this.clearSelection();
-          this.selected && this.selected.forEach(function(s) {
-            this.valueToSelection(s);
-          }, this);
-        } else {
-          this.valueToSelection(this.selected);
-        }
-      },
-      validateSelected: function() {
-        // convert to an array for multi-selection
-        if (this.multi && !Array.isArray(this.selected) &&
-            this.selected !== null && this.selected !== undefined) {
-          this.selected = [this.selected];
-        }
-      },
-      clearSelection: function() {
-        if (this.multi) {
-          this.selection.slice().forEach(function(s) {
-            this.$.selection.setItemSelected(s, false);
-          }, this);
-        } else {
-          this.$.selection.setItemSelected(this.selection, false);
-        }
-        this.selectedItem = null;
-        this.$.selection.clear();
-      },
-      valueToSelection: function(value) {
-        var item = (value === null || value === undefined) ?
-            null : this.items[this.valueToIndex(value)];
-        this.$.selection.select(item);
-      },
-      updateSelectedItem: function() {
-        this.selectedItem = this.selection;
-      },
-      selectedItemChanged: function() {
-        if (this.selectedItem) {
-          var t = this.selectedItem.templateInstance;
-          this.selectedModel = t ? t.model : undefined;
-        } else {
-          this.selectedModel = null;
-        }
-        this.selectedIndex = this.selectedItem ?
-            parseInt(this.valueToIndex(this.selected)) : -1;
-      },
-      valueToIndex: function(value) {
-        // find an item with value == value and return it's index
-        for (var i=0, items=this.items, c; (c=items[i]); i++) {
-          if (this.valueForNode(c) == value) {
-            return i;
-          }
-        }
-        // if no item found, the value itself is probably the index
-        return value;
-      },
-      valueForNode: function(node) {
-        return node[this.valueattr] || node.getAttribute(this.valueattr);
-      },
-      // events fired from <polymer-selection> object
-      selectionSelect: function(e, detail) {
-        this.updateSelectedItem();
-        if (detail.item) {
-          this.applySelection(detail.item, detail.isSelected)
-        }
-      },
-      applySelection: function(item, isSelected) {
-        if (this.selectedClass) {
-          item.classList.toggle(this.selectedClass, isSelected);
-        }
-        if (this.selectedProperty) {
-          item[this.selectedProperty] = isSelected;
-        }
-      },
-      // event fired from host
-      activateHandler: function(e) {
-        if (!this.notap) {
-          var i = this.findDistributedTarget(e.target, this.items);
-          if (i >= 0) {
-            var item = this.items[i];
-            var s = this.valueForNode(item) || i;
-            if (this.multi) {
-              if (this.selected) {
-                this.addRemoveSelected(s);
-              } else {
-                this.selected = [s];
-              }
-            } else {
-              this.selected = s;
-            }
-            this.asyncFire('polymer-activate', {item: item});
-          }
-        }
-      },
-      addRemoveSelected: function(value) {
-        var i = this.selected.indexOf(value);
-        if (i >= 0) {
-          this.selected.splice(i, 1);
-        } else {
-          this.selected.push(value);
-        }
-        this.valueToSelection(value);
-      },
-      findDistributedTarget: function(target, nodes) {
-        // find first ancestor of target (including itself) that
-        // is in nodes, if any
-        while (target && target != this) {
-          var i = Array.prototype.indexOf.call(nodes, target);
-          if (i >= 0) {
-            return i;
-          }
-          target = target.parentNode;
-        }
-      }
-    });
-  </script>
-</polymer-element>
diff --git a/web/lib-elements/polymer_localstorage.dart b/web/lib-elements/polymer_localstorage.dart
deleted file mode 100644
index 218aac4..0000000
--- a/web/lib-elements/polymer_localstorage.dart
+++ /dev/null
@@ -1,40 +0,0 @@
-// Copyright 2013 The Polymer Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-library todomvc.web.lib_elements.polymer_localstorage;
-
-import 'dart:convert' show JSON;
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-
-// TODO(jmesserly): replace with interop to <polymer-localstorage>.
-@CustomTag('polymer-localstorage')
-class PolymerLocalStorage extends PolymerElement {
-  @published String name;
-  @published var value;
-  @published bool useRaw = false;
-
-  factory PolymerLocalStorage() => new Element.tag('polymer-localstorage');
-  PolymerLocalStorage.created() : super.created();
-
-  void ready() {
-    load();
-  }
-
-  void valueChanged() {
-    save();
-  }
-
-  void load() {
-    var s = window.localStorage[name];
-    if (s != null && !useRaw) {
-      value = JSON.decode(s);
-    } else {
-      value = s;
-    }
-  }
-
-  void save() {
-    window.localStorage[name] = useRaw ? value : JSON.encode(value);
-  }
-}
diff --git a/web/lib-elements/polymer_localstorage.html b/web/lib-elements/polymer_localstorage.html
deleted file mode 100644
index 10d33e5..0000000
--- a/web/lib-elements/polymer_localstorage.html
+++ /dev/null
@@ -1,28 +0,0 @@
-<!--
-Copyright 2013 The Polymer Authors. All rights reserved.
-Use of this source code is governed by a BSD-style
-license that can be found in the LICENSE file.
--->
-<!--
-/**
- * polymer-localstorage provides access to localStorage.
- *
- * Example:
- *
- *     <polymer-localstorage name="my-app-storage" value="{{value}}">
- *     </polymer-localstorage>
- */
--->
-<link rel="import" href="../packages/polymer/polymer.html">
-<polymer-element name="polymer-localstorage">
-  <template>
-    <style>
-      @host {
-        * {
-          display: none;
-        }
-      }
-    </style>
-  </template>
-  <script type="application/dart" src="polymer_localstorage.dart"></script>
-</polymer-element>
diff --git a/web/lib-elements/simple_router.dart b/web/lib-elements/simple_router.dart
deleted file mode 100644
index 1337a26..0000000
--- a/web/lib-elements/simple_router.dart
+++ /dev/null
@@ -1,41 +0,0 @@
-// Copyright 2013 The Polymer Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-library todomvc.web.lib_elements.simple_router;
-
-import 'dart:async';
-import 'dart:html';
-import 'package:polymer/polymer.dart';
-
-// A very simple router for TodoMVC. Real app should use package:route, but it
-// does not currently support Shadow DOM.
-@CustomTag('simple-router')
-class SimpleRouter extends PolymerElement {
-  @published String route = '';
-
-  StreamSubscription _sub;
-
-  factory SimpleRouter() => new Element.tag('simple-router');
-  SimpleRouter.created() : super.created();
-
-  attached() {
-    super.attached();
-    _sub = windowLocation.changes.listen((_) {
-      var hash = window.location.hash;
-      if (hash.startsWith('#/')) hash = hash.substring(2);
-      // TODO(jmesserly): empty string is not triggering a call to TodoList
-      // routeChanged after deployment. Use 'all' as a workaround.
-      if (hash == '') hash = 'all';
-      route = hash;
-    });
-  }
-
-  detached() {
-    super.detached();
-    _sub.cancel();
-  }
-
-  routeChanged() {
-    fire('route', detail: route);
-  }
-}
diff --git a/web/lib-elements/simple_router.html b/web/lib-elements/simple_router.html
deleted file mode 100644
index 46ec34f..0000000
--- a/web/lib-elements/simple_router.html
+++ /dev/null
@@ -1,9 +0,0 @@
-<!--
-Copyright 2013 The Polymer Authors. All rights reserved.
-Use of this source code is governed by a BSD-style
-license that can be found in the LICENSE file.
--->
-<link rel="import" href="../packages/polymer/polymer.html">
-<polymer-element name="simple-router">
-  <script type="application/dart" src="simple_router.dart"></script>
-</polymer-element>
