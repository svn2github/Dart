// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
init.mangledNames = {get$$$: "$", get$_action_link_element$__$busy: "__$busy", get$_action_link_element$__$callback: "__$callback", get$_action_link_element$__$label: "__$label", get$_breakpoint_list_element$__$msg: "__$msg", get$_classIdToColor: "_classIdToColor", get$_classIdToName: "_classIdToName", get$_class_view_element$__$cls: "__$cls", get$_code_view_element$__$code: "__$code", get$_collapsed: "_collapsed", get$_collapsible_content_element$__$displayValue: "__$displayValue", get$_collapsible_content_element$__$iconClass: "__$iconClass", get$_colorToClassId: "_colorToClassId", get$_curly_block_element$__$busy: "__$busy", get$_curly_block_element$__$callback: "__$callback", get$_curly_block_element$__$expand: "__$expand", get$_curly_block_element$__$expanded: "__$expanded", get$_error_view_element$__$error: "__$error", get$_eval_box_element$__$callback: "__$callback", get$_eval_box_element$__$lineMode: "__$lineMode", get$_eval_box_element$__$results: "__$results", get$_eval_box_element$__$text: "__$text", get$_eval_link_element$__$busy: "__$busy", get$_eval_link_element$__$callback: "__$callback", get$_eval_link_element$__$expr: "__$expr", get$_eval_link_element$__$label: "__$label", get$_eval_link_element$__$result: "__$result", get$_field_view_element$__$field: "__$field", get$_fragmentationCanvas: "_fragmentationCanvas", get$_fragmentationData: "_fragmentationData", get$_function_ref_element$__$hasClass: "__$hasClass", get$_function_ref_element$__$hasParent: "__$hasParent", get$_function_ref_element$__$isDart: "__$isDart", get$_function_ref_element$__$qualified: "__$qualified", get$_function_view_element$__$function: "__$function", get$_function_view_element$__$kind: "__$kind", get$_function_view_element$__$qualifiedName: "__$qualifiedName", get$_heap_map_element$__$fragmentation: "__$fragmentation", get$_heap_map_element$__$status: "__$status", get$_heap_profile_element$__$classTable: "__$classTable", get$_heap_profile_element$__$profile: "__$profile", get$_instance_view_element$__$instance: "__$instance", get$_instance_view_element$__$path: "__$path", get$_isolate_profile_element$__$displayCutoff: "__$displayCutoff", get$_isolate_profile_element$__$hideTagsChecked: "__$hideTagsChecked", get$_isolate_profile_element$__$profile: "__$profile", get$_isolate_profile_element$__$refreshTime: "__$refreshTime", get$_isolate_profile_element$__$sampleCount: "__$sampleCount", get$_isolate_profile_element$__$sampleDepth: "__$sampleDepth", get$_isolate_profile_element$__$sampleRate: "__$sampleRate", get$_isolate_profile_element$__$tagSelector: "__$tagSelector", get$_isolate_profile_element$__$timeSpan: "__$timeSpan", get$_isolate_profile_element$_id: "_id", get$_isolate_summary_element$__$counters: "__$counters", get$_isolate_summary_element$__$isolate: "__$isolate", get$_isolate_view_element$__$isolate: "__$isolate", get$_json_view_element$__$map: "__$map", get$_json_view_element$__$mapAsString: "__$mapAsString", get$_library_view_element$__$library: "__$library", get$_nav_bar_element$__$active: "__$active", get$_nav_bar_element$__$anchor: "__$anchor", get$_nav_bar_element$__$callback: "__$callback", get$_nav_bar_element$__$cls: "__$cls", get$_nav_bar_element$__$isolate: "__$isolate", get$_nav_bar_element$__$label: "__$label", get$_nav_bar_element$__$last: "__$last", get$_nav_bar_element$__$library: "__$library", get$_nav_bar_element$__$link: "__$link", get$_nav_bar_element$__$pad: "__$pad", get$_newPieChart: "_newPieChart", get$_newPieDataTable: "_newPieDataTable", get$_observatory_application_element$__$app: "__$app", get$_observatory_application_element$__$devtools: "__$devtools", get$_oldPieChart: "_oldPieChart", get$_oldPieDataTable: "_oldPieDataTable", get$_pageHeight: "_pageHeight", get$_response_viewer_element$__$app: "__$app", get$_script_inset_element$__$coverage: "__$coverage", get$_script_inset_element$__$endPos: "__$endPos", get$_script_inset_element$__$lines: "__$lines", get$_script_inset_element$__$pos: "__$pos", get$_script_inset_element$__$script: "__$script", get$_script_ref_element$__$pos: "__$pos", get$_script_view_element$__$script: "__$script", get$_script_view_element$__$showCoverage: "__$showCoverage", get$_service_error_view_element$__$error: "__$error", get$_service_exception_view_element$__$exception: "__$exception", get$_service_object_view_element$__$object: "__$object", get$_service_ref_element$__$internal: "__$internal", get$_service_ref_element$__$ref: "__$ref", get$_sliding_checkbox_element$__$checked: "__$checked", get$_sliding_checkbox_element$__$checkedText: "__$checkedText", get$_sliding_checkbox_element$__$uncheckedText: "__$uncheckedText", get$_stack_frame_element$__$frame: "__$frame", get$_stack_trace_element$__$trace: "__$trace", get$_updateTimer: "_updateTimer", get$_vm_view_element$__$error: "__$error", get$_vm_view_element$__$vm: "__$vm", get$address: "address", get$addressTicks: "addressTicks", get$callees: "callees", get$callers: "callers", get$chart: "chart", get$children: "children", get$classes: "classes", get$columns: "columns", get$deoptId: "deoptId", get$depth: "depth", get$descriptors: "descriptors", get$displayThreshold: "displayThreshold", get$endAddress: "endAddress", get$exclusiveTicks: "exclusiveTicks", get$functions: "functions", get$hits: "hits", get$human: "human", get$imports: "imports", get$inclusiveTicks: "inclusiveTicks", get$index: "index", get$instructions: "instructions", get$kind: "kind", get$line: "line", get$lines: "lines", get$locationManager: "locationManager", get$machine: "machine", get$map_0: "map_0", get$node: "node", get$profileTrieRoot: "profileTrieRoot", get$root: "root", get$rows: "rows", get$scripts: "scripts", get$startAddress: "startAddress", get$startPage_1: "startPage_1", get$tagProfileChart: "tagProfileChart", get$text: "text", get$this_0: "this_0", get$this_1: "this_1", get$timers: "timers", get$tipExclusive: "tipExclusive", get$tipKind: "tipKind", get$tipParent: "tipParent", get$tipTicks: "tipTicks", get$tipTime: "tipTime", get$tokenPos: "tokenPos", get$tree: "tree", get$tryIndex: "tryIndex", get$value: "value", get$variables: "variables", get$vm: "vm"};
init.mangledGlobalNames = {CollapsibleContentElement__closeIconClass: "_closeIconClass", CollapsibleContentElement__openIconClass: "_openIconClass", HeapMapElement__PAGE_SEPARATION_HEIGHT: "_PAGE_SEPARATION_HEIGHT", HeapMapElement__freeColor: "_freeColor", HeapMapElement__pageSeparationColor: "_pageSeparationColor", HeapProfileElement_ACCUMULATED: "ACCUMULATED", HeapProfileElement_ACCUMULATED_SIZE: "ACCUMULATED_SIZE", HeapProfileElement_ALLOCATED_BEFORE_GC: "ALLOCATED_BEFORE_GC", HeapProfileElement_ALLOCATED_BEFORE_GC_SIZE: "ALLOCATED_BEFORE_GC_SIZE", HeapProfileElement_ALLOCATED_SINCE_GC: "ALLOCATED_SINCE_GC", HeapProfileElement_ALLOCATED_SINCE_GC_SIZE: "ALLOCATED_SINCE_GC_SIZE", HeapProfileElement_LIVE_AFTER_GC: "LIVE_AFTER_GC", HeapProfileElement_LIVE_AFTER_GC_SIZE: "LIVE_AFTER_GC_SIZE", IsolateProfileElement_MICROSECONDS_PER_SECOND: "MICROSECONDS_PER_SECOND", ScriptInsetElement_hitStyleExecuted: "hitStyleExecuted", ScriptInsetElement_hitStyleNone: "hitStyleNone", ScriptInsetElement_hitStyleNotExecuted: "hitStyleNotExecuted"};
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "^") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0) descriptor[previousProperty].$reflectable = flag;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              var flag = element[prop];
              if (flag > 0) element[previousProp].$reflectable = flag;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex =  3 * optionalParameterCount + 2 * requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;

    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      f.getterStub = true;
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted) init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName) mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  if (!init.interceptedNames) init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code>"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: [function(object) {
    return void 0;
  }, "call$1", "getInterceptor$closure", 2, 0, null, 6, []],
  makeDispatchRecord: [function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  }, "call$4", "makeDispatchRecord$closure", 8, 0, null, 7, [], 8, [], 9, [], 10, []],
  getNativeInterceptor: [function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  }, "call$1", "getNativeInterceptor$closure", 2, 0, null, 6, []],
  findIndexForNativeSubclassType: [function(type) {
    var t1, map, t2, i;
    t1 = $.mapTypeToInterceptor;
    if (t1 == null)
      return;
    map = t1;
    for (t1 = map.length, t2 = J.getInterceptor(type), i = 0; i + 1 < t1; i += 3) {
      if (i >= t1)
        return H.ioore(map, i);
      if (t2.$eq(type, map[i]))
        return i;
    }
    return;
  }, "call$1", "findIndexForNativeSubclassType$closure", 2, 0, null, 11, []],
  findInterceptorConstructorForType: [function(type) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 1;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1];
  }, "call$1", "findInterceptorConstructorForType$closure", 2, 0, null, 11, []],
  findConstructorForNativeSubclassType: [function(type, $name) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 2;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1][$name];
  }, "call$2", "findConstructorForNativeSubclassType$closure", 4, 0, null, 11, [], 12, []],
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    },
    "%": "DOMImplementation|Navigator|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "^": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_EsU;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Null/Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_eZO;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    get$runtimeType: function(_) {
      return C.Type_XXD;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "List/Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(new P.RangeError("value " + index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      if (index < 0 || index > receiver.length)
        throw H.wrapException(new P.RangeError("value " + index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      H.IterableMixinWorkaround_insertAllList(receiver, index, iterable);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, f), [null]);
    },
    expand$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(receiver, f), [null, null]);
    }, "call$1", "get$expand", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__Iterable__E", ret: P.Iterable, args: [{func: "Iterable__E", ret: P.Iterable, args: [E]}]};
      }, this.$receiver, "JSArray");
    }, 127, []],
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E", ret: P.Iterable, args: [{func: "dynamic__E", args: [E]}]};
      }, this.$receiver, "JSArray");
    }, 127, []],
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(new P.ArgumentError(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(new P.ArgumentError(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(new P.StateError("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    removeRange$2: function(receiver, start, end) {
      var receiverLength, t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      receiverLength = receiver.length;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, receiverLength))
        throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, receiverLength))
        throw H.wrapException(P.RangeError$range(end, start, receiverLength));
      if (typeof end !== "number")
        return H.iae(end);
      H.Lists_copy(receiver, end, receiver, start, receiverLength - end);
      if (typeof start !== "number")
        return H.iae(start);
      this.set$length(receiver, receiverLength - (end - start));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1: function(receiver, f) {
      return H.IterableMixinWorkaround_any(receiver, f);
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(new P.ArgumentError(newLength));
      if (newLength < 0)
        throw H.wrapException(new P.RangeError("value " + H.S(newLength)));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSMutableArray: {
    "^": "JSArray;",
    $isJSMutableArray: true
  },
  JSFixedArray: {
    "^": "JSMutableArray;"
  },
  JSExtendableArray: {
    "^": "JSMutableArray;",
    $isJSExtendableArray: true
  },
  JSNumber: {
    "^": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$(fractionDigits));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result;
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(new P.ArgumentError(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "int/JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_SnA;
    },
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "^": "double/JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_qq1;
    },
    $isdouble: true,
    $isnum: true
  },
  JSPositiveInt: {
    "^": "JSInt;"
  },
  JSUInt32: {
    "^": "JSPositiveInt;"
  },
  JSUInt31: {
    "^": "JSUInt32;"
  },
  JSString: {
    "^": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    allMatches$1: function(receiver, str) {
      return H.allMatchesInStringUnchecked(receiver, str);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i, t3;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (t3 < 0)
          H.throwExpression(P.RangeError$value(t3));
        if (t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        t3 = string.charCodeAt(t3);
        if (i >= t1)
          H.throwExpression(P.RangeError$value(i));
        if (t3 !== receiver.charCodeAt(i))
          return;
      }
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, match, t2, i;
      if (pattern == null)
        H.throwExpression(new P.ArgumentError(null));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      t1 = J.getInterceptor(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      start = receiver.length;
      if (typeof pattern === "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (other == null)
        H.throwExpression(new P.ArgumentError(null));
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_Ejg;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: [function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, "call$1", "JSString__isWhitespace$closure", 2, 0, null, 13, []], JSString__skipLeadingWhitespace: [function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(new P.RangeError("value " + index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, "call$2", "JSString__skipLeadingWhitespace$closure", 4, 0, null, 14, [], 15, []], JSString__skipTrailingWhitespace: [function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(new P.RangeError("value " + index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }, "call$2", "JSString__skipTrailingWhitespace$closure", 4, 0, null, 14, [], 15, []]}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: [function(isolate, $function) {
    var result = isolate.eval$1(0, $function);
    init.globalState.topEventLoop.run$0();
    return result;
  }, "call$2", "_callInIsolate$closure", 4, 0, null, 16, [], 17, []],
  leaveJsAsync: [function() {
    var t1 = init.globalState.topEventLoop;
    t1._activeJsAsyncCount = t1._activeJsAsyncCount - 1;
  }, "call$0", "leaveJsAsync$closure", 0, 0, null],
  startRootIsolate: [function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(new P.ArgumentError("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState;
    t3 = t2.nextIsolateId;
    t2.nextIsolateId = t3 + 1;
    t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t3, t2, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(0, new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(0, new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(0, entry);
    }
    init.globalState.topEventLoop.run$0();
  }, "call$2", "startRootIsolate$closure", 4, 0, null, 18, [], 19, []],
  IsolateNatives_computeThisScript: [function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  }, "call$0", "IsolateNatives_computeThisScript$closure", 0, 0, null],
  IsolateNatives_computeThisScriptFromTrace: [function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  }, "call$0", "IsolateNatives_computeThisScriptFromTrace$closure", 0, 0, null],
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, uri, t5, t6, worker, t7, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t2, t1, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t6 = t1.$index(msg, "startPaused");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t7 = init.globalState;
        workerId = t7.nextManagerId;
        t7.nextManagerId = workerId + 1;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, workerId);
        init.globalState.managers.$indexSet(0, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "startPaused", t6, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 20, [], 21, []],
  IsolateNatives__log: [function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  }, "call$1", "IsolateNatives__log$closure", 2, 0, null, 22, []],
  IsolateNatives__startIsolate: [function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  }, "call$6", "IsolateNatives__startIsolate$closure", 12, 0, null, 23, [], 19, [], 24, [], 25, [], 26, [], 27, []],
  _serializeMessage: [function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  }, "call$1", "_serializeMessage$closure", 2, 0, null, 24, []],
  _deserializeMessage: [function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  }, "call$1", "_deserializeMessage$closure", 2, 0, null, 24, []],
  _MessageTraverser_isPrimitive: [function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  }, "call$1", "_MessageTraverser_isPrimitive$closure", 2, 0, null, 28, []],
  _Deserializer_isPrimitive: [function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  }, "call$1", "_Deserializer_isPrimitive$closure", 2, 0, null, 28, []],
  startRootIsolate_closure: {
    "^": "Closure:114;box_0,entry_1",
    call$0: [function() {
      this.entry_1.call$1(this.box_0.args_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  startRootIsolate_closure0: {
    "^": "Closure:114;box_0,entry_2",
    call$0: [function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates<,mainManager,managers,entry<",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused<,delayedEvents<,pauseTokens,doneHandlers,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          t2._modificationCount = t2._modificationCount + 1;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      if (J.$eq(pingType, 2))
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(this, new H._IsolateContext_handlePing_closure(responsePort), "ping"));
      else
        J.send$1$x(responsePort, null);
    },
    eval$1: function(_, code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        default:
          P.print("UNKNOWN MESSAGE: " + H.S(message));
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this._shutdown$0();
    },
    _shutdown$0: function() {
      init.globalState.isolates.remove$1(0, this.id);
      var t1 = this.doneHandlers;
      if (t1 != null)
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
    },
    $is_IsolateContext: true
  },
  _IsolateContext_handlePing_closure: {
    "^": "Closure:114;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1, t2, t3, t4, result;
      t1 = this.events;
      t2 = t1._head;
      if (t2 === t1._tail)
        return;
      t1._modificationCount = t1._modificationCount + 1;
      t3 = t1._table;
      t4 = t3.length;
      if (t2 >= t4)
        return H.ioore(t3, t2);
      result = t3[t2];
      t3[t2] = null;
      t1._head = (t2 + 1 & t4 - 1) >>> 0;
      return result;
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:125;this_0",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _IsolateEvent: {
    "^": "Object;isolate*,fn,message*",
    process$0: function() {
      if (this.isolate.get$isPaused()) {
        this.isolate.get$delayedEvents().push(this);
        return;
      }
      J.eval$1$x(this.isolate, this.fn);
    },
    $is_IsolateEvent: true
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:114;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:125;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: [function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return J.get$_id$x(this._receivePort);
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:114;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        J.__isolate_helper$_add$1$x(t1, this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id>,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(_, dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    $isRawReceivePortImpl: true,
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, J.get$_id$x(x._receivePort)];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + H.S(x));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, t2, i, t3;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      if (typeof len !== "number")
        return H.iae(len);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (t2 = copy.length, i = 0; i < len; ++i) {
        t3 = this._dispatch$1(t1.$index(list, i));
        if (i >= t2)
          return H.ioore(copy, i);
        copy[i] = t3;
      }
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:296;box_0,this_1",
    call$2: [function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }, "call$2", null, 4, 0, null, 48, [], 295, [], "call"],
    $isFunction: true
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, id;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, id;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, map, id);
      return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if ($.get$globalThis().setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        if (this._once)
          $.get$globalThis().clearTimeout(this._handle);
        else
          $.get$globalThis().clearInterval(this._handle);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2._activeJsAsyncCount = t2._activeJsAsyncCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:125;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:125;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  CapabilityImpl: {
    "^": "Object;_id>",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: [function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  }, "call$2", "isJsIndexable$closure", 4, 0, null, 6, [], 29, []],
  S: [function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  }, "call$1", "S$closure", 2, 0, null, 30, []],
  throwInvalidReflectionError: [function(memberName) {
    throw H.wrapException(P.UnsupportedError$("Can't use '" + H.S(memberName) + "' in reflection because it is not included in a @MirrorsUsed annotation."));
  }, "call$1", "throwInvalidReflectionError$closure", 2, 0, null, 31, []],
  Primitives_objectHashCode: [function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  }, "call$1", "Primitives_objectHashCode$closure", 2, 0, null, 6, []],
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 32, 14, []],
  Primitives_parseInt: [function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(new P.ArgumentError(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (typeof radix !== "number" || Math.floor(radix) !== radix)
        throw H.wrapException(new P.ArgumentError("Radix is not an integer"));
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  }, "call$3", "Primitives_parseInt$closure", 6, 0, null, 33, [], 34, [], 35, []],
  Primitives_parseDouble: [function(source, handleError) {
    var result, trimmed;
    if (typeof source !== "string")
      H.throwExpression(new P.ArgumentError(source));
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  }, "call$2", "Primitives_parseDouble$closure", 4, 0, null, 33, [], 35, []],
  Primitives_objectTypeName: [function(object) {
    var $name, decompiled, t1;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    t1 = J.getInterceptor$s($name);
    if (t1.codeUnitAt$1($name, 0) === 36)
      $name = t1.substring$1($name, 1);
    t1 = H.getRuntimeTypeInfo(object);
    return H.S($name) + H.joinArguments(t1, 0, null);
  }, "call$1", "Primitives_objectTypeName$closure", 2, 0, null, 6, []],
  Primitives_objectToString: [function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  }, "call$1", "Primitives_objectToString$closure", 2, 0, null, 6, []],
  Primitives__fromCharCodeApply: [function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  }, "call$1", "Primitives__fromCharCodeApply$closure", 2, 0, null, 36, []],
  Primitives_stringFromCodePoints: [function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    t1 = new H.ListIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  }, "call$1", "Primitives_stringFromCodePoints$closure", 2, 0, null, 37, []],
  Primitives_stringFromCharCodes: [function(charCodes) {
    var t1, i;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(charCodes, charCodes.length, 0, null), [H.getTypeArgumentByIndex(charCodes, 0)]); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  }, "call$1", "Primitives_stringFromCharCodes$closure", 2, 0, null, 38, []],
  Primitives_valueFromDecomposedDate: [function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    var jsMonth, value, t1, date;
    if (typeof years !== "number" || Math.floor(years) !== years)
      H.throwExpression(new P.ArgumentError(years));
    if (typeof month !== "number" || Math.floor(month) !== month)
      H.throwExpression(new P.ArgumentError(month));
    if (typeof day !== "number" || Math.floor(day) !== day)
      H.throwExpression(new P.ArgumentError(day));
    if (typeof hours !== "number" || Math.floor(hours) !== hours)
      H.throwExpression(new P.ArgumentError(hours));
    if (typeof minutes !== "number" || Math.floor(minutes) !== minutes)
      H.throwExpression(new P.ArgumentError(minutes));
    if (typeof seconds !== "number" || Math.floor(seconds) !== seconds)
      H.throwExpression(new P.ArgumentError(seconds));
    jsMonth = J.$sub$n(month, 1);
    value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(null));
    t1 = J.getInterceptor$n(years);
    if (t1.$le(years, 0) || t1.$lt(years, 100)) {
      date = new Date(value);
      if (isUtc)
        date.setUTCFullYear(years);
      else
        date.setFullYear(years);
      return date.valueOf();
    }
    return value;
  }, "call$8", "Primitives_valueFromDecomposedDate$closure", 16, 0, null, 39, [], 40, [], 41, [], 42, [], 43, [], 44, [], 45, [], 46, []],
  Primitives_lazyAsJsDate: [function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  }, "call$1", "Primitives_lazyAsJsDate$closure", 2, 0, null, 47, []],
  Primitives_getProperty: [function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  }, "call$2", "Primitives_getProperty$closure", 4, 0, null, 6, [], 48, []],
  Primitives_setProperty: [function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  }, "call$3", "Primitives_setProperty$closure", 6, 0, null, 6, [], 48, [], 30, []],
  Primitives_functionNoSuchMethod: [function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t1.argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1.argumentCount_0 + t1.names_1, 0, $arguments, namedArgumentList, null));
  }, "call$3", "Primitives_functionNoSuchMethod$closure", 6, 0, null, 17, [], 49, [], 50, []],
  Primitives_applyFunction: [function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    argumentCount = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  }, "call$3", "Primitives_applyFunction$closure", 6, 0, null, 17, [], 49, [], 50, []],
  Primitives_getConstructorOrInterceptorToken: [function(className) {
    if (className == "String")
      return C.C_JSString;
    if (className == "int")
      return C.C_JSInt;
    if (className == "double")
      return C.C_JSDouble;
    if (className == "num")
      return C.C_JSNumber;
    if (className == "bool")
      return C.C_JSBool;
    if (className == "List")
      return C.C_JSArray;
    if (className == "Null")
      return C.C_JSNull;
    return init.allClasses[className];
  }, "call$1", "Primitives_getConstructorOrInterceptorToken$closure", 2, 0, null, 51, []],
  Primitives_isInterceptorToken: [function(object) {
    return object === C.C_JSString || object === C.C_JSInt || object === C.C_JSDouble || object === C.C_JSNumber || object === C.C_JSBool || object === C.C_JSArray || object === C.C_JSNull;
  }, "call$1", "Primitives_isInterceptorToken$closure", 2, 0, null, 6, []],
  JsCache_allocate: [function() {
    var result = {x:0};
    delete result.x;
    return result;
  }, "call$0", "JsCache_allocate$closure", 0, 0, null],
  iae: [function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  }, "call$1", "iae$closure", 2, 0, null, 52, []],
  ioore: [function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  }, "call$2", "ioore$closure", 4, 0, null, 47, [], 15, []],
  wrapException: [function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  }, "call$1", "wrapException$closure", 2, 0, null, 53, []],
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: [function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  }, "call$1", "throwExpression$closure", 2, 0, null, 53, []],
  unwrapException: [function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  }, "call$1", "unwrapException$closure", 2, 0, null, 53, []],
  objectHashCode: [function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  }, "call$1", "objectHashCode$closure", 2, 0, null, 6, []],
  fillLiteralMap: [function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  }, "call$2", "fillLiteralMap$closure", 4, 0, null, 55, [], 56, []],
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 57, [], 16, [], 58, [], 59, [], 60, [], 61, [], 62, []],
  convertDartClosureToJS: [function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  }, "call$2", "convertDartClosureToJS$closure", 4, 0, null, 57, [], 63, []],
  Closure_fromTearOff: [function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  }, "call$6", "Closure_fromTearOff$closure", 12, 0, null, 47, [], 64, [], 65, [], 66, [], 67, [], 68, []],
  Closure_cspForwardCall: [function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n,S){return function(){return S(this)[n]()}}(stubName,getSelf);
      case 1:
        return function(n,S){return function(a){return S(this)[n](a)}}(stubName,getSelf);
      case 2:
        return function(n,S){return function(a,b){return S(this)[n](a,b)}}(stubName,getSelf);
      case 3:
        return function(n,S){return function(a,b,c){return S(this)[n](a,b,c)}}(stubName,getSelf);
      case 4:
        return function(n,S){return function(a,b,c,d){return S(this)[n](a,b,c,d)}}(stubName,getSelf);
      case 5:
        return function(n,S){return function(a,b,c,d,e){return S(this)[n](a,b,c,d,e)}}(stubName,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  }, "call$4", "Closure_cspForwardCall$closure", 8, 0, null, 63, [], 69, [], 70, [], 17, []],
  Closure_forwardCallTo: [function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  }, "call$3", "Closure_forwardCallTo$closure", 6, 0, null, 47, [], 17, [], 71, []],
  Closure_cspForwardInterceptedCall: [function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  }, "call$4", "Closure_cspForwardInterceptedCall$closure", 8, 0, null, 63, [], 69, [], 12, [], 17, []],
  Closure_forwardInterceptedCallTo: [function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  }, "call$2", "Closure_forwardInterceptedCallTo$closure", 4, 0, null, 47, [], 17, []],
  closureFromTearOff: [function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  }, "call$6", "closureFromTearOff$closure", 12, 0, null, 47, [], 64, [], 65, [], 66, [], 67, [], 12, []],
  propertyTypeCastError: [function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  }, "call$2", "propertyTypeCastError$closure", 4, 0, null, 30, [], 73, []],
  interceptedTypeCast: [function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  }, "call$2", "interceptedTypeCast$closure", 4, 0, null, 30, [], 73, []],
  throwCyclicInit: [function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  }, "call$1", "throwCyclicInit$closure", 2, 0, null, 74, []],
  buildFunctionType: [function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  }, "call$3", "buildFunctionType$closure", 6, 0, null, 76, [], 77, [], 78, []],
  buildInterfaceType: [function(rti, typeArguments) {
    var $name = rti.name;
    if (typeArguments == null || typeArguments.length === 0)
      return new H.RuntimeTypePlain($name);
    return new H.RuntimeTypeGeneric($name, typeArguments, null);
  }, "call$2", "buildInterfaceType$closure", 4, 0, null, 79, [], 80, []],
  getDynamicRuntimeType: [function() {
    return C.C_DynamicRuntimeType;
  }, "call$0", "getDynamicRuntimeType$closure", 0, 0, null],
  createRuntimeType: [function($name) {
    return new H.TypeImpl($name, null);
  }, "call$1", "createRuntimeType$closure", 2, 0, null, 12, []],
  setRuntimeTypeInfo: [function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  }, "call$2", "setRuntimeTypeInfo$closure", 4, 0, null, 81, [], 82, []],
  getRuntimeTypeInfo: [function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  }, "call$1", "getRuntimeTypeInfo$closure", 2, 0, null, 81, []],
  getRuntimeTypeArguments: [function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  }, "call$2", "getRuntimeTypeArguments$closure", 4, 0, null, 81, [], 83, []],
  getRuntimeTypeArgument: [function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  }, "call$3", "getRuntimeTypeArgument$closure", 6, 0, null, 81, [], 83, [], 15, []],
  getTypeArgumentByIndex: [function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  }, "call$2", "getTypeArgumentByIndex$closure", 4, 0, null, 81, [], 15, []],
  runtimeTypeToString: [function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      if (onTypeVariable == null)
        return C.JSInt_methods.toString$0(type);
      else
        return onTypeVariable.call$1(type);
    else
      return;
  }, "call$2$onTypeVariable", "runtimeTypeToString$closure", 2, 3, null, 84, 11, [], 85, []],
  joinArguments: [function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  }, "call$3$onTypeVariable", "joinArguments$closure", 4, 3, null, 84, 86, [], 87, [], 85, []],
  getRuntimeTypeString: [function(object) {
    var className = typeof object === "object" && object !== null && object.constructor === Array ? "List" : J.getInterceptor(object).constructor.builtin$cls;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  }, "call$1", "getRuntimeTypeString$closure", 2, 0, null, 6, []],
  substitute: [function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  }, "call$2", "substitute$closure", 4, 0, null, 88, [], 89, []],
  checkSubtype: [function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  }, "call$4", "checkSubtype$closure", 8, 0, null, 6, [], 90, [], 91, [], 92, []],
  areSubtypes: [function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  }, "call$2", "areSubtypes$closure", 4, 0, null, 93, [], 94, []],
  computeSignature: [function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  }, "call$3", "computeSignature$closure", 6, 0, null, 95, [], 96, [], 97, []],
  checkSubtypeOfRuntimeType: [function(o, t) {
    var rti, type;
    if (o == null)
      return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
    if (t == null)
      return true;
    rti = H.getRuntimeTypeInfo(o);
    o = J.getInterceptor(o);
    if (rti != null) {
      type = rti.slice();
      type.splice(0, 0, o);
    } else
      type = o;
    return H.isSubtype(type, t);
  }, "call$2", "checkSubtypeOfRuntimeType$closure", 4, 0, null, 98, [], 94, []],
  isSubtype: [function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  }, "call$2", "isSubtype$closure", 4, 0, null, 93, [], 94, []],
  areAssignable: [function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  }, "call$3", "areAssignable$closure", 6, 0, null, 93, [], 94, [], 99, []],
  areAssignableMaps: [function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  }, "call$2", "areAssignableMaps$closure", 4, 0, null, 93, [], 94, []],
  isFunctionSubtype: [function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  }, "call$2", "isFunctionSubtype$closure", 4, 0, null, 93, [], 94, []],
  invokeOn: [function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  }, "call$3", "invokeOn$closure", 6, 0, null, 17, [], 47, [], 89, []],
  toStringForNativeObject: [function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  }, "call$1", "toStringForNativeObject$closure", 2, 0, null, 100, []],
  hashCodeForNativeObject: [function(object) {
    return H.Primitives_objectHashCode(object);
  }, "call$1", "hashCodeForNativeObject$closure", 2, 0, null, 6, []],
  defineProperty: [function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  }, "call$3", "defineProperty$closure", 6, 0, null, 100, [], 73, [], 30, []],
  lookupAndCacheInterceptor: [function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  }, "call$1", "lookupAndCacheInterceptor$closure", 2, 0, null, 100, []],
  patchInteriorProto: [function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  }, "call$2", "patchInteriorProto$closure", 4, 0, null, 100, [], 7, []],
  makeLeafDispatchRecord: [function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  }, "call$1", "makeLeafDispatchRecord$closure", 2, 0, null, 7, []],
  makeDefaultDispatchRecord: [function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  }, "call$3", "makeDefaultDispatchRecord$closure", 6, 0, null, 101, [], 102, [], 8, []],
  initNativeDispatch: [function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  }, "call$0", "initNativeDispatch$closure", 0, 0, null],
  initNativeDispatchContinue: [function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  }, "call$0", "initNativeDispatchContinue$closure", 0, 0, null],
  initHooks: [function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  }, "call$0", "initHooks$closure", 0, 0, null],
  applyHooksTransformer: [function(transformer, hooks) {
    return transformer(hooks) || hooks;
  }, "call$2", "applyHooksTransformer$closure", 4, 0, null, 103, [], 104, []],
  allMatchesInStringUnchecked: [function(needle, haystack) {
    var result, $length, patternLength, startIndex, position, endIndex;
    result = H.setRuntimeTypeInfo([], [P.Match]);
    $length = haystack.length;
    patternLength = needle.length;
    for (startIndex = 0; true;) {
      position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  }, "call$2", "allMatchesInStringUnchecked$closure", 4, 0, null, 109, [], 110, []],
  stringContainsUnchecked: [function(receiver, other, startIndex) {
    var t1, t2;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor(other);
      if (!!t1.$isJSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        t2 = other._nativeRegExp;
        return t2.test(t1);
      } else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  }, "call$3", "stringContainsUnchecked$closure", 6, 0, null, 47, [], 111, [], 87, []],
  stringReplaceAllUnchecked: [function(receiver, from, to) {
    var result, $length, i, t1, nativeRegexp;
    if (typeof from === "string")
      if (from === "")
        if (receiver === "")
          return to;
        else {
          result = P.StringBuffer$("");
          $length = receiver.length;
          result.write$1(to);
          for (i = 0; i < $length; ++i) {
            t1 = receiver[i];
            t1 = result._contents + t1;
            result._contents = t1;
            result._contents = t1 + to;
          }
          return result._contents;
        }
      else
        return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
    else if (!!J.getInterceptor(from).$isJSSyntaxRegExp) {
      nativeRegexp = from.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return receiver.replace(nativeRegexp, to.replace("$", "$$$$"));
    } else {
      if (from == null)
        H.throwExpression(new P.ArgumentError(null));
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    }
  }, "call$3", "stringReplaceAllUnchecked$closure", 6, 0, null, 47, [], 112, [], 113, []],
  NoSideEffects: {
    "^": "Object;"
  },
  NoThrows: {
    "^": "Object;"
  },
  NoInline: {
    "^": "Object;"
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    remove$1: function(_, key) {
      return this._throwUnmodifiable$0();
    },
    clear$0: function(_) {
      return this._throwUnmodifiable$0();
    },
    addAll$1: function(_, other) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,__js_helper$_jsObject,__js_helper$_keys",
    containsValue$1: function(needle) {
      return this.get$values(this).any$1(0, new H.ConstantStringMap_containsValue_closure(this, needle));
    },
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this.__js_helper$_jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this.__js_helper$_jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this.__js_helper$_keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_containsValue_closure: {
    "^": "Closure;this_0,needle_1",
    call$1: [function(value) {
      return J.$eq(value, this.needle_1);
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__V", args: [V]};
      }, this.this_0, "ConstantStringMap");
    }
  },
  ConstantStringMap_values_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(key) {
      return this.this_0._fetch$1(key);
    }, "call$1", null, 2, 0, null, 48, [], "call"],
    $isFunction: true
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map.__js_helper$_keys);
    }
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      var $name, unmangledName, t1;
      $name = this.__js_helper$_memberName;
      if (!!J.getInterceptor($name).$isSymbol)
        return $name;
      unmangledName = $.get$mangledNames().$index(0, $name);
      if (unmangledName != null) {
        t1 = unmangledName.split(":");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        $name = t1[0];
      }
      t1 = new H.Symbol0($name);
      this.__js_helper$_memberName = t1;
      return t1;
    },
    get$isGetter: function() {
      return this._kind === 1;
    },
    get$isSetter: function() {
      return this._kind === 2;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, null]);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, null]);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    },
    _getCachedInvocation$1: function(object) {
      var interceptor, $name, isIntercepted, interceptor0, receiver, method, baseName, isCatchAll, t1, isReflectable;
      interceptor = J.getInterceptor(object);
      $name = this._internalName;
      isIntercepted = Object.prototype.hasOwnProperty.call(init.interceptedNames, $name) || $.interceptedNames.indexOf($name) !== -1;
      if (isIntercepted) {
        interceptor0 = object === interceptor ? null : interceptor;
        receiver = interceptor;
        interceptor = interceptor0;
      } else {
        receiver = object;
        interceptor = null;
      }
      method = receiver[$name];
      if (typeof method != "function") {
        baseName = J.get$_name$x(this.get$memberName());
        method = receiver[baseName + "*"];
        if (method == null) {
          interceptor = J.getInterceptor(object);
          method = interceptor[baseName + "*"];
          if (method != null)
            isIntercepted = true;
          else
            interceptor = null;
        }
        isCatchAll = true;
      } else
        isCatchAll = false;
      if (typeof method == "function") {
        if (!("$reflectable" in method)) {
          t1 = J.getInterceptor(object);
          isReflectable = !!t1.$isBoundClosure || !!t1.$isTearOffClosure;
        } else
          isReflectable = true;
        if (!isReflectable)
          H.throwInvalidReflectionError(J.get$_name$x(this.get$memberName()));
        if (isCatchAll)
          return new H.CachedCatchAllInvocation(H.ReflectionInfo_ReflectionInfo(method), $name, method, isIntercepted, interceptor);
        else
          return new H.CachedInvocation($name, method, isIntercepted, interceptor);
      } else
        return new H.CachedNoSuchMethodInvocation(interceptor);
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  CachedInvocation: {
    "^": "Object;mangledName<,jsFunction,isIntercepted<,cachedInterceptor",
    get$isNoSuchMethod: function() {
      return false;
    },
    invokeOn$2: function(victim, $arguments) {
      var receiver, arguments0;
      if (!this.isIntercepted) {
        if (typeof $arguments !== "object" || $arguments === null || $arguments.constructor !== Array)
          $arguments = P.List_List$from($arguments, true, null);
        receiver = victim;
      } else {
        arguments0 = [victim];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        receiver = this.cachedInterceptor;
        receiver = receiver != null ? receiver : victim;
        $arguments = arguments0;
      }
      return this.jsFunction.apply(receiver, $arguments);
    }
  },
  CachedCatchAllInvocation: {
    "^": "CachedInvocation;info,mangledName,jsFunction,isIntercepted,cachedInterceptor",
    info$1: function(arg0) {
      return this.info.call$1(arg0);
    },
    invokeOn$2: function(victim, $arguments) {
      var t1, t2, fullParameterCount, providedArgumentCount, receiver, arguments0, i;
      t1 = this.info;
      t2 = t1.requiredParameterCount;
      fullParameterCount = t2 + t1.optionalParameterCount;
      if (!this.isIntercepted) {
        if (typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array) {
          providedArgumentCount = $arguments.length;
          if (providedArgumentCount < fullParameterCount)
            $arguments = P.List_List$from($arguments, true, null);
        } else {
          $arguments = P.List_List$from($arguments, true, null);
          providedArgumentCount = $arguments.length;
        }
        receiver = victim;
      } else {
        arguments0 = [victim];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        receiver = this.cachedInterceptor;
        receiver = receiver != null ? receiver : victim;
        providedArgumentCount = arguments0.length - 1;
        $arguments = arguments0;
      }
      if (t1.areOptionalParametersNamed && providedArgumentCount > t2)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + $arguments.length + " arguments."));
      else if (providedArgumentCount < t2)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too few)."));
      else if (providedArgumentCount > fullParameterCount)
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invocation of unstubbed method '" + t1.get$reflectionName() + "' with " + providedArgumentCount + " arguments (too many)."));
      for (i = providedArgumentCount; i < fullParameterCount; ++i)
        C.JSArray_methods.add$1($arguments, init.metadata[t1.defaultValue$1(0, i)]);
      return this.jsFunction.apply(receiver, $arguments);
    }
  },
  CachedNoSuchMethodInvocation: {
    "^": "Object;interceptor",
    get$isNoSuchMethod: function() {
      return true;
    },
    invokeOn$2: function(victim, invocation) {
      var receiver = this.interceptor;
      return J.noSuchMethod$1(receiver == null ? victim : receiver, invocation);
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[2 * parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (J.$lt$n(parameter, t1))
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, J.JSInt]);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys();
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        H.IterableMixinWorkaround_sortList(t2, null);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    computeFunctionRti$1: function(jsConstructor) {
      var t1, fakeInstance;
      t1 = this.functionType;
      if (typeof t1 == "number")
        return init.metadata[t1];
      else if (typeof t1 == "function") {
        fakeInstance = new jsConstructor();
        H.setRuntimeTypeInfo(fakeInstance, fakeInstance["<>"]);
        return t1.apply({$receiver:fakeInstance});
      } else
        throw H.wrapException(H.RuntimeError$("Unexpected function type"));
    },
    get$reflectionName: function() {
      return this.jsFunction.$reflectionName;
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:32;box_0,this_1,positions_2",
    call$1: [function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0;
      t3 = t2.index_0;
      t2.index_0 = t3 + 1;
      t2 = this.positions_2.$index(0, $name);
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      t1[t3] = t2;
    }, "call$1", null, 2, 0, null, 12, [], "call"],
    $isFunction: true
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:297;box_0,arguments_1,namedArgumentList_2",
    call$2: [function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      t1.argumentCount_0 = t1.argumentCount_0 + 1;
    }, "call$2", null, 4, 0, null, 12, [], 52, [], "call"],
    $isFunction: true
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:297;box_0,defaultArguments_1",
    call$2: [function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    }, "call$2", null, 4, 0, null, 298, [], 30, [], "call"],
    $isFunction: true
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: [function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, "call$1", "TypeErrorDecoder_extractPattern$closure", 2, 0, null, 24, []], TypeErrorDecoder_provokeCallErrorOn: [function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, "call$1", "TypeErrorDecoder_provokeCallErrorOn$closure", 2, 0, null, 54, []], TypeErrorDecoder_provokePropertyErrorOn: [function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }, "call$1", "TypeErrorDecoder_provokePropertyErrorOn$closure", 2, 0, null, 54, []]}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isNoSuchMethodError: true,
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:115;ex_0",
    call$1: [function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }, "call$1", null, 2, 0, null, 168, [], "call"],
    $isFunction: true
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:114;closure_0",
    call$0: [function() {
      return this.closure_0.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  invokeClosure_closure0: {
    "^": "Closure:114;closure_1,arg1_2",
    call$0: [function() {
      return this.closure_1.call$1(this.arg1_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  invokeClosure_closure1: {
    "^": "Closure:114;closure_3,arg1_4,arg2_5",
    call$0: [function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  invokeClosure_closure2: {
    "^": "Closure:114;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: [function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  invokeClosure_closure3: {
    "^": "Closure:114;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: [function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true
  },
  TearOffClosure: {
    "^": "Closure;",
    $isTearOffClosure: true
  },
  BoundClosure: {
    "^": "TearOffClosure;_self<,_target<,_receiver,__js_helper$_name>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: [function(closure) {
        return closure.get$_self();
      }, "call$1", "BoundClosure_selfOf$closure", 2, 0, null, 57, []], BoundClosure_receiverOf: [function(closure) {
        return closure._receiver;
      }, "call$1", "BoundClosure_receiverOf$closure", 2, 0, null, 57, []], BoundClosure_selfFieldName: [function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, "call$0", "BoundClosure_selfFieldName$closure", 0, 0, null], BoundClosure_computeFieldNamed: [function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }, "call$1", "BoundClosure_computeFieldNamed$closure", 2, 0, null, 72, []]}
  },
  Creates: {
    "^": "Object;types"
  },
  Returns: {
    "^": "Object;types"
  },
  JSName: {
    "^": "Object;name>"
  },
  CastErrorImplementation: {
    "^": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: [function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }, "call$1", "RuntimeFunctionType_listToRti$closure", 2, 0, null, 75, []]}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  RuntimeTypePlain: {
    "^": "RuntimeType;name>",
    toRti$0: function() {
      var t1, rti;
      t1 = this.name;
      rti = init.allClasses[t1];
      if (rti == null)
        throw H.wrapException("no type for '" + H.S(t1) + "'");
      return rti;
    },
    toString$0: function(_) {
      return this.name;
    }
  },
  RuntimeTypeGeneric: {
    "^": "RuntimeType;name>,arguments<,rti",
    toRti$0: function() {
      var t1, result;
      t1 = this.rti;
      if (t1 != null)
        return t1;
      t1 = this.name;
      result = [init.allClasses[t1]];
      if (0 >= result.length)
        return H.ioore(result, 0);
      if (result[0] == null)
        throw H.wrapException("no type for '" + H.S(t1) + "<...>'");
      for (t1 = this.arguments, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        result.push(t1._current.toRti$0());
      this.rti = result;
      return result;
    },
    toString$0: function(_) {
      return H.S(this.name) + "<" + J.join$1$ax(this.arguments, ", ") + ">";
    }
  },
  UnimplementedNoSuchMethodError: {
    "^": "Error;_message",
    toString$0: function(_) {
      return "Unsupported operation: " + this._message;
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {UnimplementedNoSuchMethodError$: function(_message) {
        return new H.UnimplementedNoSuchMethodError(_message);
      }}
  },
  TypeImpl: {
    "^": "Object;_typeName<,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true,
    $isType: true
  },
  TypeVariable: {
    "^": "Object;owner<,name>,bound>"
  },
  initHooks_closure: {
    "^": "Closure:115;getTag_0",
    call$1: [function(o) {
      return this.getTag_0(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  initHooks_closure0: {
    "^": "Closure:299;getUnknownTag_1",
    call$2: [function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }, "call$2", null, 4, 0, null, 98, [], 101, [], "call"],
    $isFunction: true
  },
  initHooks_closure1: {
    "^": "Closure:32;prototypeForTag_2",
    call$1: [function(tag) {
      return this.prototypeForTag_2(tag);
    }, "call$1", null, 2, 0, null, 101, [], "call"],
    $isFunction: true
  },
  JSSyntaxRegExp: {
    "^": "Object;_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(t1.source, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    get$_nativeAnchoredVersion: function() {
      var t1 = this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(t1.source + "|()", t1.multiline, !t1.ignoreCase, true);
      this._nativeAnchoredRegExp = t1;
      return t1;
    },
    firstMatch$1: function(str) {
      var m;
      if (typeof str !== "string")
        H.throwExpression(new P.ArgumentError(str));
      m = this._nativeRegExp.exec(str);
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(str) {
      if (typeof str !== "string")
        H.throwExpression(new P.ArgumentError(str));
      return this._nativeRegExp.test(str);
    },
    allMatches$1: function(_, str) {
      return new H._AllMatchesIterable(this, str);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match, t1, t2;
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      t1 = match.length;
      t2 = t1 - 1;
      if (t2 < 0)
        return H.ioore(match, t2);
      if (match[t2] != null)
        return;
      C.JSArray_methods.set$length(match, t2);
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      var t1;
      if (start >= 0) {
        t1 = J.get$length$asx(string);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = start > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
      return this._execAnchored$2(string, start);
    },
    matchAsPrefix$1: function($receiver, string) {
      return this.matchAsPrefix$2($receiver, string, 0);
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    static: {JSSyntaxRegExp_makeNative: [function(pattern, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + pattern + ", " + errorMessage));
      }, "call$4", "JSSyntaxRegExp_makeNative$closure", 8, 0, null, 105, [], 106, [], 107, [], 108, []]}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    $isMatch: true,
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,_string",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, index;
      if (this._string == null)
        return false;
      t1 = this.__js_helper$_current;
      if (t1 != null) {
        t1 = t1._match;
        t2 = t1.index;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        index = t2 + t1;
        if (this.__js_helper$_current._match.index === index)
          ++index;
      } else
        index = 0;
      t1 = this._regExp._execGlobal$2(this._string, index);
      this.__js_helper$_current = t1;
      if (t1 == null) {
        this._string = null;
        return false;
      }
      return true;
    }
  },
  StringMatch: {
    "^": "Object;start,input,pattern",
    $index: function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    },
    $isMatch: true
  }
}],
["action_link_element", "package:observatory/src/elements/action_link.dart", , X, {
  "^": "",
  ActionLinkElement: {
    "^": ["PolymerElement_ChangeNotifier;_action_link_element$__$busy%-300,_action_link_element$__$callback%-84,_action_link_element$__$label%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$busy: [function(receiver) {
      return receiver._action_link_element$__$busy;
    }, null, null, 1, 0, 303, "busy", 304, 305],
    set$busy: [function(receiver, value) {
      receiver._action_link_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, receiver._action_link_element$__$busy, value);
    }, null, null, 3, 0, 306, 30, [], "busy", 304],
    get$callback: [function(receiver) {
      return receiver._action_link_element$__$callback;
    }, null, null, 1, 0, 114, "callback", 304, 307],
    callback$0: function($receiver) {
      return this.get$callback($receiver).call$0();
    },
    callback$1: function($receiver, arg0) {
      return this.get$callback($receiver).call$1(arg0);
    },
    set$callback: [function(receiver, value) {
      receiver._action_link_element$__$callback = this.notifyPropertyChange$3(receiver, C.Symbol_callback, receiver._action_link_element$__$callback, value);
    }, null, null, 3, 0, 115, 30, [], "callback", 304],
    get$label: [function(receiver) {
      return receiver._action_link_element$__$label;
    }, null, null, 1, 0, 308, "label", 304, 307],
    set$label: [function(receiver, value) {
      receiver._action_link_element$__$label = this.notifyPropertyChange$3(receiver, C.Symbol_label, receiver._action_link_element$__$label, value);
    }, null, null, 3, 0, 32, 30, [], "label", 304],
    doAction$3: [function(receiver, a, b, c) {
      var t1 = receiver._action_link_element$__$busy;
      if (t1 === true)
        return;
      if (receiver._action_link_element$__$callback != null) {
        receiver._action_link_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, t1, true);
        this.callback$1(receiver, null).whenComplete$1(new X.ActionLinkElement_doAction_closure(receiver));
      }
    }, "call$3", "get$doAction", 6, 0, 309, 117, [], 196, [], 285, [], "doAction"],
    "@": function() {
      return [C.CustomTag_0];
    },
    static: {ActionLinkElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._action_link_element$__$busy = false;
        receiver._action_link_element$__$callback = null;
        receiver._action_link_element$__$label = "action";
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ActionLinkElement_methods.Element$created$0(receiver);
        C.ActionLinkElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ActionLinkElement$created"]}
  },
  "+ActionLinkElement": [310],
  PolymerElement_ChangeNotifier: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  ActionLinkElement_doAction_closure: {
    "^": "Closure:114;this_0-84",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_action_link_element$__$busy(t1, t2.notifyPropertyChange$3(t1, C.Symbol_busy, t2.get$_action_link_element$__$busy(t1), false));
    }, "call$0", null, 0, 0, 114, "call"],
    $isFunction: true
  },
  "+ ActionLinkElement_doAction_closure": [311]
}],
["app", "package:observatory/app.dart", , G, {
  "^": "",
  GoogleChart__initOnceOnComplete: [function(_) {
    var t1;
    N.Logger_Logger("").info$1("Google Charts API loaded");
    t1 = J.$index$asx(J.$index$asx($.get$context(), "google"), "visualization");
    $.GoogleChart__api = t1;
    return t1;
  }, "call$1", "GoogleChart__initOnceOnComplete$closure", 2, 0, 115, 116, []],
  Utils_formatPercent: [function(a, total) {
    return C.JSNumber_methods.toStringAsFixed$1(100 * J.$div$n(a, total), 2) + "%";
  }, "call$2", "Utils_formatPercent$closure", 4, 0, null, 117, [], 118, []],
  Utils_zeroPad: [function(value, pad) {
    var prefix;
    for (prefix = ""; pad > 1;) {
      --pad;
      if (value < Math.pow(10, pad))
        prefix += "0";
    }
    return prefix + H.S(value);
  }, "call$2", "Utils_zeroPad$closure", 4, 0, null, 30, [], 119, []],
  Utils_formatCommaSeparated: [function(v) {
    var t1, mod, r;
    t1 = J.getInterceptor$n(v);
    if (t1.$lt(v, 1000))
      return t1.toString$0(v);
    mod = t1.$mod(v, 1000);
    v = t1.$tdiv(v, 1000);
    r = G.Utils_zeroPad(mod, 3);
    for (; t1 = J.getInterceptor$n(v), t1.$gt(v, 1000);) {
      r = G.Utils_zeroPad(t1.$mod(v, 1000), 3) + "," + r;
      v = t1.$tdiv(v, 1000);
    }
    return !t1.$eq(v, 0) ? H.S(v) + "," + r : r;
  }, "call$1", "Utils_formatCommaSeparated$closure", 2, 0, 120, 121, []],
  Utils_formatTimePrecise: [function(time) {
    var millis, hours, minutes, seconds;
    if (time == null)
      return "-";
    millis = J.round$0$n(J.$mul$ns(time, 1000));
    hours = C.JSInt_methods._tdivFast$1(millis, 3600000);
    millis = C.JSInt_methods.$mod(millis, 3600000);
    minutes = C.JSInt_methods._tdivFast$1(millis, 60000);
    millis = C.JSInt_methods.$mod(millis, 60000);
    seconds = C.JSInt_methods._tdivFast$1(millis, 1000);
    millis = C.JSInt_methods.$mod(millis, 1000);
    if (hours > 0)
      return G.Utils_zeroPad(hours, 2) + ":" + G.Utils_zeroPad(minutes, 2) + ":" + G.Utils_zeroPad(seconds, 2) + "." + G.Utils_zeroPad(millis, 3);
    else
      return G.Utils_zeroPad(minutes, 2) + ":" + G.Utils_zeroPad(seconds, 2) + "." + G.Utils_zeroPad(millis, 3);
  }, "call$1", "Utils_formatTimePrecise$closure", 2, 0, null, 122, []],
  Utils_formatSize: [function(bytes) {
    var t1 = J.getInterceptor$n(bytes);
    if (t1.$lt(bytes, 1024))
      return H.S(bytes) + "B";
    else if (t1.$lt(bytes, 1048576))
      return "" + C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.$div(bytes, 1024))) + "KB";
    else if (t1.$lt(bytes, 1073741824))
      return "" + C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.$div(bytes, 1048576))) + "MB";
    else if (t1.$lt(bytes, 1099511627776))
      return "" + C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.$div(bytes, 1073741824))) + "GB";
    else
      return "" + C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.$div(bytes, 1099511627776))) + "TB";
  }, "call$1", "Utils_formatSize$closure", 2, 0, 120, 123, []],
  Utils_formatTime: [function(time) {
    var millis, hours, minutes, seconds;
    if (time == null)
      return "-";
    millis = J.round$0$n(J.$mul$ns(time, 1000));
    hours = C.JSInt_methods._tdivFast$1(millis, 3600000);
    millis = C.JSInt_methods.$mod(millis, 3600000);
    minutes = C.JSInt_methods._tdivFast$1(millis, 60000);
    seconds = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(millis, 60000), 1000);
    P.StringBuffer$("");
    if (hours !== 0)
      return "" + hours + "h " + minutes + "m " + seconds + "s";
    if (minutes !== 0)
      return "" + minutes + "m " + seconds + "s";
    return "" + seconds + "s";
  }, "call$1", "Utils_formatTime$closure", 2, 0, null, 122, []],
  ObservatoryApplication: {
    "^": ["ChangeNotifier;locationManager<-312,vm>-313,_app$__$isolate,_app$__$response,_app$__$args,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, null, null, null, null, null],
    get$isolate: [function(_) {
      return this._app$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 305],
    set$isolate: [function(_, value) {
      this._app$__$isolate = F.notifyPropertyChangeHelper(this, C.Symbol_isolate, this._app$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    get$response: [function(_) {
      return this._app$__$response;
    }, null, null, 1, 0, 316, "response", 304, 305],
    set$response: [function(_, value) {
      this._app$__$response = F.notifyPropertyChangeHelper(this, C.Symbol_response, this._app$__$response, value);
    }, null, null, 3, 0, 317, 30, [], "response", 304],
    get$args: [function() {
      return this._app$__$args;
    }, null, null, 1, 0, 308, "args", 304, 305],
    set$args: [function(value) {
      this._app$__$args = F.notifyPropertyChangeHelper(this, C.Symbol_args, this._app$__$args, value);
    }, null, null, 3, 0, 32, 30, [], "args", 304],
    _initOnce$0: function() {
      var t1, t2;
      t1 = this.locationManager;
      t1.set$_app(this);
      t1.init$0();
      t1 = this.vm;
      t2 = t1.get$errors();
      H.setRuntimeTypeInfo(new P._BroadcastStream(t2), [H.getTypeArgumentByIndex(t2, 0)]).listen$1(this.get$_app$_onError());
      t1 = t1.get$exceptions();
      H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$1(this.get$_onException());
    },
    _app$_onError$1: [function(error) {
      this._app$__$response = F.notifyPropertyChangeHelper(this, C.Symbol_response, this._app$__$response, error);
      this.locationManager.clearCurrentHash$0();
    }, "call$1", "get$_app$_onError", 2, 0, 318, 168, []],
    _onException$1: [function(exception) {
      this._app$__$response = F.notifyPropertyChangeHelper(this, C.Symbol_response, this._app$__$response, exception);
      this.locationManager.clearCurrentHash$0();
    }, "call$1", "get$_onException", 2, 0, 319, 320, []],
    ObservatoryApplication$0: function() {
      this._initOnce$0();
    },
    ObservatoryApplication$devtools$0: function() {
      this._initOnce$0();
    }
  },
  DataTable: {
    "^": "Object;_app$_table<",
    get$columns: function() {
      return this._app$_table.callMethod$1("getNumberOfColumns");
    },
    get$rows: function(_) {
      return this._app$_table.callMethod$1("getNumberOfRows");
    },
    addColumn$2: function(type, label) {
      this._app$_table.callMethod$2("addColumn", [type, label]);
    },
    clearRows$0: function() {
      var t1 = this._app$_table;
      t1.callMethod$2("removeRows", [0, t1.callMethod$1("getNumberOfRows")]);
    },
    addRow$1: function(_, row) {
      var t1 = [];
      C.JSArray_methods.addAll$1(t1, J.map$1$ax(row, P._convertToJS$closure()));
      this._app$_table.callMethod$2("addRow", [H.setRuntimeTypeInfo(new P.JsArray(t1), [null])]);
    }
  },
  Chart: {
    "^": "Object;_chart,options",
    draw$1: function(table) {
      var jsOptions = P.JsObject_JsObject$jsify(this.options);
      this._chart.callMethod$2("draw", [table.get$_app$_table(), jsOptions]);
    }
  },
  LocationManager: {
    "^": "ChangeNotifier;_app?,_app$__$currentHash,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$currentHash: [function() {
      return this._app$__$currentHash;
    }, null, null, 1, 0, 308, "currentHash", 304, 305],
    set$currentHash: [function(value) {
      this._app$__$currentHash = F.notifyPropertyChangeHelper(this, C.Symbol_currentHash, this._app$__$currentHash, value);
    }, null, null, 3, 0, 32, 30, [], "currentHash", 304],
    init$0: function() {
      var t1 = C.EventStreamProvider_hashchange.forTarget$1(window);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new G.LocationManager_init_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      if (J.$eq(J.get$hash$x(C.Window_methods.get$location(window)), ""))
        J.set$hash$x(C.Window_methods.get$location(window), "#/vm");
      else
        this.requestCurrentHash$0();
    },
    clearCurrentHash$0: function() {
      J.set$hash$x(C.Window_methods.get$location(window), "");
    },
    requestCurrentHash$0: function() {
      var t1, parts, args;
      t1 = J.get$hash$x(C.Window_methods.get$location(window));
      t1 = F.notifyPropertyChangeHelper(this, C.Symbol_currentHash, this._app$__$currentHash, t1);
      this._app$__$currentHash = t1;
      if (!J.startsWith$1$s(t1, "#/"))
        return;
      parts = J.substring$1$s(this._app$__$currentHash, 2).split("#");
      t1 = parts.length;
      if (0 >= t1)
        return H.ioore(parts, 0);
      args = t1 > 1 ? parts[1] : "";
      if (t1 > 2)
        N.Logger_Logger("").warning$1("Found more than 2 #-characters in " + H.S(this._app$__$currentHash));
      this._app.vm.get$1(J.substring$1$s(this._app$__$currentHash, 2)).then$1(new G.LocationManager_requestCurrentHash_closure(this, args));
    },
    static: {"^": "LocationManager_defaultHash"}
  },
  LocationManager_init_closure: {
    "^": "Closure:115;this_0",
    call$1: [function($event) {
      this.this_0.requestCurrentHash$0();
    }, "call$1", null, 2, 0, null, 321, [], "call"],
    $isFunction: true
  },
  LocationManager_requestCurrentHash_closure: {
    "^": "Closure:115;this_0,args_1",
    call$1: [function(obj) {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._app;
      t2._app$__$response = F.notifyPropertyChangeHelper(t2, C.Symbol_response, t2._app$__$response, obj);
      t1 = t1._app;
      t1._app$__$args = F.notifyPropertyChangeHelper(t1, C.Symbol_args, t1._app$__$args, this.args_1);
    }, "call$1", null, 2, 0, null, 100, [], "call"],
    $isFunction: true
  },
  TableTreeRow: {
    "^": ["ChangeNotifier;parent>,depth<-322,children>-323,columns<-324", null, function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }],
    get$expander: [function(_) {
      return this._app$__$expander;
    }, null, null, 1, 0, 308, "expander", 304, 305],
    expander$0: function($receiver) {
      return this.get$expander(this).call$0();
    },
    set$expander: [function(_, value) {
      this._app$__$expander = F.notifyPropertyChangeHelper(this, C.Symbol_expander, this._app$__$expander, value);
    }, null, null, 3, 0, 32, 30, [], "expander", 304],
    get$expanderStyle: [function() {
      return this._app$__$expanderStyle;
    }, null, null, 1, 0, 308, "expanderStyle", 304, 305],
    set$expanderStyle: [function(value) {
      this._app$__$expanderStyle = F.notifyPropertyChangeHelper(this, C.Symbol_expanderStyle, this._app$__$expanderStyle, value);
    }, null, null, 3, 0, 32, 30, [], "expanderStyle", 304],
    get$expanded: function(_) {
      return this._expanded;
    },
    set$expanded: function(_, expanded) {
      var t1 = this._expanded;
      this._expanded = expanded;
      if (t1 !== expanded) {
        t1 = this._app$__$expander;
        if (expanded) {
          this._app$__$expander = F.notifyPropertyChangeHelper(this, C.Symbol_expander, t1, "\u21b3");
          this.onShow$0(0);
        } else {
          this._app$__$expander = F.notifyPropertyChangeHelper(this, C.Symbol_expander, t1, "\u2192");
          this.onHide$0();
        }
      }
    },
    toggle$0: function() {
      this.set$expanded(0, !this._expanded);
      return this._expanded;
    },
    TableTreeRow$1: function($parent) {
      if (!this.hasChildren$0())
        this._app$__$expanderStyle = F.notifyPropertyChangeHelper(this, C.Symbol_expanderStyle, this._app$__$expanderStyle, "visibility:hidden;");
    },
    $isTableTreeRow: true
  },
  TableTree: {
    "^": ["ChangeNotifier;rows>-323,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", function() {
      return [C.C_ObservableProperty];
    }, null, null],
    initialize$1: function(root) {
      var t1, t2;
      t1 = this.rows;
      t2 = J.getInterceptor$ax(t1);
      t2.clear$0(t1);
      root.onShow$0(0);
      t2.addAll$1(t1, root.children);
    },
    toggle$1: function(rowIndex) {
      var t1, t2, row;
      t1 = this.rows;
      t2 = J.getInterceptor$asx(t1);
      row = t2.$index(t1, rowIndex);
      if (row.toggle$0())
        t2.insertAll$2(t1, t2.indexOf$1(t1, row) + 1, J.get$children$x(row));
      else
        this._collapse$1(row);
    },
    _collapse$1: function(row) {
      var t1, childCount, i, t2, t3;
      t1 = J.getInterceptor$x(row);
      childCount = J.get$length$asx(t1.get$children(row));
      if (J.$eq(childCount, 0))
        return;
      if (typeof childCount !== "number")
        return H.iae(childCount);
      i = 0;
      for (; i < childCount; ++i)
        if (J.get$expanded$x(J.$index$asx(t1.get$children(row), i)) === true)
          this._collapse$1(J.$index$asx(t1.get$children(row), i));
      t1.set$expanded(row, false);
      t1 = this.rows;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.indexOf$1(t1, row) + 1;
      t2.removeRange$2(t1, t3, t3 + childCount);
    }
  },
  SortedTableColumn: {
    "^": "Object;label>,formatter<",
    static: {SortedTableColumn_toStringFormatter: [function(v) {
        return v != null ? J.toString$0(v) : "<null>";
      }, "call$1", "SortedTableColumn_toStringFormatter$closure", 2, 0, 124, 121, []]}
  },
  SortedTableRow: {
    "^": "Object;values>",
    $isSortedTableRow: true
  },
  SortedTable: {
    "^": "ChangeNotifier;columns<,rows>,_sortedRows,_sortColumnIndex,_sortDescending,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    set$sortColumnIndex: function(index) {
      this._sortColumnIndex = index;
      F.notifyPropertyChangeHelper(this, C.Symbol_getColumnLabel, 0, 1);
    },
    get$sortColumnIndex: function() {
      return this._sortColumnIndex;
    },
    sort$0: function(_) {
      H.IterableMixinWorkaround_sortList(this._sortedRows, new G.SortedTable_sort_closure(this));
      F.notifyPropertyChangeHelper(this, C.Symbol_sortedRows, 0, 1);
    },
    get$sortedRows: [function() {
      return this._sortedRows;
    }, null, null, 1, 0, 325, "sortedRows", 305],
    clearRows$0: function() {
      C.JSArray_methods.set$length(this.rows, 0);
      C.JSArray_methods.set$length(this._sortedRows, 0);
    },
    addRow$1: function(_, row) {
      var t1 = this.rows;
      this._sortedRows.push(t1.length);
      t1.push(row);
      F.notifyPropertyChangeHelper(this, C.Symbol_sortedRows, 0, 1);
    },
    getFormattedValue$2: [function(row, column) {
      var t1, value;
      t1 = this.rows;
      if (row >>> 0 !== row || row >= t1.length)
        return H.ioore(t1, row);
      value = J.$index$asx(J.get$values$x(t1[row]), column);
      t1 = this.columns;
      if (column >>> 0 !== column || column >= 9)
        return H.ioore(t1, column);
      return t1[column].get$formatter().call$1(value);
    }, "call$2", "get$getFormattedValue", 4, 0, 326, 327, [], 328, [], "getFormattedValue", 304],
    getColumnLabel$1: [function(column) {
      var t1;
      if (!J.$eq(column, this._sortColumnIndex)) {
        t1 = this.columns;
        if (column >>> 0 !== column || column >= 9)
          return H.ioore(t1, column);
        return J.$add$ns(J.get$label$x(t1[column]), "\u2003");
      }
      t1 = this.columns;
      if (column >>> 0 !== column || column >= 9)
        return H.ioore(t1, column);
      t1 = J.get$label$x(t1[column]);
      return J.$add$ns(t1, this._sortDescending ? "\u25bc" : "\u25b2");
    }, "call$1", "get$getColumnLabel", 2, 0, 120, 328, [], "getColumnLabel", 304],
    getValue$2: [function(row, column) {
      var t1 = this.rows;
      if (row >>> 0 !== row || row >= t1.length)
        return H.ioore(t1, row);
      return J.$index$asx(J.get$values$x(t1[row]), column);
    }, "call$2", "get$getValue", 4, 0, 329, 327, [], 328, [], "getValue", 304]
  },
  SortedTable_sort_closure: {
    "^": "Closure:296;this_0",
    call$2: [function(i, j) {
      var t1, t2, a, b;
      t1 = this.this_0;
      t2 = t1.rows;
      if (i >>> 0 !== i || i >= t2.length)
        return H.ioore(t2, i);
      a = J.$index$asx(J.get$values$x(t2[i]), t1._sortColumnIndex);
      if (j >>> 0 !== j || j >= t2.length)
        return H.ioore(t2, j);
      b = J.$index$asx(J.get$values$x(t2[j]), t1._sortColumnIndex);
      if (t1._sortDescending)
        return J.compareTo$1$ns(b, a);
      else
        return J.compareTo$1$ns(a, b);
    }, "call$2", null, 4, 0, null, 330, [], 331, [], "call"],
    $isFunction: true
  }
}],
["app_bootstrap", "index.html_bootstrap.dart", , E, {
  "^": "",
  main0: [function() {
    $._librariesToLoad = ["package:observatory/src/elements/curly_block.dart", "package:observatory/src/elements/observatory_element.dart", "package:observatory/src/elements/service_ref.dart", "package:observatory/src/elements/instance_ref.dart", "package:observatory/src/elements/action_link.dart", "package:observatory/src/elements/nav_bar.dart", "package:observatory/src/elements/breakpoint_list.dart", "package:observatory/src/elements/class_ref.dart", "package:observatory/src/elements/eval_box.dart", "package:observatory/src/elements/eval_link.dart", "package:observatory/src/elements/field_ref.dart", "package:observatory/src/elements/function_ref.dart", "package:observatory/src/elements/library_ref.dart", "package:observatory/src/elements/script_ref.dart", "package:observatory/src/elements/class_view.dart", "package:observatory/src/elements/code_ref.dart", "package:observatory/src/elements/code_view.dart", "package:observatory/src/elements/collapsible_content.dart", "package:observatory/src/elements/error_view.dart", "package:observatory/src/elements/field_view.dart", "package:observatory/src/elements/script_inset.dart", "package:observatory/src/elements/function_view.dart", "package:observatory/src/elements/heap_map.dart", "package:observatory/src/elements/isolate_ref.dart", "package:observatory/src/elements/isolate_summary.dart", "package:observatory/src/elements/isolate_view.dart", "package:observatory/src/elements/instance_view.dart", "package:observatory/src/elements/json_view.dart", "package:observatory/src/elements/library_view.dart", "package:observatory/src/elements/sliding_checkbox.dart", "package:observatory/src/elements/isolate_profile.dart", "package:observatory/src/elements/heap_profile.dart", "package:observatory/src/elements/script_view.dart", "package:observatory/src/elements/stack_frame.dart", "package:observatory/src/elements/stack_trace.dart", "package:observatory/src/elements/vm_view.dart", "package:observatory/src/elements/service_view.dart", "package:observatory/src/elements/response_viewer.dart", "package:observatory/src/elements/observatory_application.dart", "package:observatory/src/elements/service_exception_view.dart", "package:observatory/src/elements/service_error_view.dart", "package:observatory/src/elements/vm_ref.dart", "main.dart"];
    $._useDirtyChecking = false;
    F.main();
  }, "call$0", "main0$closure", 0, 0, 125]
},
1],
["breakpoint_list_element", "package:observatory/src/elements/breakpoint_list.dart", , B, {
  "^": "",
  BreakpointListElement: {
    "^": ["ObservatoryElement_ChangeNotifier;_breakpoint_list_element$__$msg%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$msg: [function(receiver) {
      return receiver._breakpoint_list_element$__$msg;
    }, null, null, 1, 0, 333, "msg", 304, 307],
    set$msg: [function(receiver, value) {
      receiver._breakpoint_list_element$__$msg = this.notifyPropertyChange$3(receiver, C.Symbol_msg, receiver._breakpoint_list_element$__$msg, value);
    }, null, null, 3, 0, 334, 30, [], "msg", 304],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._breakpoint_list_element$__$msg).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_cEY];
    },
    static: {BreakpointListElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.BreakpointListElement_methods.Element$created$0(receiver);
        C.BreakpointListElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new BreakpointListElement$created"]}
  },
  "+BreakpointListElement": [336],
  ObservatoryElement_ChangeNotifier: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["class_ref_element", "package:observatory/src/elements/class_ref.dart", , Q, {
  "^": "",
  ClassRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    "@": function() {
      return [C.CustomTag_YKi];
    },
    static: {ClassRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ClassRefElement_methods.Element$created$0(receiver);
        C.ClassRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ClassRefElement$created"]}
  },
  "+ClassRefElement": [338]
}],
["class_view_element", "package:observatory/src/elements/class_view.dart", , Z, {
  "^": "",
  ClassViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier1;_class_view_element$__$cls%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$cls: [function(receiver) {
      return receiver._class_view_element$__$cls;
    }, null, null, 1, 0, 333, "cls", 304, 307],
    set$cls: [function(receiver, value) {
      receiver._class_view_element$__$cls = this.notifyPropertyChange$3(receiver, C.Symbol_cls, receiver._class_view_element$__$cls, value);
    }, null, null, 3, 0, 334, 30, [], "cls", 304],
    eval$1: [function(receiver, text) {
      return J.get$isolate$x(receiver._class_view_element$__$cls).get$1(J.$add$ns(J.get$id$x(receiver._class_view_element$__$cls), "/eval?expr=" + P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false)));
    }, "call$1", "get$eval", 2, 0, 339, 221, [], "eval"],
    retainedSize$1: [function(receiver, dummy) {
      return J.get$isolate$x(receiver._class_view_element$__$cls).get$1(J.$add$ns(J.get$id$x(receiver._class_view_element$__$cls), "/retained"));
    }, "call$1", "get$retainedSize", 2, 0, 339, 340, [], "retainedSize"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._class_view_element$__$cls).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_In1];
    },
    static: {ClassViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ClassViewElement_methods.Element$created$0(receiver);
        C.ClassViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ClassViewElement$created"]}
  },
  "+ClassViewElement": [341],
  ObservatoryElement_ChangeNotifier1: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["code_ref_element", "package:observatory/src/elements/code_ref.dart", , O, {
  "^": "",
  CodeRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$code: [function(receiver) {
      return receiver._service_ref_element$__$ref;
    }, null, null, 1, 0, 342, "code", 305],
    refChanged$1: [function(receiver, oldValue) {
      Q.ServiceRefElement.prototype.refChanged$1.call(this, receiver, oldValue);
      this.notifyPropertyChange$3(receiver, C.Symbol_code, 0, 1);
    }, "call$1", "get$refChanged", 2, 0, 115, 239, [], "refChanged"],
    "@": function() {
      return [C.CustomTag_S48];
    },
    static: {CodeRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CodeRefElement_methods.Element$created$0(receiver);
        C.CodeRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new CodeRefElement$created"]}
  },
  "+CodeRefElement": [338]
}],
["code_view_element", "package:observatory/src/elements/code_view.dart", , F, {
  "^": "",
  CodeViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier2;_code_view_element$__$code%-343,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$code: [function(receiver) {
      return receiver._code_view_element$__$code;
    }, null, null, 1, 0, 342, "code", 304, 307],
    set$code: [function(receiver, value) {
      receiver._code_view_element$__$code = this.notifyPropertyChange$3(receiver, C.Symbol_code, receiver._code_view_element$__$code, value);
    }, null, null, 3, 0, 344, 30, [], "code", 304],
    enteredView$0: [function(receiver) {
      var t1;
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      t1 = receiver._code_view_element$__$code;
      if (t1 == null)
        return;
      J.load$0$x(t1).then$1(new F.CodeViewElement_enteredView_closure());
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._code_view_element$__$code).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    _findJumpTarget$1: [function(receiver, target) {
      var jumpTarget, address, node;
      jumpTarget = J.get$attributes$x(target)._element.getAttribute("data-jump-target");
      if (jumpTarget === "")
        return;
      address = H.Primitives_parseInt(jumpTarget, null, null);
      node = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#addr-" + H.S(address));
      if (node == null)
        return;
      return node;
    }, "call$1", "get$_findJumpTarget", 2, 0, 345, 81, [], "_findJumpTarget"],
    mouseOver$3: [function(receiver, e, detail, target) {
      var jt = this._findJumpTarget$1(receiver, target);
      if (jt == null)
        return;
      J.get$classes$x(jt).add$1(0, "highlight");
    }, "call$3", "get$mouseOver", 6, 0, 346, 21, [], 347, [], 81, [], "mouseOver"],
    mouseOut$3: [function(receiver, e, detail, target) {
      var jt = this._findJumpTarget$1(receiver, target);
      if (jt == null)
        return;
      J.get$classes$x(jt).remove$1(0, "highlight");
    }, "call$3", "get$mouseOut", 6, 0, 346, 21, [], 347, [], 81, [], "mouseOut"],
    "@": function() {
      return [C.CustomTag_INF];
    },
    static: {CodeViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CodeViewElement_methods.Element$created$0(receiver);
        C.CodeViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new CodeViewElement$created"]}
  },
  "+CodeViewElement": [348],
  ObservatoryElement_ChangeNotifier2: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  CodeViewElement_enteredView_closure: {
    "^": "Closure:344;",
    call$1: [function(c) {
      c.loadScript$0();
    }, "call$1", null, 2, 0, 344, 285, [], "call"],
    $isFunction: true
  },
  "+ CodeViewElement_enteredView_closure": [311]
}],
["collapsible_content_element", "package:observatory/src/elements/collapsible_content.dart", , R, {
  "^": "",
  CollapsibleContentElement: {
    "^": ["ObservatoryElement_ChangeNotifier3;_collapsible_content_element$__$iconClass%-301,_collapsible_content_element$__$displayValue%-301,_collapsed%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$iconClass: [function(receiver) {
      return receiver._collapsible_content_element$__$iconClass;
    }, null, null, 1, 0, 308, "iconClass", 304, 305],
    set$iconClass: [function(receiver, value) {
      receiver._collapsible_content_element$__$iconClass = this.notifyPropertyChange$3(receiver, C.Symbol_iconClass, receiver._collapsible_content_element$__$iconClass, value);
    }, null, null, 3, 0, 32, 30, [], "iconClass", 304],
    get$displayValue: [function(receiver) {
      return receiver._collapsible_content_element$__$displayValue;
    }, null, null, 1, 0, 308, "displayValue", 304, 305],
    set$displayValue: [function(receiver, value) {
      receiver._collapsible_content_element$__$displayValue = this.notifyPropertyChange$3(receiver, C.Symbol_displayValue, receiver._collapsible_content_element$__$displayValue, value);
    }, null, null, 3, 0, 32, 30, [], "displayValue", 304],
    get$collapsed: [function(receiver) {
      return receiver._collapsed;
    }, null, null, 1, 0, 303, "collapsed"],
    set$collapsed: [function(receiver, r) {
      receiver._collapsed = r;
      this._refresh$0(receiver);
    }, null, null, 3, 0, 306, 349, [], "collapsed"],
    enteredView$0: [function(receiver) {
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      this._refresh$0(receiver);
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    toggleDisplay$3: [function(receiver, e, detail, target) {
      receiver._collapsed = receiver._collapsed !== true;
      this._refresh$0(receiver);
      this._refresh$0(receiver);
    }, "call$3", "get$toggleDisplay", 6, 0, 346, 21, [], 347, [], 81, [], "toggleDisplay"],
    _refresh$0: [function(receiver) {
      var t1, t2;
      t1 = receiver._collapsed;
      t2 = receiver._collapsible_content_element$__$iconClass;
      if (t1 === true) {
        receiver._collapsible_content_element$__$iconClass = this.notifyPropertyChange$3(receiver, C.Symbol_iconClass, t2, "glyphicon glyphicon-chevron-down");
        receiver._collapsible_content_element$__$displayValue = this.notifyPropertyChange$3(receiver, C.Symbol_displayValue, receiver._collapsible_content_element$__$displayValue, "none");
      } else {
        receiver._collapsible_content_element$__$iconClass = this.notifyPropertyChange$3(receiver, C.Symbol_iconClass, t2, "glyphicon glyphicon-chevron-up");
        receiver._collapsible_content_element$__$displayValue = this.notifyPropertyChange$3(receiver, C.Symbol_displayValue, receiver._collapsible_content_element$__$displayValue, "block");
      }
    }, "call$0", "get$_refresh", 0, 0, 125, "_refresh"],
    "@": function() {
      return [C.CustomTag_gOG];
    },
    static: {"^": "CollapsibleContentElement__openIconClass<-301,CollapsibleContentElement__closeIconClass<-301", CollapsibleContentElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._collapsible_content_element$__$iconClass = "glyphicon glyphicon-chevron-down";
        receiver._collapsible_content_element$__$displayValue = "none";
        receiver._collapsed = true;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CollapsibleContentElement_methods.Element$created$0(receiver);
        C.CollapsibleContentElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new CollapsibleContentElement$created"]}
  },
  "+CollapsibleContentElement": [350],
  ObservatoryElement_ChangeNotifier3: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["curly_block_element", "package:observatory/src/elements/curly_block.dart", , R, {
  "^": "",
  CurlyBlockElement: {
    "^": ["PolymerElement_ChangeNotifier0;_curly_block_element$__$expanded%-300,_curly_block_element$__$busy%-300,_curly_block_element$__$callback%-84,_curly_block_element$__$expand%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$expanded: [function(receiver) {
      return receiver._curly_block_element$__$expanded;
    }, null, null, 1, 0, 303, "expanded", 304, 305],
    set$expanded: [function(receiver, value) {
      receiver._curly_block_element$__$expanded = this.notifyPropertyChange$3(receiver, C.Symbol_expanded, receiver._curly_block_element$__$expanded, value);
    }, null, null, 3, 0, 306, 30, [], "expanded", 304],
    get$busy: [function(receiver) {
      return receiver._curly_block_element$__$busy;
    }, null, null, 1, 0, 303, "busy", 304, 305],
    set$busy: [function(receiver, value) {
      receiver._curly_block_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, receiver._curly_block_element$__$busy, value);
    }, null, null, 3, 0, 306, 30, [], "busy", 304],
    get$callback: [function(receiver) {
      return receiver._curly_block_element$__$callback;
    }, null, null, 1, 0, 114, "callback", 304, 307],
    callback$0: function($receiver) {
      return this.get$callback($receiver).call$0();
    },
    callback$2: function($receiver, arg0, arg1) {
      return this.get$callback($receiver).call$2(arg0, arg1);
    },
    set$callback: [function(receiver, value) {
      receiver._curly_block_element$__$callback = this.notifyPropertyChange$3(receiver, C.Symbol_callback, receiver._curly_block_element$__$callback, value);
    }, null, null, 3, 0, 115, 30, [], "callback", 304],
    get$expand: [function(receiver) {
      return receiver._curly_block_element$__$expand;
    }, null, null, 1, 0, 303, "expand", 304, 307],
    set$expand: [function(receiver, value) {
      receiver._curly_block_element$__$expand = this.notifyPropertyChange$3(receiver, C.Symbol_expand, receiver._curly_block_element$__$expand, value);
    }, null, null, 3, 0, 306, 30, [], "expand", 304],
    expandChanged$1: [function(receiver, oldValue) {
      var t1 = receiver._curly_block_element$__$expand;
      receiver._curly_block_element$__$expanded = this.notifyPropertyChange$3(receiver, C.Symbol_expanded, receiver._curly_block_element$__$expanded, t1);
    }, "call$1", "get$expandChanged", 2, 0, 166, 239, [], "expandChanged"],
    doneCallback$0: [function(receiver) {
      var t1 = receiver._curly_block_element$__$expanded;
      receiver._curly_block_element$__$expanded = this.notifyPropertyChange$3(receiver, C.Symbol_expanded, t1, t1 !== true);
      receiver._curly_block_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, receiver._curly_block_element$__$busy, false);
    }, "call$0", "get$doneCallback", 0, 0, 125, "doneCallback"],
    toggleExpand$3: [function(receiver, a, b, c) {
      var t1 = receiver._curly_block_element$__$busy;
      if (t1 === true)
        return;
      if (receiver._curly_block_element$__$callback != null) {
        receiver._curly_block_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, t1, true);
        this.callback$2(receiver, receiver._curly_block_element$__$expanded !== true, this.get$doneCallback(receiver));
      } else {
        t1 = receiver._curly_block_element$__$expanded;
        receiver._curly_block_element$__$expanded = this.notifyPropertyChange$3(receiver, C.Symbol_expanded, t1, t1 !== true);
      }
    }, "call$3", "get$toggleExpand", 6, 0, 309, 117, [], 196, [], 285, [], "toggleExpand"],
    "@": function() {
      return [C.CustomTag_wwi];
    },
    static: {CurlyBlockElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._curly_block_element$__$expanded = false;
        receiver._curly_block_element$__$busy = false;
        receiver._curly_block_element$__$callback = null;
        receiver._curly_block_element$__$expand = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CurlyBlockElement_methods.Element$created$0(receiver);
        C.CurlyBlockElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new CurlyBlockElement$created"]}
  },
  "+CurlyBlockElement": [351],
  PolymerElement_ChangeNotifier0: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["custom_element.polyfill", "package:custom_element/polyfill.dart", , B, {
  "^": "",
  _isReady: function() {
    var t1, customElements;
    t1 = $.get$context();
    if (t1 == null)
      return true;
    customElements = J.$index$asx(t1, "CustomElements");
    if (customElements == null)
      return "registerElement" in document;
    return J.$eq(J.$index$asx(customElements, "ready"), true);
  },
  closure: {
    "^": "Closure:114;",
    call$0: [function() {
      if (B._isReady())
        return P._Future$immediate(null, null);
      var t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "WebComponentsReady", false), [null]);
      return t1.get$first(t1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: [function(iterable, f) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      f.call$1(t1._current);
  }, "call$2", "IterableMixinWorkaround_forEach$closure", 4, 0, null, 126, [], 127, []],
  IterableMixinWorkaround_any: [function(iterable, f) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      if (f.call$1(t1._current) === true)
        return true;
    return false;
  }, "call$2", "IterableMixinWorkaround_any$closure", 4, 0, null, 126, [], 127, []],
  IterableMixinWorkaround_fold: [function(iterable, initialValue, combine) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      initialValue = combine.call$2(initialValue, t1._current);
    return initialValue;
  }, "call$3", "IterableMixinWorkaround_fold$closure", 6, 0, null, 126, [], 128, [], 129, []],
  IterableMixinWorkaround_toStringIterable: [function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1, t2;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i) {
      t1 = t1[i];
      t2 = iterable;
      if (t1 == null ? t2 == null : t1 === t2)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    }
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  }, "call$3", "IterableMixinWorkaround_toStringIterable$closure", 6, 0, null, 126, [], 130, [], 131, []],
  IterableMixinWorkaround_sortList: [function(list, compare) {
    if (compare == null)
      compare = P.Comparable_compare$closure();
    H.Sort__doSort(list, 0, list.length - 1, compare);
  }, "call$2", "IterableMixinWorkaround_sortList$closure", 4, 0, null, 75, [], 132, []],
  IterableMixinWorkaround__rangeCheck: [function(list, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, list.length))
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, list.length))
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  }, "call$3", "IterableMixinWorkaround__rangeCheck$closure", 6, 0, null, 75, [], 133, [], 134, []],
  IterableMixinWorkaround_setRangeList: [function(list, start, end, from, skipCount) {
    var $length, t1, otherStart, otherList;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = J.$sub$n(end, start);
    if (J.$eq($length, 0))
      return;
    if (J.$lt$n(skipCount, 0))
      throw H.wrapException(new P.ArgumentError(skipCount));
    t1 = J.getInterceptor(from);
    if (!!t1.$isList) {
      otherStart = skipCount;
      otherList = from;
    } else {
      otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
      otherStart = 0;
    }
    if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)))
      throw H.wrapException(new P.StateError("Not enough elements"));
    H.Lists_copy(otherList, otherStart, list, start, $length);
  }, "call$5", "IterableMixinWorkaround_setRangeList$closure", 10, 0, null, 75, [], 133, [], 134, [], 112, [], 135, []],
  IterableMixinWorkaround_insertAllList: [function(list, index, iterable) {
    var t1, t2, insertionLength, t3, element, index0;
    t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, list.length))
      throw H.wrapException(P.RangeError$range(index, 0, list.length));
    t2 = J.getInterceptor(iterable);
    if (!t2.$isEfficientLength)
      iterable = t2.toList$1$growable(iterable, false);
    t2 = J.getInterceptor$asx(iterable);
    insertionLength = t2.get$length(iterable);
    t3 = list.length;
    if (typeof insertionLength !== "number")
      return H.iae(insertionLength);
    C.JSArray_methods.set$length(list, t3 + insertionLength);
    t1 = t1.$add(index, insertionLength);
    t3 = list.length;
    if (!!list.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(list, t1, t3, list, index);
    for (t1 = t2.get$iterator(iterable); t1.moveNext$0(); index = index0) {
      element = t1.get$current();
      index0 = J.$add$ns(index, 1);
      C.JSArray_methods.$indexSet(list, index, element);
    }
  }, "call$3", "IterableMixinWorkaround_insertAllList$closure", 6, 0, null, 75, [], 15, [], 126, []],
  IterableMixinWorkaround_setAllList: [function(list, index, iterable) {
    var t1, index0;
    if (index < 0 || index > list.length)
      throw H.wrapException(P.RangeError$range(index, 0, list.length));
    for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
      index0 = index + 1;
      C.JSArray_methods.$indexSet(list, index, t1.get$current());
    }
  }, "call$3", "IterableMixinWorkaround_setAllList$closure", 6, 0, null, 75, [], 15, [], 126, []],
  Lists_copy: [function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart))
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  }, "call$5", "Lists_copy$closure", 10, 0, null, 136, [], 137, [], 138, [], 139, [], 140, []],
  Lists_indexOf: [function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < endIndex; ++i) {
      if (i < 0 || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  }, "call$4", "Lists_indexOf$closure", 8, 0, null, 117, [], 141, [], 87, [], 142, []],
  Lists_lastIndexOf: [function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  }, "call$3", "Lists_lastIndexOf$closure", 6, 0, null, 117, [], 141, [], 87, []],
  Sort__doSort: [function(a, left, right, compare) {
    if (J.$le$n(J.$sub$n(right, left), 32))
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  }, "call$4", "Sort__doSort$closure", 8, 0, null, 117, [], 143, [], 144, [], 132, []],
  Sort__insertionSort: [function(a, left, right, compare) {
    var i, t1, t2, el, j, t3;
    for (i = J.$add$ns(left, 1), t1 = J.getInterceptor$asx(a); t2 = J.getInterceptor$n(i), t2.$le(i, right); i = t2.$add(i, 1)) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        t3 = J.getInterceptor$n(j);
        if (!(t3.$gt(j, left) && J.$gt$n(compare.call$2(t1.$index(a, t3.$sub(j, 1)), el), 0)))
          break;
        t1.$indexSet(a, j, t1.$index(a, t3.$sub(j, 1)));
        j = t3.$sub(j, 1);
      }
      t1.$indexSet(a, j, el);
    }
  }, "call$4", "Sort__insertionSort$closure", 8, 0, null, 117, [], 143, [], 144, [], 132, []],
  Sort__dualPivotQuicksort: [function(a, left, right, compare) {
    var t1, sixth, t2, index1, index5, index3, t3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t4, less0, great0, pivots_are_equal;
    t1 = J.getInterceptor$n(right);
    sixth = J.$tdiv$n(J.$add$ns(t1.$sub(right, left), 1), 6);
    t2 = J.getInterceptor$ns(left);
    index1 = t2.$add(left, sixth);
    index5 = t1.$sub(right, sixth);
    index3 = J.$tdiv$n(t2.$add(left, right), 2);
    t3 = J.getInterceptor$n(index3);
    index2 = t3.$sub(index3, sixth);
    index4 = t3.$add(index3, sixth);
    t3 = J.getInterceptor$asx(a);
    el1 = t3.$index(a, index1);
    el2 = t3.$index(a, index2);
    el3 = t3.$index(a, index3);
    el4 = t3.$index(a, index4);
    el5 = t3.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t3.$indexSet(a, index1, el1);
    t3.$indexSet(a, index3, el3);
    t3.$indexSet(a, index5, el5);
    t3.$indexSet(a, index2, t3.$index(a, left));
    t3.$indexSet(a, index4, t3.$index(a, right));
    less = t2.$add(left, 1);
    great = t1.$sub(right, 1);
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else
          for (; true;) {
            comp = compare.call$2(t3.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              great = J.$sub$n(great, 1);
              continue;
            } else {
              t4 = J.getInterceptor$n(great);
              if (t2.$lt(comp, 0)) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t4.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t3.$index(a, great), el4), 0)) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k))
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t1 = J.getInterceptor$n(less);
    t3.$indexSet(a, left, t3.$index(a, t1.$sub(less, 1)));
    t3.$indexSet(a, t1.$sub(less, 1), el2);
    t2 = J.getInterceptor$ns(great);
    t3.$indexSet(a, right, t3.$index(a, t2.$add(great, 1)));
    t3.$indexSet(a, t2.$add(great, 1), el4);
    H.Sort__doSort(a, left, t1.$sub(less, 2), compare);
    H.Sort__doSort(a, t2.$add(great, 2), right, compare);
    if (pivots_are_equal)
      return;
    if (t1.$lt(less, index1) && t2.$gt(great, index5)) {
      for (; J.$eq(compare.call$2(t3.$index(a, less), el2), 0);)
        less = J.$add$ns(less, 1);
      for (; J.$eq(compare.call$2(t3.$index(a, great), el4), 0);)
        great = J.$sub$n(great, 1);
      for (k = less; t1 = J.getInterceptor$n(k), t1.$le(k, great); k = t1.$add(k, 1)) {
        ak = t3.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (!t1.$eq(k, less)) {
            t3.$indexSet(a, k, t3.$index(a, less));
            t3.$indexSet(a, less, ak);
          }
          less = J.$add$ns(less, 1);
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t3.$index(a, great), el4), 0)) {
              great = J.$sub$n(great, 1);
              if (J.$lt$n(great, k))
                break;
              continue;
            } else {
              t2 = J.getInterceptor$n(great);
              if (J.$lt$n(compare.call$2(t3.$index(a, great), el2), 0)) {
                t3.$indexSet(a, k, t3.$index(a, less));
                less0 = J.$add$ns(less, 1);
                t3.$indexSet(a, less, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t3.$indexSet(a, k, t3.$index(a, great));
                great0 = t2.$sub(great, 1);
                t3.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  }, "call$4", "Sort__dualPivotQuicksort$closure", 8, 0, null, 117, [], 143, [], 144, [], 132, []],
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$last: function(_) {
      if (J.$eq(this.get$length(this), 0))
        throw H.wrapException(new P.StateError("No elements"));
      return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    any$1: function(_, test) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(this.elementAt$1(0, i)) === true)
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var $length, t1, first, buffer, i, str;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return "";
        first = H.S(this.elementAt$1(0, 0));
        if (!t1.$eq($length, this.get$length(this)))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer._contents = buffer._contents + separator;
          str = this.elementAt$1(0, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          str = this.elementAt$1(0, i);
          str = typeof str === "string" ? str : H.S(str);
          buffer._contents = buffer._contents + str;
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      }
    },
    where$1: function(_, test) {
      return P.IterableBase.prototype.where$1.call(this, this, test);
    },
    map$1: [function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E0", ret: P.Iterable, args: [{func: "dynamic__E0", args: [E]}]};
      }, this.$receiver, "ListIterable");
    }, 127, []],
    fold$2: function(_, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return value;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, null);
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length))
        return J.$sub$n($length, t1);
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0))
        throw H.wrapException(new P.RangeError("value " + H.S(count)));
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    },
    take$1: function(_, count) {
      var t1, t2, newEnd;
      if (J.$lt$n(count, 0))
        throw H.wrapException(new P.RangeError("value " + H.S(count)));
      t1 = this._endOrLength;
      t2 = this._start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), null);
      else {
        newEnd = J.$add$ns(t2, count);
        if (J.$lt$n(t1, newEnd))
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, null);
      }
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2, t3;
      t1 = this._start;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0))
        throw H.wrapException(new P.RangeError("value " + H.S(t1)));
      t3 = this._endOrLength;
      if (t3 != null) {
        if (J.$lt$n(t3, 0))
          throw H.wrapException(new P.RangeError("value " + H.S(t3)));
        if (t2.$gt(t1, t3))
          throw H.wrapException(P.RangeError$range(t1, 0, t3));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (!J.$eq(this._length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$last: function(_) {
      return this._f$1(J.get$last$ax(this._iterable));
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._iterable, index));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  ExpandIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "^": "Object;_iterator,_f,_currentExpansion,_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = this._iterator; !t1.moveNext$0();) {
        this._current = null;
        if (t2.moveNext$0()) {
          this._currentExpansion = null;
          t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
          this._currentExpansion = t1;
        } else
          return false;
      }
      this._current = this._currentExpansion.get$current();
      return true;
    }
  },
  TakeIterable: {
    "^": "IterableBase;_iterable,_takeCount",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.TakeIterator(t1.get$iterator(t1), this._takeCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    static: {TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
        if (typeof takeCount !== "number" || Math.floor(takeCount) !== takeCount || takeCount < 0)
          throw H.wrapException(new P.ArgumentError(takeCount));
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthTakeIterable(iterable, takeCount), [$E]);
        return H.setRuntimeTypeInfo(new H.TakeIterable(iterable, takeCount), [$E]);
      }}
  },
  EfficientLengthTakeIterable: {
    "^": "TakeIterable;_iterable,_takeCount",
    get$length: function(_) {
      var t1, iterableLength;
      t1 = this._iterable;
      iterableLength = t1.get$length(t1);
      t1 = this._takeCount;
      if (J.$gt$n(iterableLength, t1))
        return t1;
      return iterableLength;
    },
    $isEfficientLength: true
  },
  TakeIterator: {
    "^": "Iterator;_iterator,__internal$_remaining",
    moveNext$0: function() {
      var t1 = J.$sub$n(this.__internal$_remaining, 1);
      this.__internal$_remaining = t1;
      if (J.$ge$n(t1, 0))
        return this._iterator.moveNext$0();
      this.__internal$_remaining = -1;
      return false;
    },
    get$current: function() {
      if (J.$lt$n(this.__internal$_remaining, 0))
        return;
      return this._iterator.get$current();
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
        throw H.wrapException(new P.RangeError("value " + H.S(n)));
      return H.SkipIterable_SkipIterable(this._iterable, J.$add$ns(this._skipCount, n), H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1 || J.$lt$n(t1, 0))
        throw H.wrapException(P.RangeError$(t1));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0))
        return $length;
      return 0;
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2: function(receiver, at, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeRange$2: function(receiver, start, end) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    setAll$2: function(_, at, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2: function(_, at, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1: function(_, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2: function(_, start, end) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ReversedListIterable: {
    "^": "ListIterable;_source",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, J.$sub$n(J.$sub$n(t2.get$length(t1), 1), index));
    }
  },
  Symbol0: {
    "^": "Object;_name>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol0: true,
    $isSymbol: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern", Symbol_validatePublicSymbol: [function($name) {
        var t1, t2;
        t1 = J.getInterceptor$asx($name);
        if (t1.get$isEmpty($name) !== true) {
          t2 = $.get$Symbol_publicSymbolPattern()._nativeRegExp;
          if (typeof $name !== "string")
            H.throwExpression(new P.ArgumentError($name));
          t2 = t2.test($name);
        } else
          t2 = true;
        if (t2)
          return $name;
        if (t1.startsWith$1($name, "_"))
          throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is a private identifier"));
        throw H.wrapException(new P.ArgumentError("\"" + H.S($name) + "\" is not a valid (qualified) symbol name"));
      }, "call$1", "Symbol_validatePublicSymbol$closure", 2, 0, null, 12, []]}
  }
}],
["dart._js_mirrors", "dart:_js_mirrors", , H, {
  "^": "",
  s: [function($name) {
    if ($name == null)
      return;
    return new H.Symbol0($name);
  }, "call$1", "s$closure", 2, 0, null, 12, []],
  setterSymbol: [function(symbol) {
    return H.s(H.S(symbol._name) + "=");
  }, "call$1", "setterSymbol$closure", 2, 0, null, 145, []],
  reflect: [function(reflectee) {
    if (!!J.getInterceptor(reflectee).$isClosure)
      return new H.JsClosureMirror(reflectee, 4);
    else
      return new H.JsInstanceMirror(reflectee, 4);
  }, "call$1", "reflect$closure", 2, 0, 146, 147, []],
  reflectClassByMangledName: [function(mangledName) {
    var unmangledName, t1;
    unmangledName = $.get$mangledGlobalNames().$index(0, mangledName);
    t1 = J.getInterceptor(mangledName);
    if (t1.$eq(mangledName, "dynamic"))
      return $.get$JsMirrorSystem__dynamicType();
    if (t1.$eq(mangledName, "void"))
      return $.get$JsMirrorSystem__voidType();
    return H.reflectClassByName(H.s(unmangledName == null ? mangledName : unmangledName), mangledName);
  }, "call$1", "reflectClassByMangledName$closure", 2, 0, null, 148, []],
  reflectClassByName: [function(symbol, mangledName) {
    var t1, separatorIndex, mirror, typeArgIndex, t2, constructorOrInterceptor, index, $constructor, descriptor, fields, fieldsMetadata, mixins, classMirror, typeVariables, typeArguments, i;
    t1 = J.getInterceptor$asx(mangledName);
    separatorIndex = t1.indexOf$1(mangledName, "/");
    if (separatorIndex > -1)
      mangledName = t1.substring$1(mangledName, separatorIndex + 1);
    t1 = $.classMirrors;
    if (t1 == null) {
      t1 = H.JsCache_allocate();
      $.classMirrors = t1;
    }
    mirror = t1[mangledName];
    if (mirror != null)
      return mirror;
    t1 = J.getInterceptor$asx(mangledName);
    typeArgIndex = t1.indexOf$1(mangledName, "<");
    if (typeArgIndex !== -1) {
      t2 = H.reflectClassByMangledName(t1.substring$2(mangledName, 0, typeArgIndex)).get$originalDeclaration();
      mirror = new H.JsTypeBoundClassMirror(t2, t1.substring$2(mangledName, typeArgIndex + 1, J.$sub$n(t1.get$length(mangledName), 1)), null, null, null, null, null, null, null, null, null, null, null, null, null, t2.get$simpleName());
      $.classMirrors[mangledName] = mirror;
      return mirror;
    }
    constructorOrInterceptor = H.Primitives_getConstructorOrInterceptorToken(mangledName);
    if (constructorOrInterceptor == null) {
      index = init.functionAliases[mangledName];
      if (index != null) {
        mirror = new H.JsTypedefMirror(mangledName, null, symbol);
        mirror.referent = new H.JsFunctionTypeMirror(init.metadata[index], null, null, null, mirror);
        $.classMirrors[mangledName] = mirror;
        return mirror;
      }
      throw H.wrapException(P.UnsupportedError$("Cannot find class for: " + H.S(symbol._name)));
    }
    $constructor = H.Primitives_isInterceptorToken(constructorOrInterceptor) ? constructorOrInterceptor.constructor : constructorOrInterceptor;
    descriptor = $constructor["@"];
    if (descriptor == null) {
      fields = null;
      fieldsMetadata = null;
    } else {
      fields = descriptor["^"];
      t1 = J.getInterceptor(fields);
      if (!!t1.$isList) {
        fieldsMetadata = t1.getRange$2(fields, 1, t1.get$length(fields)).toList$0(0);
        fields = t1.$index(fields, 0);
      } else
        fieldsMetadata = null;
      if (typeof fields !== "string")
        fields = "";
    }
    t1 = J.split$1$s(fields, ";");
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    mixins = J.split$1$s(t1[0], "+");
    if (mixins.length > 1 && $.get$mangledGlobalNames().$index(0, mangledName) == null)
      mirror = H.reflectMixinApplication(mixins, mangledName);
    else {
      classMirror = new H.JsClassMirror(mangledName, constructorOrInterceptor, fields, fieldsMetadata, H.JsCache_allocate(), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, symbol);
      typeVariables = $constructor.prototype["<>"];
      if (typeVariables == null || typeVariables.length === 0)
        mirror = classMirror;
      else {
        for (t1 = typeVariables.length, typeArguments = "dynamic", i = 1; i < t1; ++i)
          typeArguments += ",dynamic";
        mirror = new H.JsTypeBoundClassMirror(classMirror, typeArguments, null, null, null, null, null, null, null, null, null, null, null, null, null, classMirror.simpleName);
      }
    }
    $.classMirrors[mangledName] = mirror;
    return mirror;
  }, "call$2", "reflectClassByName$closure", 4, 0, null, 145, [], 148, []],
  filterMethods: [function(methods) {
    var result, t1, method;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(methods, methods.length, 0, null), [H.getTypeArgumentByIndex(methods, 0)]); t1.moveNext$0();) {
      method = t1._current;
      if (!method.get$isConstructor() && !method.get$isGetter() && !method.get$isSetter())
        result.$indexSet(0, method.get$simpleName(), method);
    }
    return result;
  }, "call$1", "filterMethods$closure", 2, 0, null, 149, []],
  filterConstructors: [function(methods) {
    var result, t1, method;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(methods, methods.length, 0, null), [H.getTypeArgumentByIndex(methods, 0)]); t1.moveNext$0();) {
      method = t1._current;
      if (method.get$isConstructor())
        result.$indexSet(0, method.get$simpleName(), method);
    }
    return result;
  }, "call$1", "filterConstructors$closure", 2, 0, null, 149, []],
  filterMembers: [function(methods, variables) {
    var result, t1, method, $name, t2;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    result.addAll$1(0, variables);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(methods, methods.length, 0, null), [H.getTypeArgumentByIndex(methods, 0)]); t1.moveNext$0();) {
      method = t1._current;
      if (method.get$isSetter()) {
        $name = method.get$simpleName()._name;
        t2 = J.getInterceptor$asx($name);
        if (!!J.getInterceptor(result.$index(0, H.s(t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1))))).$isVariableMirror)
          continue;
      }
      if (method.get$isConstructor())
        continue;
      result.putIfAbsent$2(method.get$simpleName(), new H.filterMembers_closure(method));
    }
    return result;
  }, "call$2", "filterMembers$closure", 4, 0, null, 149, [], 150, []],
  reflectMixinApplication: [function(mixinNames, mangledName) {
    var mixins, t1, it, superclass;
    mixins = [];
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(mixinNames, mixinNames.length, 0, null), [H.getTypeArgumentByIndex(mixinNames, 0)]); t1.moveNext$0();)
      mixins.push(H.reflectClassByMangledName(t1._current));
    it = H.setRuntimeTypeInfo(new H.ListIterator(mixins, mixins.length, 0, null), [H.getTypeArgumentByIndex(mixins, 0)]);
    it.moveNext$0();
    superclass = it._current;
    for (; it.moveNext$0();)
      superclass = new H.JsMixinApplication(superclass, it._current, null, null, H.s(mangledName));
    return superclass;
  }, "call$2", "reflectMixinApplication$closure", 4, 0, null, 151, [], 148, []],
  findTypeVariableIndex: [function(typeVariables, $name) {
    var t1, i, t2;
    t1 = J.getInterceptor$asx(typeVariables);
    i = 0;
    while (true) {
      t2 = t1.get$length(typeVariables);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      if (J.$eq(t1.$index(typeVariables, i).get$simpleName(), H.s($name)))
        return i;
      ++i;
    }
    throw H.wrapException(new P.ArgumentError("Type variable not present in list."));
  }, "call$2", "findTypeVariableIndex$closure", 4, 0, null, 153, [], 12, []],
  typeMirrorFromRuntimeTypeRepresentation: [function(owner, type) {
    var t1, context, t2, representation, typeVariable, typeVariables, typeArgument;
    t1 = {};
    t1.ownerClass_0 = null;
    for (context = owner; context != null;) {
      t2 = J.getInterceptor(context);
      if (!!t2.$isClassMirror) {
        t1.ownerClass_0 = context;
        break;
      }
      if (!!t2.$isTypedefMirror)
        break;
      context = context.get$owner();
    }
    if (type == null)
      return $.get$JsMirrorSystem__dynamicType();
    else {
      t2 = t1.ownerClass_0;
      if (t2 == null)
        representation = H.runtimeTypeToString(type, null);
      else if (t2.get$isOriginalDeclaration())
        if (typeof type === "number") {
          typeVariable = init.metadata[type];
          typeVariables = t2.get$typeVariables();
          return J.$index$asx(typeVariables, H.findTypeVariableIndex(typeVariables, J.get$name$x(typeVariable)));
        } else
          representation = H.runtimeTypeToString(type, null);
      else {
        t1 = new H.typeMirrorFromRuntimeTypeRepresentation_getTypeArgument(t1);
        if (typeof type === "number") {
          typeArgument = t1.call$1(type);
          if (!!J.getInterceptor(typeArgument).$isJsTypeVariableMirror)
            return typeArgument;
        }
        representation = H.runtimeTypeToString(type, new H.typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable(t1));
      }
    }
    if (representation != null)
      return H.reflectClassByMangledName(representation);
    return P.reflectClass(C.Type_EjN);
  }, "call$2", "typeMirrorFromRuntimeTypeRepresentation$closure", 4, 0, null, 154, [], 11, []],
  computeQualifiedName: [function(owner, simpleName) {
    if (owner == null)
      return simpleName;
    return H.s(H.S(J.get$_name$x(J.get$qualifiedName$x(owner))) + "." + H.S(simpleName._name));
  }, "call$2", "computeQualifiedName$closure", 4, 0, null, 154, [], 155, []],
  extractMetadata: [function(victim) {
    var metadataFunction, t1, source, index;
    metadataFunction = victim["@"];
    if (metadataFunction != null)
      return metadataFunction();
    if (typeof victim != "function")
      return C.List_empty;
    if ("$metadataIndex" in victim) {
      t1 = victim.$reflectionInfo.splice(victim.$metadataIndex);
      t1.fixed$length = init;
      return H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new H.extractMetadata_closure()), [null, null]).toList$0(0);
    }
    source = Function.prototype.toString.call(victim);
    index = C.JSString_methods.lastIndexOf$1(source, new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\"[0-9,]*\";?[ \n\r]*}", false, true, false), null, null));
    if (index === -1)
      return C.List_empty;
    ++index;
    return H.setRuntimeTypeInfo(new H.MappedListIterable(H.setRuntimeTypeInfo(new H.MappedListIterable(C.JSString_methods.substring$2(source, index, C.JSString_methods.indexOf$2(source, "\"", index)).split(","), P.int_parse$closure()), [null, null]), new H.extractMetadata_closure0()), [null, null]).toList$0(0);
  }, "call$1", "extractMetadata$closure", 2, 0, null, 156, []],
  parseCompactFieldSpecification: [function(owner, fieldSpecification, isStatic, result) {
    var t1, fields, fieldsMetadata, t2, fieldNumber, field, fieldNumber0, metadata, mirror;
    t1 = J.getInterceptor(fieldSpecification);
    if (!!t1.$isList) {
      fields = H.splitFields(t1.$index(fieldSpecification, 0), ",");
      fieldsMetadata = t1.sublist$1(fieldSpecification, 1);
    } else {
      fields = typeof fieldSpecification === "string" ? H.splitFields(fieldSpecification, ",") : [];
      fieldsMetadata = null;
    }
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(fields, fields.length, 0, null), [H.getTypeArgumentByIndex(fields, 0)]), t2 = fieldsMetadata != null, fieldNumber = 0; t1.moveNext$0();) {
      field = t1._current;
      if (t2) {
        fieldNumber0 = fieldNumber + 1;
        if (fieldNumber >= fieldsMetadata.length)
          return H.ioore(fieldsMetadata, fieldNumber);
        metadata = fieldsMetadata[fieldNumber];
        fieldNumber = fieldNumber0;
      } else
        metadata = null;
      mirror = H.JsVariableMirror_JsVariableMirror$from(field, metadata, owner, isStatic);
      if (mirror != null)
        result.push(mirror);
    }
  }, "call$4", "parseCompactFieldSpecification$closure", 8, 0, null, 154, [], 157, [], 66, [], 56, []],
  splitFields: [function(string, pattern) {
    var t1 = J.getInterceptor$asx(string);
    if (t1.get$isEmpty(string) === true)
      return H.setRuntimeTypeInfo([], [J.JSString]);
    return t1.split$1(string, pattern);
  }, "call$2", "splitFields$closure", 4, 0, null, 14, [], 105, []],
  isOperatorName: [function($name) {
    switch ($name) {
      case "==":
      case "[]":
      case "*":
      case "/":
      case "%":
      case "~/":
      case "+":
      case "<<":
      case ">>":
      case ">=":
      case ">":
      case "<=":
      case "<":
      case "&":
      case "^":
      case "|":
      case "-":
      case "unary-":
      case "[]=":
      case "~":
        return true;
      default:
        return false;
    }
  }, "call$1", "isOperatorName$closure", 2, 0, null, 12, []],
  isReflectiveDataInPrototype: [function(key) {
    var t1, firstChar;
    t1 = J.getInterceptor(key);
    if (t1.$eq(key, "^") || t1.$eq(key, "$methodsWithOptionalArguments"))
      return true;
    firstChar = t1.$index(key, 0);
    t1 = J.getInterceptor(firstChar);
    return t1.$eq(firstChar, "*") || t1.$eq(firstChar, "+");
  }, "call$1", "isReflectiveDataInPrototype$closure", 2, 0, null, 48, []],
  JsMirrorSystem: {
    "^": "Object;_cachedLibraries,isolate>",
    get$libraries: function() {
      var t1, result, t2, library;
      t1 = this._cachedLibraries;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = $.get$JsMirrorSystem_librariesByName(), t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(t1._current); t2.moveNext$0();) {
          library = t2.get$current();
          result.$indexSet(0, library.get$uri(), library);
        }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Uri, P.LibraryMirror]);
      this._cachedLibraries = t1;
      return t1;
    },
    static: {"^": "JsMirrorSystem__dynamicType,JsMirrorSystem__voidType,JsMirrorSystem_librariesByName", JsMirrorSystem_computeLibrariesByName: [function() {
        var result, jsLibraries, t1, data, t2, $name, uri, classes, functions, metadataFunction, fields, isRoot, globalObject, metadata;
        result = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, P.LibraryMirror]);
        jsLibraries = init.libraries;
        if (jsLibraries == null)
          return result;
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(jsLibraries, jsLibraries.length, 0, null), [H.getTypeArgumentByIndex(jsLibraries, 0)]); t1.moveNext$0();) {
          data = t1._current;
          t2 = J.getInterceptor$asx(data);
          $name = t2.$index(data, 0);
          uri = P.Uri_parse(t2.$index(data, 1));
          classes = t2.$index(data, 2);
          functions = t2.$index(data, 3);
          metadataFunction = t2.$index(data, 4);
          fields = t2.$index(data, 5);
          isRoot = t2.$index(data, 6);
          globalObject = t2.$index(data, 7);
          metadata = metadataFunction == null ? C.List_empty : metadataFunction();
          J.add$1$ax(result.putIfAbsent$2($name, new H.JsMirrorSystem_computeLibrariesByName_closure()), new H.JsLibraryMirror(uri, classes, functions, metadata, fields, isRoot, globalObject, null, null, null, null, null, null, null, null, null, null, H.s($name)));
        }
        return result;
      }, "call$0", "JsMirrorSystem_computeLibrariesByName$closure", 0, 0, null]}
  },
  JsMirrorSystem_computeLibrariesByName_closure: {
    "^": "Closure:114;",
    call$0: [function() {
      return H.setRuntimeTypeInfo([], [P.LibraryMirror]);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  JsMirror: {
    "^": "Object;",
    toString$0: function(_) {
      return this.get$_prettyName();
    },
    _getField$1: function(receiver) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    _setField$2: function(receiver, arg) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    $isMirror: true
  },
  JsIsolateMirror: {
    "^": "JsMirror;_isolateContext",
    get$_prettyName: function() {
      return "Isolate";
    },
    get$rootLibrary: function() {
      var t1 = $.get$currentJsMirrorSystem().get$libraries().__js_mirrors$_source;
      return t1.get$values(t1).firstWhere$1(0, new H.JsIsolateMirror_rootLibrary_closure());
    },
    $isMirror: true
  },
  JsIsolateMirror_rootLibrary_closure: {
    "^": "Closure:353;",
    call$1: [function(library) {
      return library.get$_isRoot();
    }, "call$1", null, 2, 0, null, 352, [], "call"],
    $isFunction: true
  },
  JsDeclarationMirror: {
    "^": "JsMirror;simpleName<",
    get$qualifiedName: function(_) {
      return H.computeQualifiedName(this.get$owner(), this.get$simpleName());
    },
    get$isPrivate: function() {
      return J.startsWith$1$s(this.get$simpleName()._name, "_");
    },
    toString$0: function(_) {
      return this.get$_prettyName() + " on '" + H.S(this.get$simpleName()._name) + "'";
    },
    _invoke$2: function(positionalArguments, namedArguments) {
      throw H.wrapException(H.RuntimeError$("Should not call _invoke"));
    },
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeVariableMirror: {
    "^": "JsTypeMirror;owner<,_typeVariable,_metadataIndex,_cachedUpperBound,simpleName",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsTypeVariableMirror && J.$eq(this.simpleName, other.simpleName) && this.owner.$eq(0, other.owner);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(C.Type_AGr._typeName);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.owner;
      return (1073741823 & t1 ^ 17 * J.get$hashCode$(this.simpleName) ^ 19 * t2.get$hashCode(t2)) >>> 0;
    },
    get$_prettyName: function() {
      return "TypeVariableMirror";
    },
    get$isStatic: function() {
      return false;
    },
    $isJsTypeVariableMirror: true,
    $isTypeVariableMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsTypeMirror: {
    "^": "JsDeclarationMirror;simpleName",
    get$_prettyName: function() {
      return "TypeMirror";
    },
    get$owner: function() {
      return;
    },
    get$metadata: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$reflectedType: function() {
      throw H.wrapException(P.UnsupportedError$("This type does not support reflectedType"));
    },
    get$typeVariables: function() {
      return C.List_empty0;
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsLibraryMirror: {
    "^": "JsDeclarationMirror_JsObjectMirror;uri<,_classes,_functions,_metadata,_compactFieldSpecification,_isRoot<,_globalObject<,_cachedFunctionMirrors,_cachedFields,_cachedClasses,_cachedFunctions,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,simpleName",
    get$_prettyName: function() {
      return "LibraryMirror";
    },
    get$qualifiedName: function(_) {
      return this.simpleName;
    },
    get$_methods: function() {
      return this.get$_functionMirrors();
    },
    get$__classes: function() {
      var t1, result, cls;
      t1 = this._cachedClasses;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = J.get$iterator$ax(this._classes); t1.moveNext$0();) {
        cls = H.reflectClassByMangledName(t1.get$current());
        if (!!J.getInterceptor(cls).$isClassMirror) {
          cls = cls.get$originalDeclaration();
          if (!!cls.$isJsClassMirror) {
            result.$indexSet(0, cls.simpleName, cls);
            cls._owner = this;
          }
        }
      }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.ClassMirror]);
      this._cachedClasses = t1;
      return t1;
    },
    setField$2: function(fieldName, arg) {
      var $name, t1, t2, mirror;
      $name = fieldName.get$_name(fieldName);
      if ($name.endsWith$1(0, "="))
        throw H.wrapException(new P.ArgumentError(""));
      t1 = this.get$__functions();
      t2 = H.s(H.S($name) + "=");
      mirror = t1.__js_mirrors$_source.$index(0, t2);
      if (mirror == null)
        mirror = this.get$__variables().__js_mirrors$_source.$index(0, fieldName);
      if (mirror == null)
        throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
      mirror._setField$2(this, arg);
      return H.reflect(arg);
    },
    getField$1: function(fieldName) {
      var mirror = this.get$__members().__js_mirrors$_source.$index(0, fieldName);
      if (mirror == null)
        throw H.wrapException(P.NoSuchMethodError$(this, fieldName, [], null, null));
      return H.reflect(mirror._getField$1(this));
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      var mirror = this.get$__members().__js_mirrors$_source.$index(0, memberName);
      if (mirror == null)
        throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
      if (!!J.getInterceptor(mirror).$isJsMethodMirror && !("$reflectable" in mirror._jsFunction))
        H.throwInvalidReflectionError(memberName.get$_name(memberName));
      return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    get$_functionMirrors: function() {
      var t1, result, t2, t3, i, t4, $name, jsFunction, unmangledName, isConstructor, mirror;
      t1 = this._cachedFunctionMirrors;
      if (t1 != null)
        return t1;
      result = H.setRuntimeTypeInfo([], [H.JsMethodMirror]);
      t1 = this._functions;
      t2 = J.getInterceptor$asx(t1);
      t3 = this._globalObject;
      i = 0;
      while (true) {
        t4 = t2.get$length(t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        c$0: {
          $name = t2.$index(t1, i);
          jsFunction = t3[$name];
          unmangledName = $.get$mangledGlobalNames().$index(0, $name);
          if (unmangledName == null || !!jsFunction.getterStub)
            break c$0;
          isConstructor = J.getInterceptor$s(unmangledName).startsWith$1(unmangledName, "new ");
          if (isConstructor) {
            t4 = C.JSString_methods.substring$1(unmangledName, 4);
            unmangledName = H.stringReplaceAllUnchecked(t4, "$", ".");
          }
          mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(unmangledName, jsFunction, !isConstructor, isConstructor);
          result.push(mirror);
          mirror._owner = this;
        }
        ++i;
      }
      this._cachedFunctionMirrors = result;
      return result;
    },
    get$_fields: function() {
      var t1, result;
      t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      result = H.setRuntimeTypeInfo([], [P.VariableMirror]);
      H.parseCompactFieldSpecification(this, this._compactFieldSpecification, true, result);
      this._cachedFields = result;
      return result;
    },
    get$__functions: function() {
      var t1, result, mirror;
      t1 = this._cachedFunctions;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_functionMirrors(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        mirror = t1._current;
        if (!mirror.get$isConstructor())
          result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.MethodMirror]);
      this._cachedFunctions = t1;
      return t1;
    },
    get$__getters: function() {
      var t1 = this._cachedGetters;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, P.MethodMirror]);
      this._cachedGetters = t1;
      return t1;
    },
    get$__setters: function() {
      var t1 = this._cachedSetters;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [P.Symbol, P.MethodMirror]);
      this._cachedSetters = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_fields(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        mirror = t1._current;
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1, result;
      t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = this.get$__classes();
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      result.addAll$1(0, t1);
      t1 = new H.JsLibraryMirror___members_addToResult(result);
      this.get$__functions().__js_mirrors$_source.forEach$1(0, t1);
      this.get$__getters().__js_mirrors$_source.forEach$1(0, t1);
      this.get$__setters().__js_mirrors$_source.forEach$1(0, t1);
      this.get$__variables().__js_mirrors$_source.forEach$1(0, t1);
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.Mirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
      this.get$__members().__js_mirrors$_source.forEach$1(0, new H.JsLibraryMirror_declarations_addToResult(result));
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    get$metadata: function() {
      var t1 = this._cachedMetadata;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(J.map$1$ax(this._metadata, H.reflect$closure())), [P.InstanceMirror]);
      this._cachedMetadata = t1;
      return t1;
    },
    get$owner: function() {
      return;
    },
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  JsDeclarationMirror_JsObjectMirror: {
    "^": "JsDeclarationMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsLibraryMirror___members_addToResult: {
    "^": "Closure:354;result_0",
    call$2: [function(key, value) {
      this.result_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  JsLibraryMirror_declarations_addToResult: {
    "^": "Closure:354;result_0",
    call$2: [function(key, value) {
      this.result_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  filterMembers_closure: {
    "^": "Closure:114;method_0",
    call$0: [function() {
      return this.method_0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  JsMixinApplication: {
    "^": "JsTypeMirror_JsObjectMirror;superclass<,mixin,_cachedSimpleName,_cachedInstanceMembers,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$simpleName: function() {
      var t1, superName;
      t1 = this._cachedSimpleName;
      if (t1 != null)
        return t1;
      superName = J.get$_name$x(J.get$qualifiedName$x(this.superclass));
      t1 = this.mixin;
      t1 = J.contains$1$asx(superName, " with ") === true ? H.s(H.S(superName) + ", " + H.S(J.get$_name$x(J.get$qualifiedName$x(t1)))) : H.s(H.S(superName) + " with " + H.S(J.get$_name$x(J.get$qualifiedName$x(t1))));
      this._cachedSimpleName = t1;
      return t1;
    },
    get$qualifiedName: function(_) {
      return this.get$simpleName();
    },
    get$declarations: function() {
      return this.mixin.get$declarations();
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    getField$1: function(fieldName) {
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    },
    setField$2: function(fieldName, arg) {
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    },
    get$superinterfaces: function() {
      return [this.mixin];
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    get$typeVariables: function() {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror: {
    "^": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsObjectMirror: {
    "^": "Object;",
    $isMirror: true
  },
  JsInstanceMirror: {
    "^": "JsObjectMirror;reflectee<,_getterCache",
    get$type: function(_) {
      return H.reflectClassByMangledName(J.get$runtimeType$(this.reflectee)._typeName);
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      var $name = J.get$_name$x(memberName);
      return this._invoke$4(memberName, 0, $name + ":" + positionalArguments.length + ":0", positionalArguments);
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    get$_classInvocationCache: function() {
      var cacheName, cacheHolder, cache;
      cacheName = $.Primitives_mirrorInvokeCacheName;
      cacheHolder = this.reflectee;
      if (cacheHolder == null)
        cacheHolder = J.getInterceptor(null);
      cache = cacheHolder.constructor[cacheName];
      if (cache == null) {
        cache = H.JsCache_allocate();
        cacheHolder.constructor[cacheName] = cache;
      }
      return cache;
    },
    _invoke$4: function($name, type, reflectiveName, $arguments) {
      var cache, cacheEntry, mangledName, argumentNames, invocation;
      cache = this.get$_classInvocationCache();
      cacheEntry = cache[reflectiveName];
      if (cacheEntry == null) {
        mangledName = $.get$reflectiveNames().$index(0, reflectiveName);
        argumentNames = type === 0 ? H.SubListIterable$(J.split$1$s(reflectiveName, ":"), 3, null, null).toList$0(0) : C.List_empty;
        invocation = new H.JSInvocationMirror($name, mangledName, type, $arguments, argumentNames, null);
        cacheEntry = invocation._getCachedInvocation$1(this.reflectee);
        cache[reflectiveName] = cacheEntry;
      } else
        invocation = null;
      if (cacheEntry.get$isNoSuchMethod()) {
        if (invocation == null)
          invocation = new H.JSInvocationMirror($name, $.get$reflectiveNames().$index(0, reflectiveName), type, $arguments, [], null);
        return H.reflect(cacheEntry.invokeOn$2(this.reflectee, invocation));
      } else
        return H.reflect(cacheEntry.invokeOn$2(this.reflectee, $arguments));
    },
    setField$2: function(fieldName, arg) {
      var reflectiveName = H.S(fieldName.get$_name(fieldName)) + "=";
      this._invoke$4(H.s(reflectiveName), 2, reflectiveName, [arg]);
      return H.reflect(arg);
    },
    getField$1: function(fieldName) {
      var cache, getter, value, result;
      $loop$0: {
        cache = this._getterCache;
        if (typeof cache == "number" || typeof fieldName.$p == "undefined")
          break $loop$0;
        getter = fieldName.$p(cache);
        if (typeof getter == "undefined")
          break $loop$0;
        value = getter(this.reflectee);
        if (value === getter.v)
          return getter.m;
        else {
          result = H.reflect(value);
          getter.v = value;
          getter.m = result;
          return result;
        }
      }
      return this._getFieldSlow$1(fieldName);
    },
    _getFieldSlow$1: function(fieldName) {
      var $name, result, cacheEntry, cache, useEval, mangledName, getter;
      $name = J.get$_name$x(fieldName);
      result = this._invoke$4(fieldName, 1, $name, C.List_empty);
      cacheEntry = this.get$_classInvocationCache()[$name];
      if (cacheEntry.get$isNoSuchMethod())
        return result;
      cache = this._getterCache;
      if (typeof cache == "number") {
        cache = J.$sub$n(cache, 1);
        this._getterCache = cache;
        if (!J.$eq(cache, 0))
          return result;
        cache = ({});
        this._getterCache = cache;
      }
      useEval = typeof dart_precompiled != "function";
      if (typeof fieldName.$p == "undefined")
        fieldName.$p = this._newProbeFn$2($name, useEval);
      mangledName = cacheEntry.get$mangledName();
      getter = cacheEntry.get$isIntercepted() ? this._newInterceptedGetterFn$2(mangledName, useEval) : this._newGetterFn$2(mangledName, useEval);
      cache[$name] = getter;
      getter.v = getter.m = cache;
      return result;
    },
    _newProbeFn$2: function(id, useEval) {
      if (useEval)
        return (function(b){return eval(b)})("(function probe$" + H.S(id) + "(c){return c." + H.S(id) + "})");
      else
        return (function(n){return(function(c){return c[n]})})(id);
    },
    _newGetterFn$2: function($name, useEval) {
      if (!useEval)
        return (function(n){return(function(o){return o[n]()})})($name);
      return (function(b){return eval(b)})("(function " + this.reflectee.constructor.name + "$" + H.S($name) + "(o){return o." + H.S($name) + "()})");
    },
    _newInterceptedGetterFn$2: function($name, useEval) {
      var interceptor = J.getInterceptor(this.reflectee);
      if (!useEval)
        return (function(n,i){return(function(o){return i[n](o)})})($name,interceptor);
      return (function(b,i){return eval(b)})("(function " + interceptor.constructor.name + "$" + H.S($name) + "(o){return i." + H.S($name) + "(o)})",interceptor);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!!J.getInterceptor(other).$isJsInstanceMirror) {
        t1 = this.reflectee;
        t2 = other.reflectee;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return J.$xor$n(H.objectHashCode(this.reflectee), 909522486);
    },
    toString$0: function(_) {
      return "InstanceMirror on " + H.S(P.Error_safeToString(this.reflectee));
    },
    $isJsInstanceMirror: true,
    $isInstanceMirror: true,
    $isMirror: true
  },
  JsInstanceMirror_invoke_closure: {
    "^": "Closure:355;defaultArguments_0",
    call$2: [function(symbol, value) {
      var parameter, t1;
      parameter = symbol.get$_name(symbol);
      t1 = this.defaultArguments_0;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        throw H.wrapException(H.UnimplementedNoSuchMethodError$("Invoking noSuchMethod with named arguments not implemented"));
    }, "call$2", null, 4, 0, null, 145, [], 30, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror: {
    "^": "JsDeclarationMirror;_class,_typeArguments,_cachedTypeArguments,_cachedDeclarations,_cachedMembers,_cachedConstructors,_cachedVariables,_cachedGetters,_cachedSetters,_cachedMethodsMap,_cachedMethods,_superclass,_cachedSuperinterfaces,_cachedInstanceMembers,_cachedStaticMembers,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    toString$0: function(_) {
      var result, t1, t2;
      result = "ClassMirror on " + H.S(this._class.get$simpleName()._name);
      if (this.get$typeArguments() != null) {
        t1 = result + "<";
        t2 = this.get$typeArguments();
        result = t1 + t2.join$1(t2, ", ") + ">";
      }
      return result;
    },
    get$_mangledName: function() {
      for (var t1 = this.get$typeArguments(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        if (!J.$eq(t1._current, $.get$JsMirrorSystem__dynamicType()))
          return H.S(this._class.get$_mangledName()) + "<" + this._typeArguments + ">";
      return this._class.get$_mangledName();
    },
    get$typeVariables: function() {
      return this._class.get$typeVariables();
    },
    get$typeArguments: function() {
      var t1, result, t2, t3, level, currentTypeArgument, i, character;
      t1 = this._cachedTypeArguments;
      if (t1 != null)
        return t1;
      result = [];
      t1 = new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument(result);
      t2 = this._typeArguments;
      if (C.JSString_methods.indexOf$1(t2, "<") === -1)
        H.IterableMixinWorkaround_forEach(t2.split(","), new H.JsTypeBoundClassMirror_typeArguments_closure(t1));
      else {
        for (t3 = t2.length, level = 0, currentTypeArgument = "", i = 0; i < t3; ++i) {
          character = t2[i];
          if (character === " ")
            continue;
          else if (character === "<") {
            currentTypeArgument += character;
            ++level;
          } else if (character === ">") {
            currentTypeArgument += character;
            --level;
          } else if (character === ",")
            if (level > 0)
              currentTypeArgument += character;
            else {
              t1.call$1(currentTypeArgument);
              currentTypeArgument = "";
            }
          else
            currentTypeArgument += character;
        }
        t1.call$1(currentTypeArgument);
      }
      t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [null]);
      this._cachedTypeArguments = t1;
      return t1;
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._class._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    get$__constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(H.filterConstructors(this.get$_methods())), [P.Symbol, P.MethodMirror]);
      this._cachedConstructors = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this._class._getFieldsWithOwner$1(this), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        mirror = t1._current;
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(H.filterMembers(this.get$_methods(), this.get$__variables())), [P.Symbol, P.DeclarationMirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
      result.addAll$1(0, this.get$__members());
      result.addAll$1(0, this.get$__constructors());
      J.forEach$1$ax(this._class.get$typeVariables(), new H.JsTypeBoundClassMirror_declarations_closure(result));
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    setField$2: function(fieldName, arg) {
      return this._class.setField$2(fieldName, arg);
    },
    getField$1: function(fieldName) {
      return this._class.getField$1(fieldName);
    },
    get$owner: function() {
      return this._class.get$owner();
    },
    get$metadata: function() {
      return this._class.get$metadata();
    },
    get$superclass: function() {
      var t1 = this._superclass;
      if (t1 != null)
        return t1;
      t1 = H.typeMirrorFromRuntimeTypeRepresentation(this, init.metadata[J.$index$asx(init.typeInformation[this._class.get$_mangledName()], 0)]);
      this._superclass = t1;
      return t1;
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      return this._class.invoke$3(memberName, positionalArguments, namedArguments);
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    get$isOriginalDeclaration: function() {
      return false;
    },
    get$originalDeclaration: function() {
      return this._class;
    },
    get$superinterfaces: function() {
      var t1 = this._cachedSuperinterfaces;
      if (t1 != null)
        return t1;
      t1 = this._class._getSuperinterfacesWithOwner$1(this);
      this._cachedSuperinterfaces = t1;
      return t1;
    },
    get$isPrivate: function() {
      return J.startsWith$1$s(this._class.get$simpleName()._name, "_");
    },
    get$qualifiedName: function(_) {
      var t1 = this._class;
      return t1.get$qualifiedName(t1);
    },
    get$reflectedType: function() {
      return new H.TypeImpl(this.get$_mangledName(), null);
    },
    get$simpleName: function() {
      return this._class.get$simpleName();
    },
    $isJsTypeBoundClassMirror: true,
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeBoundClassMirror_typeArguments_addTypeArgument: {
    "^": "Closure:32;result_0",
    call$1: [function(typeArgument) {
      var parsedIndex, t1, typeVariable;
      parsedIndex = H.Primitives_parseInt(typeArgument, null, new H.JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure());
      t1 = this.result_0;
      if (J.$eq(parsedIndex, -1))
        t1.push(H.reflectClassByMangledName(J.trim$0$s(typeArgument)));
      else {
        typeVariable = init.metadata[parsedIndex];
        t1.push(new H.JsTypeVariableMirror(P.reflectClass(typeVariable.get$owner()), typeVariable, parsedIndex, null, H.s(J.get$name$x(typeVariable))));
      }
    }, "call$1", null, 2, 0, null, 356, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror_typeArguments_addTypeArgument_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      return -1;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror_typeArguments_closure: {
    "^": "Closure:115;addTypeArgument_1",
    call$1: [function(t) {
      return this.addTypeArgument_1.call$1(t);
    }, "call$1", null, 2, 0, null, 94, [], "call"],
    $isFunction: true
  },
  JsTypeBoundClassMirror_declarations_closure: {
    "^": "Closure:115;result_0",
    call$1: [function(tv) {
      this.result_0.$indexSet(0, tv.get$simpleName(), tv);
      return tv;
    }, "call$1", null, 2, 0, null, 357, [], "call"],
    $isFunction: true
  },
  JsClassMirror: {
    "^": "JsTypeMirror_JsObjectMirror0;_mangledName<,_jsConstructorOrInterceptor<,_fieldsDescriptor,_fieldsMetadata,_jsConstructorCache,_metadata,_superclass,_cachedMethods,_cachedFields,_cachedConstructors,_cachedMethodsMap,_cachedGetters,_cachedSetters,_cachedVariables,_cachedMembers,_cachedDeclarations,_cachedMetadata,_cachedSuperinterfaces,_cachedTypeVariables,_cachedInstanceMembers,_cachedStaticMembers,_owner,simpleName",
    get$_prettyName: function() {
      return "ClassMirror";
    },
    get$_jsConstructor: function() {
      var t1 = this._jsConstructorOrInterceptor;
      if (H.Primitives_isInterceptorToken(t1))
        return t1.constructor;
      else
        return t1;
    },
    get$__constructors: function() {
      var t1 = this._cachedConstructors;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(H.filterConstructors(this.get$_methods())), [P.Symbol, P.MethodMirror]);
      this._cachedConstructors = t1;
      return t1;
    },
    _getMethodsWithOwner$1: function(methodOwner) {
      var $prototype, keys, result, t1, key, simpleName, $function, mirror, mangledName, jsFunction, reflectionName, isConstructor, t2;
      $prototype = this.get$_jsConstructor().prototype;
      keys = H.extractKeys($prototype);
      result = H.setRuntimeTypeInfo([], [H.JsMethodMirror]);
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(keys, keys.length, 0, null), [H.getTypeArgumentByIndex(keys, 0)]); t1.moveNext$0();) {
        key = t1._current;
        if (H.isReflectiveDataInPrototype(key))
          continue;
        simpleName = $.get$mangledNames().$index(0, key);
        if (simpleName == null)
          continue;
        $function = $prototype[key];
        if ($function.$reflectable == 2)
          continue;
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(simpleName, $function, false, false);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      keys = H.extractKeys(init.statics[this._mangledName]);
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(keys, keys.length, 0, null), [H.getTypeArgumentByIndex(keys, 0)]); t1.moveNext$0();) {
        mangledName = t1._current;
        if (H.isReflectiveDataInPrototype(mangledName))
          continue;
        jsFunction = this.get$owner().get$_globalObject()[mangledName];
        if ("$reflectable" in jsFunction) {
          reflectionName = jsFunction.$reflectionName;
          if (reflectionName == null)
            continue;
          isConstructor = C.JSString_methods.startsWith$1(reflectionName, "new ");
          if (isConstructor) {
            t2 = C.JSString_methods.substring$1(reflectionName, 4);
            reflectionName = H.stringReplaceAllUnchecked(t2, "$", ".");
          }
        } else
          continue;
        mirror = H.JsMethodMirror_JsMethodMirror$fromUnmangledName(reflectionName, jsFunction, !isConstructor, isConstructor);
        result.push(mirror);
        mirror._owner = methodOwner;
      }
      return result;
    },
    get$_methods: function() {
      var t1 = this._cachedMethods;
      if (t1 != null)
        return t1;
      t1 = this._getMethodsWithOwner$1(this);
      this._cachedMethods = t1;
      return t1;
    },
    _getFieldsWithOwner$1: function(fieldOwner) {
      var result, t1, instanceFieldSpecfication, staticDescriptor;
      result = H.setRuntimeTypeInfo([], [P.VariableMirror]);
      t1 = this._fieldsDescriptor.split(";");
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      instanceFieldSpecfication = t1[1];
      t1 = this._fieldsMetadata;
      if (t1 != null) {
        instanceFieldSpecfication = [instanceFieldSpecfication];
        C.JSArray_methods.addAll$1(instanceFieldSpecfication, t1);
      }
      H.parseCompactFieldSpecification(fieldOwner, instanceFieldSpecfication, false, result);
      staticDescriptor = init.statics[this._mangledName];
      if (staticDescriptor != null)
        H.parseCompactFieldSpecification(fieldOwner, staticDescriptor["^"], true, result);
      return result;
    },
    get$_fields: function() {
      var t1 = this._cachedFields;
      if (t1 != null)
        return t1;
      t1 = this._getFieldsWithOwner$1(this);
      this._cachedFields = t1;
      return t1;
    },
    get$__methods: function() {
      var t1 = this._cachedMethodsMap;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(H.filterMethods(this.get$_methods())), [P.Symbol, P.MethodMirror]);
      this._cachedMethodsMap = t1;
      return t1;
    },
    get$__variables: function() {
      var t1, result, mirror;
      t1 = this._cachedVariables;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t1 = this.get$_fields(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        mirror = t1._current;
        result.$indexSet(0, mirror.get$simpleName(), mirror);
      }
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.VariableMirror]);
      this._cachedVariables = t1;
      return t1;
    },
    get$__members: function() {
      var t1 = this._cachedMembers;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(H.filterMembers(this.get$_methods(), this.get$__variables())), [P.Symbol, P.Mirror]);
      this._cachedMembers = t1;
      return t1;
    },
    get$declarations: function() {
      var t1, result;
      t1 = this._cachedDeclarations;
      if (t1 != null)
        return t1;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, P.DeclarationMirror);
      t1 = new H.JsClassMirror_declarations_addToResult(result);
      this.get$__members().__js_mirrors$_source.forEach$1(0, t1);
      this.get$__constructors().__js_mirrors$_source.forEach$1(0, t1);
      J.forEach$1$ax(this.get$typeVariables(), new H.JsClassMirror_declarations_closure(result));
      t1 = H.setRuntimeTypeInfo(new H.UnmodifiableMapView0(result), [P.Symbol, P.DeclarationMirror]);
      this._cachedDeclarations = t1;
      return t1;
    },
    setField$2: function(fieldName, arg) {
      var mirror, jsName;
      mirror = this.get$__variables().__js_mirrors$_source.$index(0, fieldName);
      if (mirror != null && mirror.get$isStatic() && J.get$isFinal$x(mirror) !== true) {
        jsName = mirror.get$_jsName();
        if (!(jsName in $))
          throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
        $[jsName] = arg;
        return H.reflect(arg);
      }
      throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(fieldName), [arg], null, null));
    },
    getField$1: function(fieldName) {
      var mirror, jsName;
      mirror = this.get$__variables().__js_mirrors$_source.$index(0, fieldName);
      if (mirror != null && mirror.get$isStatic()) {
        jsName = mirror.get$_jsName();
        if (!(jsName in $))
          throw H.wrapException(H.RuntimeError$("Cannot find \"" + jsName + "\" in current isolate."));
        if (jsName in init.lazies)
          return H.reflect($[init.lazies[jsName]]());
        else
          return H.reflect($[jsName]);
      }
      throw H.wrapException(P.NoSuchMethodError$(this, fieldName, null, null, null));
    },
    get$owner: function() {
      var t1, t2;
      t1 = this._owner;
      if (t1 == null) {
        if (H.Primitives_isInterceptorToken(this._jsConstructorOrInterceptor))
          this._owner = H.reflectClassByMangledName(C.Type_HqF._typeName).get$owner();
        else {
          t1 = $.get$JsMirrorSystem_librariesByName();
          t1 = t1.get$values(t1);
          t2 = new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)];
          for (; t2.moveNext$0();)
            for (t1 = J.get$iterator$ax(t2._current); t1.moveNext$0();)
              t1.get$current().get$__classes();
        }
        t1 = this._owner;
        if (t1 == null)
          throw H.wrapException(new P.StateError("Class \"" + H.S(this.simpleName._name) + "\" has no owner"));
      }
      return t1;
    },
    get$metadata: function() {
      var t1 = this._cachedMetadata;
      if (t1 != null)
        return t1;
      t1 = this._metadata;
      if (t1 == null) {
        t1 = H.extractMetadata(this.get$_jsConstructor().prototype);
        this._metadata = t1;
      }
      t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(J.map$1$ax(t1, H.reflect$closure())), [P.InstanceMirror]);
      this._cachedMetadata = t1;
      return t1;
    },
    get$superclass: function() {
      var t1, typeInformation, t2, superclassName, mixins, t3;
      t1 = this._superclass;
      if (t1 == null) {
        typeInformation = init.typeInformation[this._mangledName];
        if (typeInformation != null) {
          t1 = H.typeMirrorFromRuntimeTypeRepresentation(this, init.metadata[J.$index$asx(typeInformation, 0)]);
          this._superclass = t1;
        } else {
          t1 = this._fieldsDescriptor;
          t2 = t1.split(";");
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          superclassName = t2[0];
          t2 = J.getInterceptor$s(superclassName);
          mixins = t2.split$1(superclassName, "+");
          t3 = mixins.length;
          if (t3 > 1) {
            if (t3 !== 2)
              throw H.wrapException(H.RuntimeError$("Strange mixin: " + t1));
            t1 = H.reflectClassByMangledName(mixins[0]);
            this._superclass = t1;
          } else {
            t1 = t2.$eq(superclassName, "") ? this : H.reflectClassByMangledName(superclassName);
            this._superclass = t1;
          }
        }
      }
      return J.$eq(t1, this) ? null : this._superclass;
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      var mirror = this.get$__methods().__js_mirrors$_source.$index(0, memberName);
      if (mirror == null || !mirror.get$isStatic())
        throw H.wrapException(P.NoSuchMethodError$(this, memberName, positionalArguments, namedArguments, null));
      if (!mirror.canInvokeReflectively$0())
        H.throwInvalidReflectionError(memberName.get$_name(memberName));
      return H.reflect(mirror._invoke$2(positionalArguments, namedArguments));
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$originalDeclaration: function() {
      return this;
    },
    _getSuperinterfacesWithOwner$1: function(owner) {
      var typeInformation, result;
      typeInformation = init.typeInformation[this._mangledName];
      result = typeInformation != null ? H.setRuntimeTypeInfo(new H.MappedListIterable(J.skip$1$ax(typeInformation, 1), new H.JsClassMirror__getSuperinterfacesWithOwner_lookupType(owner)), [null, null]).toList$0(0) : C.List_empty3;
      return H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [P.ClassMirror]);
    },
    get$superinterfaces: function() {
      var t1 = this._cachedSuperinterfaces;
      if (t1 != null)
        return t1;
      t1 = this._getSuperinterfacesWithOwner$1(this);
      this._cachedSuperinterfaces = t1;
      return t1;
    },
    get$typeVariables: function() {
      var t1, result, typeVariables, i, typeVariable;
      t1 = this._cachedTypeVariables;
      if (t1 != null)
        return t1;
      result = [];
      typeVariables = this.get$_jsConstructor().prototype["<>"];
      if (typeVariables == null)
        return result;
      for (i = 0; i < typeVariables.length; ++i) {
        t1 = typeVariables[i];
        typeVariable = init.metadata[t1];
        result.push(new H.JsTypeVariableMirror(this, typeVariable, t1, null, H.s(J.get$name$x(typeVariable))));
      }
      t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [null]);
      this._cachedTypeVariables = t1;
      return t1;
    },
    get$typeArguments: function() {
      return C.List_empty1;
    },
    get$reflectedType: function() {
      if (!J.$eq(J.get$length$asx(this.get$typeVariables()), 0))
        throw H.wrapException(P.UnsupportedError$("Declarations of generics have no reflected type"));
      return new H.TypeImpl(this._mangledName, null);
    },
    $isJsClassMirror: true,
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  JsTypeMirror_JsObjectMirror0: {
    "^": "JsTypeMirror+JsObjectMirror;",
    $isMirror: true
  },
  JsClassMirror_declarations_addToResult: {
    "^": "Closure:354;result_0",
    call$2: [function(key, value) {
      this.result_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  JsClassMirror_declarations_closure: {
    "^": "Closure:115;result_1",
    call$1: [function(tv) {
      this.result_1.$indexSet(0, tv.get$simpleName(), tv);
      return tv;
    }, "call$1", null, 2, 0, null, 357, [], "call"],
    $isFunction: true
  },
  JsClassMirror__getSuperinterfacesWithOwner_lookupType: {
    "^": "Closure:358;owner_0",
    call$1: [function(i) {
      return H.typeMirrorFromRuntimeTypeRepresentation(this.owner_0, init.metadata[i]);
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  JsVariableMirror: {
    "^": "JsDeclarationMirror;_jsName<,isFinal>,isStatic<,_metadataFunction,_owner,__js_mirrors$_type>,_metadata,simpleName",
    get$_prettyName: function() {
      return "VariableMirror";
    },
    get$type: function(_) {
      return H.typeMirrorFromRuntimeTypeRepresentation(this._owner, init.metadata[this.__js_mirrors$_type]);
    },
    get$owner: function() {
      return this._owner;
    },
    get$metadata: function() {
      var t1 = this._metadata;
      if (t1 == null) {
        t1 = this._metadataFunction;
        t1 = t1 == null ? C.List_empty : t1();
        this._metadata = t1;
      }
      return J.toList$0$ax(J.map$1$ax(t1, H.reflect$closure()));
    },
    _getField$1: function(receiver) {
      return $[this._jsName];
    },
    _setField$2: function(receiver, arg) {
      if (this.isFinal)
        throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [arg], null, null));
      $[this._jsName] = arg;
    },
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsVariableMirror_JsVariableMirror$from: function(descriptor, metadataFunction, owner, isStatic) {
        var fieldInformation, t1, field, $length, t2, code, isFinal, jsName, divider, accessorName, unmangledName, setterName;
        fieldInformation = J.split$1$s(descriptor, "-");
        t1 = fieldInformation.length;
        if (t1 === 1)
          return;
        if (0 >= t1)
          return H.ioore(fieldInformation, 0);
        field = fieldInformation[0];
        t1 = J.getInterceptor$asx(field);
        $length = t1.get$length(field);
        t2 = J.getInterceptor$n($length);
        code = H.JsVariableMirror_fieldCode(t1.codeUnitAt$1(field, t2.$sub($length, 1)));
        if (code === 0)
          return;
        isFinal = C.JSInt_methods._shrOtherPositive$1(code, 2) === 0;
        jsName = t1.substring$2(field, 0, t2.$sub($length, 1));
        divider = t1.indexOf$1(field, ":");
        if (divider > 0) {
          accessorName = C.JSString_methods.substring$2(jsName, 0, divider);
          jsName = t1.substring$1(field, divider + 1);
        } else
          accessorName = jsName;
        unmangledName = isStatic ? $.get$mangledGlobalNames().$index(0, accessorName) : $.get$mangledNames().$index(0, "get$" + accessorName);
        if (unmangledName == null)
          unmangledName = accessorName;
        if (isFinal) {
          setterName = H.s(H.S(unmangledName) + "=");
          t1 = owner.get$_methods();
          t2 = new H.ListIterator(t1, t1.length, 0, null);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          for (; isFinal = true, t2.moveNext$0();)
            if (J.$eq(t2._current.get$simpleName(), setterName)) {
              isFinal = false;
              break;
            }
        }
        if (1 >= fieldInformation.length)
          return H.ioore(fieldInformation, 1);
        return new H.JsVariableMirror(jsName, isFinal, isStatic, metadataFunction, owner, H.Primitives_parseInt(fieldInformation[1], null, null), null, H.s(unmangledName));
      }, JsVariableMirror_fieldCode: [function(code) {
        if (code >= 60 && code <= 64)
          return code - 59;
        if (code >= 123 && code <= 126)
          return code - 117;
        if (code >= 37 && code <= 43)
          return code - 27;
        return 0;
      }, "call$1", "JsVariableMirror_fieldCode$closure", 2, 0, null, 152, []]}
  },
  JsClosureMirror: {
    "^": "JsInstanceMirror;reflectee,_getterCache",
    get$$function: function(_) {
      var cacheName, t1, callName, t2, parameterCount, target, $name, cachedFunction;
      cacheName = $.Primitives_mirrorFunctionCacheName;
      t1 = this.reflectee;
      callName = function(reflectee) {
  for (var property in reflectee) {
    if ("call$" == property.substring(0, 5)) return property;
  }
  return null;
}
(t1);
      if (callName == null)
        throw H.wrapException(H.RuntimeError$("Cannot find callName on \"" + H.S(t1) + "\""));
      t2 = callName.split("$");
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      parameterCount = H.Primitives_parseInt(t2[1], null, null);
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBoundClosure) {
        target = t1.get$_target();
        H.BoundClosure_selfOf(t1);
        $name = $.get$mangledNames().$index(0, t2.get$__js_helper$_name(t1));
        if ($name == null)
          H.throwInvalidReflectionError($name);
        cachedFunction = H.JsMethodMirror_JsMethodMirror$fromUnmangledName($name, target, false, false);
      } else
        cachedFunction = new H.JsMethodMirror(t1[callName], parameterCount, false, false, true, false, false, null, null, null, null, H.s(callName));
      t1.constructor[cacheName] = cachedFunction;
      return cachedFunction;
    },
    toString$0: function(_) {
      return "ClosureMirror on '" + H.S(P.Error_safeToString(this.reflectee)) + "'";
    },
    $isInstanceMirror: true,
    $isMirror: true
  },
  JsMethodMirror: {
    "^": "JsDeclarationMirror;_jsFunction,_parameterCount,isGetter<,isSetter<,isStatic<,isConstructor<,isOperator,_owner,_metadata,_returnType,_parameters,simpleName",
    get$_prettyName: function() {
      return "MethodMirror";
    },
    get$parameters: function() {
      var t1 = this._parameters;
      if (t1 != null)
        return t1;
      this.get$metadata();
      return this._parameters;
    },
    canInvokeReflectively$0: function() {
      return "$reflectable" in this._jsFunction;
    },
    get$owner: function() {
      return this._owner;
    },
    get$returnType: function() {
      this.get$metadata();
      return this._returnType;
    },
    get$metadata: function() {
      var t1, raw, t2, formals, info, functionType, type, isNamed, t3, t4, t5, i, parameter, $name, result, t6, p, defaultValue, i0;
      t1 = this._metadata;
      if (t1 == null) {
        t1 = this._jsFunction;
        raw = H.extractMetadata(t1);
        t2 = this._parameterCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        formals = Array(t2);
        info = H.ReflectionInfo_ReflectionInfo(t1);
        if (info != null) {
          functionType = info.functionType;
          if (typeof functionType === "number" && Math.floor(functionType) === functionType)
            type = new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this);
          else {
            t1 = this.get$owner();
            type = t1 != null && !!J.getInterceptor(t1).$isLibraryMirror ? new H.JsFunctionTypeMirror(info.computeFunctionRti$1(null), null, null, null, this._owner) : new H.JsFunctionTypeMirror(info.computeFunctionRti$1(this._owner.get$originalDeclaration().get$_jsConstructorOrInterceptor()), null, null, null, this._owner);
          }
          if (this.isConstructor)
            this._returnType = this._owner;
          else
            this._returnType = type.get$returnType();
          isNamed = info.areOptionalParametersNamed;
          for (t1 = type.get$parameters(), t1 = t1.get$iterator(t1), t2 = formals.length, t3 = info.requiredParameterCount, t4 = info.data, t5 = info.optionalParameterCount, i = 0; t1.moveNext$0(); i = i0) {
            parameter = t1._current;
            $name = info.parameterName$1(i);
            result = t4[2 * i + t5 + 3 + 1];
            t6 = J.getInterceptor$x(parameter);
            if (i < t3)
              p = new H.JsParameterMirror(this, t6.get$__js_mirrors$_type(parameter), false, false, null, result, H.s($name));
            else {
              defaultValue = info.defaultValue$1(0, i);
              p = new H.JsParameterMirror(this, t6.get$__js_mirrors$_type(parameter), true, isNamed, defaultValue, result, H.s($name));
            }
            i0 = i + 1;
            if (i >= t2)
              return H.ioore(formals, i);
            formals[i] = p;
          }
        }
        this._parameters = H.setRuntimeTypeInfo(new P.UnmodifiableListView(formals), [P.ParameterMirror]);
        t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(J.map$1$ax(raw, H.reflect$closure())), [null]);
        this._metadata = t1;
      }
      return t1;
    },
    _invoke$2: function(positionalArguments, namedArguments) {
      if (!this.isStatic && !this.isConstructor)
        throw H.wrapException(H.RuntimeError$("Cannot invoke instance method without receiver."));
      if (!J.$eq(this._parameterCount, positionalArguments.length) || this._jsFunction == null)
        throw H.wrapException(P.NoSuchMethodError$(this.get$owner(), this.simpleName, positionalArguments, namedArguments, null));
      return this._jsFunction.apply($, P.List_List$from(positionalArguments, true, null));
    },
    _getField$1: function(receiver) {
      if (this.isGetter)
        return this._invoke$2([], null);
      else
        throw H.wrapException(P.UnimplementedError$("getField on " + H.S(receiver)));
    },
    _setField$2: function(receiver, arg) {
      if (this.isSetter)
        return this._invoke$2([arg], null);
      else
        throw H.wrapException(P.NoSuchMethodError$(this, H.setterSymbol(this.simpleName), [], null, null));
    },
    get$isRegularMethod: function() {
      return !this.isGetter && !this.isSetter && !this.isConstructor;
    },
    $isJsMethodMirror: true,
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true,
    static: {JsMethodMirror_JsMethodMirror$fromUnmangledName: function($name, jsFunction, isStatic, isConstructor) {
        var info, isOperator, isSetter, t1, requiredParameterCount, isGetter, optionalParameterCount;
        info = $name.split(":");
        if (0 >= info.length)
          return H.ioore(info, 0);
        $name = info[0];
        isOperator = H.isOperatorName($name);
        isSetter = !isOperator && J.endsWith$1$s($name, "=");
        t1 = info.length;
        if (t1 === 1) {
          if (isSetter) {
            requiredParameterCount = 1;
            isGetter = false;
          } else {
            requiredParameterCount = 0;
            isGetter = true;
          }
          optionalParameterCount = 0;
        } else {
          if (1 >= t1)
            return H.ioore(info, 1);
          requiredParameterCount = H.Primitives_parseInt(info[1], null, null);
          if (2 >= info.length)
            return H.ioore(info, 2);
          optionalParameterCount = H.Primitives_parseInt(info[2], null, null);
          isGetter = false;
        }
        t1 = H.s($name);
        return new H.JsMethodMirror(jsFunction, J.$add$ns(requiredParameterCount, optionalParameterCount), isGetter, isSetter, isStatic, isConstructor, isOperator, null, null, null, null, t1);
      }}
  },
  JsParameterMirror: {
    "^": "JsDeclarationMirror;owner<,__js_mirrors$_type>,isOptional<,isNamed,_defaultValue,metadataList,simpleName",
    get$_prettyName: function() {
      return "ParameterMirror";
    },
    get$type: function(_) {
      return H.typeMirrorFromRuntimeTypeRepresentation(this.owner, this.__js_mirrors$_type);
    },
    get$isStatic: function() {
      return false;
    },
    get$isFinal: function(_) {
      return false;
    },
    get$metadata: function() {
      return J.toList$0$ax(J.map$1$ax(this.metadataList, new H.JsParameterMirror_metadata_closure()));
    },
    $isParameterMirror: true,
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  JsParameterMirror_metadata_closure: {
    "^": "Closure:359;",
    call$1: [function(i) {
      return H.reflect(init.metadata[i]);
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  JsTypedefMirror: {
    "^": "JsDeclarationMirror;_mangledName<,referent,simpleName",
    get$value: function(_) {
      return this.referent;
    },
    get$_prettyName: function() {
      return "TypedefMirror";
    },
    get$reflectedType: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$originalDeclaration: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$owner: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$metadata: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    $isTypedefMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  BrokenClassMirror: {
    "^": "Object;",
    get$reflectedType: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$superclass: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$superinterfaces: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$declarations: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    invoke$3: function(memberName, positionalArguments, namedArguments) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    invoke$2: function(memberName, positionalArguments) {
      return this.invoke$3(memberName, positionalArguments, null);
    },
    getField$1: function(fieldName) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    setField$2: function(fieldName, value) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$typeVariables: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$typeArguments: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$originalDeclaration: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$simpleName: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$qualifiedName: function(_) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$isPrivate: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    get$metadata: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  JsFunctionTypeMirror: {
    "^": "BrokenClassMirror;_typeData,_cachedToString,_cachedReturnType,_cachedParameters,owner<",
    get$isOriginalDeclaration: function() {
      return true;
    },
    get$returnType: function() {
      var t1 = this._cachedReturnType;
      if (t1 != null)
        return t1;
      t1 = this._typeData;
      if (!!t1.void) {
        t1 = $.get$JsMirrorSystem__voidType();
        this._cachedReturnType = t1;
        return t1;
      }
      if (!("ret" in t1)) {
        t1 = $.get$JsMirrorSystem__dynamicType();
        this._cachedReturnType = t1;
        return t1;
      }
      t1 = H.typeMirrorFromRuntimeTypeRepresentation(this.owner, t1.ret);
      this._cachedReturnType = t1;
      return t1;
    },
    get$parameters: function() {
      var t1, result, t2, parameterCount, parameterCount0, $name;
      t1 = this._cachedParameters;
      if (t1 != null)
        return t1;
      result = [];
      t1 = this._typeData;
      if ("args" in t1)
        for (t2 = t1.args, t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]), parameterCount = 0; t2.moveNext$0(); parameterCount = parameterCount0) {
          parameterCount0 = parameterCount + 1;
          result.push(new H.JsParameterMirror(this, t2._current, false, false, null, C.List_empty2, H.s("argument" + parameterCount)));
        }
      else
        parameterCount = 0;
      if ("opt" in t1)
        for (t2 = t1.opt, t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0(); parameterCount = parameterCount0) {
          parameterCount0 = parameterCount + 1;
          result.push(new H.JsParameterMirror(this, t2._current, false, false, null, C.List_empty2, H.s("argument" + parameterCount)));
        }
      if ("named" in t1)
        for (t2 = H.extractKeys(t1.named), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0();) {
          $name = t2._current;
          result.push(new H.JsParameterMirror(this, t1.named[$name], false, false, null, C.List_empty2, H.s($name)));
        }
      t1 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(result), [P.ParameterMirror]);
      this._cachedParameters = t1;
      return t1;
    },
    toString$0: function(_) {
      var t1, t2, s, sep, argument, $name;
      t1 = this._cachedToString;
      if (t1 != null)
        return t1;
      t1 = this._typeData;
      if ("args" in t1)
        for (t2 = t1.args, t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]), s = "FunctionTypeMirror on '(", sep = ""; t2.moveNext$0(); sep = ", ") {
          argument = t2._current;
          s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
        }
      else {
        s = "FunctionTypeMirror on '(";
        sep = "";
      }
      if ("opt" in t1) {
        s += sep + "[";
        for (t2 = t1.opt, t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]), sep = ""; t2.moveNext$0(); sep = ", ") {
          argument = t2._current;
          s = C.JSString_methods.$add(s + sep, H.runtimeTypeToString(argument, null));
        }
        s += "]";
      }
      if ("named" in t1) {
        s += sep + "{";
        for (t2 = H.extractKeys(t1.named), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]), sep = ""; t2.moveNext$0(); sep = ", ") {
          $name = t2._current;
          s = C.JSString_methods.$add(s + sep + (H.S($name) + ": "), H.runtimeTypeToString(t1.named[$name], null));
        }
        s += "}";
      }
      s += ") -> ";
      if (!!t1.void)
        s += "void";
      else
        s = "ret" in t1 ? C.JSString_methods.$add(s, H.runtimeTypeToString(t1.ret, null)) : s + "dynamic";
      t1 = s + "'";
      this._cachedToString = t1;
      return t1;
    },
    get$callMethod: function() {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    callMethod$2: function(arg0, arg1) {
      return this.get$callMethod().call$2(arg0, arg1);
    },
    callMethod$1: function(arg0) {
      return this.get$callMethod().call$1(arg0);
    },
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  typeMirrorFromRuntimeTypeRepresentation_getTypeArgument: {
    "^": "Closure:360;box_0",
    call$1: [function(index) {
      var typeVariable, t1, variableIndex;
      typeVariable = init.metadata[index];
      t1 = this.box_0;
      variableIndex = H.findTypeVariableIndex(t1.ownerClass_0.get$typeVariables(), J.get$name$x(typeVariable));
      return J.$index$asx(t1.ownerClass_0.get$typeArguments(), variableIndex);
    }, "call$1", null, 2, 0, null, 15, [], "call"],
    $isFunction: true
  },
  typeMirrorFromRuntimeTypeRepresentation_substituteTypeVariable: {
    "^": "Closure:120;getTypeArgument_1",
    call$1: [function(index) {
      var typeArgument, t1;
      typeArgument = this.getTypeArgument_1.call$1(index);
      t1 = J.getInterceptor(typeArgument);
      if (!!t1.$isJsTypeVariableMirror)
        return H.S(typeArgument._metadataIndex);
      if (!t1.$isJsClassMirror && !t1.$isJsTypeBoundClassMirror)
        if (t1.$eq(typeArgument, $.get$JsMirrorSystem__dynamicType()))
          return "dynamic";
        else if (t1.$eq(typeArgument, $.get$JsMirrorSystem__voidType()))
          return "void";
        else
          return "dynamic";
      return typeArgument.get$_mangledName();
    }, "call$1", null, 2, 0, null, 15, [], "call"],
    $isFunction: true
  },
  extractMetadata_closure: {
    "^": "Closure:359;",
    call$1: [function(i) {
      return init.metadata[i];
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  extractMetadata_closure0: {
    "^": "Closure:359;",
    call$1: [function(i) {
      return init.metadata[i];
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  UnmodifiableMapView0: {
    "^": "Object;__js_mirrors$_source",
    get$length: function(_) {
      return this.__js_mirrors$_source._collection$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_mirrors$_source._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.__js_mirrors$_source._collection$_length !== 0;
    },
    $index: function(_, key) {
      return this.__js_mirrors$_source.$index(0, key);
    },
    containsKey$1: function(key) {
      return this.__js_mirrors$_source.containsKey$1(key);
    },
    containsValue$1: function(value) {
      return this.__js_mirrors$_source.containsValue$1(value);
    },
    forEach$1: function(_, f) {
      return this.__js_mirrors$_source.forEach$1(0, f);
    },
    get$keys: function() {
      var t1 = this.__js_mirrors$_source;
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$values: function(_) {
      var t1 = this.__js_mirrors$_source;
      return t1.get$values(t1);
    },
    $indexSet: function(_, key, value) {
      return H.UnmodifiableMapView__throw();
    },
    addAll$1: function(_, other) {
      return H.UnmodifiableMapView__throw();
    },
    remove$1: function(_, key) {
      H.UnmodifiableMapView__throw();
    },
    clear$0: function(_) {
      return H.UnmodifiableMapView__throw();
    },
    $isMap: true,
    static: {UnmodifiableMapView__throw: [function() {
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
      }, "call$0", "UnmodifiableMapView__throw$closure", 0, 0, null]}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  computeMangledNames: [function(jsMangledNames, isGlobal) {
    var keys, result, t1, t2, key, value, t3;
    keys = H.extractKeys(jsMangledNames);
    result = H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, J.JSString]);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(keys, keys.length, 0, null), [H.getTypeArgumentByIndex(keys, 0)]), t2 = !isGlobal; t1.moveNext$0();) {
      key = t1._current;
      value = jsMangledNames[key];
      result.$indexSet(0, key, value);
      if (t2) {
        t3 = J.getInterceptor$s(key);
        if (t3.startsWith$1(key, "get$"))
          result.$indexSet(0, "set$" + t3.substring$1(key, 4), value + "=");
      }
    }
    return result;
  }, "call$2", "computeMangledNames$closure", 4, 0, null, 158, [], 159, []],
  computeReflectiveNames: [function(map) {
    var result = H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, J.JSString]);
    map.forEach$1(0, new H.computeReflectiveNames_closure(result));
    return result;
  }, "call$1", "computeReflectiveNames$closure", 2, 0, null, 160, []],
  extractKeys: [function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }, "call$1", "extractKeys$closure", 2, 0, null, 156, []],
  computeReflectiveNames_closure: {
    "^": "Closure:362;result_0",
    call$2: [function(mangledName, reflectiveName) {
      this.result_0.$indexSet(0, reflectiveName, mangledName);
    }, "call$2", null, 4, 0, null, 148, [], 361, [], "call"],
    $isFunction: true
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _registerErrorHandler: [function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return zone.registerBinaryCallback$1(errorHandler);
    else
      return zone.registerUnaryCallback$1(errorHandler);
  }, "call$2", "_registerErrorHandler$closure", 4, 0, null, 161, [], 162, []],
  Future_Future: function(computation, $T) {
    var result = P._Future$($T);
    P.Timer_Timer(C.Duration_0, new P.Future_Future_closure(computation, result));
    return result;
  },
  _asyncRunCallbackLoop: [function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      J.callback$0$x(entry);
      entry = entry.get$next();
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  }, "call$0", "_asyncRunCallbackLoop$closure", 0, 0, null],
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 125],
  _scheduleAsyncCallback: [function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  }, "call$1", "_scheduleAsyncCallback$closure", 2, 0, null, 164, []],
  scheduleMicrotask: [function(callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone)) {
      $.Zone__current.scheduleMicrotask$1(callback);
      return;
    }
    t1 = $.Zone__current;
    t1.scheduleMicrotask$1(t1.bindCallback$2$runGuarded(callback, true));
  }, "call$1", "scheduleMicrotask$closure", 2, 0, null, 164, []],
  StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
    var t1;
    if (sync) {
      t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    } else {
      t1 = H.setRuntimeTypeInfo(new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    }
    return t1;
  },
  _runGuarded: [function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.handleUncaughtError$2(e, s);
    }

  }, "call$1", "_runGuarded$closure", 2, 0, null, 165, []],
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 166, 30, []],
  _nullErrorHandler: [function(error, stackTrace) {
    $.Zone__current.handleUncaughtError$2(error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 167, 84, 168, [], 169, []],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 125],
  _runUserCode: [function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  }, "call$3", "_runUserCode$closure", 6, 0, null, 170, [], 171, [], 172, []],
  _cancelAndError: [function(subscription, future, error, stackTrace) {
    subscription.cancel$0();
    future._completeError$2(error, stackTrace);
  }, "call$4", "_cancelAndError$closure", 8, 0, null, 173, [], 174, [], 168, [], 169, []],
  _cancelAndErrorClosure: [function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  }, "call$2", "_cancelAndErrorClosure$closure", 4, 0, null, 173, [], 174, []],
  _cancelAndValue: [function(subscription, future, value) {
    subscription.cancel$0();
    future._complete$1(value);
  }, "call$3", "_cancelAndValue$closure", 6, 0, null, 173, [], 174, [], 30, []],
  Timer_Timer: function(duration, callback) {
    var t1;
    if (J.$eq($.Zone__current, C.C__RootZone))
      return $.Zone__current.createTimer$2(duration, callback);
    t1 = $.Zone__current;
    return t1.createTimer$2(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: [function(duration, callback) {
    var milliseconds = duration.get$inMilliseconds();
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  }, "call$2", "_createTimer$closure", 4, 0, null, 175, [], 164, []],
  Zone__enter: [function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  }, "call$1", "Zone__enter$closure", 2, 0, null, 162, []],
  _rootHandleUncaughtError: [function($self, $parent, zone, error, stackTrace) {
    $self.run$1(new P._rootHandleUncaughtError_closure(error, stackTrace));
  }, "call$5", "_rootHandleUncaughtError$closure", 10, 0, 176, 177, [], 178, [], 162, [], 168, [], 169, []],
  _rootRun: [function($self, $parent, zone, f) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$4", "_rootRun$closure", 8, 0, 179, 177, [], 178, [], 162, [], 127, []],
  _rootRunUnary: [function($self, $parent, zone, f, arg) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$5", "_rootRunUnary$closure", 10, 0, 180, 177, [], 178, [], 162, [], 127, [], 181, []],
  _rootRunBinary: [function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if (J.$eq($.Zone__current, zone))
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  }, "call$6", "_rootRunBinary$closure", 12, 0, 182, 177, [], 178, [], 162, [], 127, [], 59, [], 60, []],
  _rootRegisterCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterCallback$closure", 8, 0, 183, 177, [], 178, [], 162, [], 127, []],
  _rootRegisterUnaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterUnaryCallback$closure", 8, 0, 184, 177, [], 178, [], 162, [], 127, []],
  _rootRegisterBinaryCallback: [function($self, $parent, zone, f) {
    return f;
  }, "call$4", "_rootRegisterBinaryCallback$closure", 8, 0, 185, 177, [], 178, [], 162, [], 127, []],
  _rootScheduleMicrotask: [function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  }, "call$4", "_rootScheduleMicrotask$closure", 8, 0, 186, 177, [], 178, [], 162, [], 127, []],
  _rootCreateTimer: [function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  }, "call$5", "_rootCreateTimer$closure", 10, 0, 187, 177, [], 178, [], 162, [], 175, [], 164, []],
  _rootPrint: [function($self, $parent, zone, line) {
    H.printString(line);
  }, "call$4", "_rootPrint$closure", 8, 0, 188, 177, [], 178, [], 162, [], 189, []],
  _printToZone: [function(line) {
    J.print$1$x($.Zone__current, line);
  }, "call$1", "_printToZone$closure", 2, 0, 190, 189, []],
  _rootFork: [function($self, $parent, zone, specification, zoneValues) {
    var copiedMap;
    $.printToZone = P._printToZone$closure();
    copiedMap = P.HashMap_HashMap(null, null, null, null, null);
    return new P._CustomizedZone(zone, specification, copiedMap);
  }, "call$5", "_rootFork$closure", 10, 0, 191, 177, [], 178, [], 162, [], 192, [], 193, []],
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  _BroadcastStream: {
    "^": "_ControllerStream;_async$_controller"
  },
  _BroadcastSubscription: {
    "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_async$_controller: function() {
      return this._async$_controller;
    },
    _expectsEvent$1: function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 125],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 125],
    static: {"^": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING"}
  },
  _BroadcastStreamController: {
    "^": "Object;_async$_next@,_async$_previous@",
    get$isPaused: function() {
      return false;
    },
    get$_isFiring: function() {
      return (this._state & 2) !== 0;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = P._Future$(null);
      this._doneFuture = t1;
      return t1;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_async$_next();
      previous.set$_async$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _recordCancel$1: function(subscription) {
      if (subscription.get$_async$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._async$_next === this)
          this._callOnCancel$0();
      }
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: [function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 245, []],
    addError$2: [function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 363, 84, 168, [], 169, []],
    close$0: function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    },
    _async$_add$1: function(_, data) {
      this._sendData$1(data);
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    },
    _close$0: function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state = this._state & 4294967287;
      C.JSNull_methods.complete$0(addState);
    },
    _forEachListener$1: function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(new P.StateError("Cannot fire new event. Controller is already firing an event"));
      link = this._async$_next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_async$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_async$_next();
      this._state = this._state & 4294967293;
      if (this._async$_next === this)
        this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }
  },
  _SyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var t1 = this._async$_next;
      if (t1 === this)
        return;
      if (t1.get$_async$_next() === this) {
        this._state = this._state | 2;
        this._async$_next._async$_add$1(0, data);
        this._state = this._state & 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
        return;
      }
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      if (this._async$_next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  _SyncBroadcastStreamController__sendData_closure: {
    "^": "Closure;this_0,data_1",
    call$1: [function(subscription) {
      subscription._async$_add$1(0, this.data_1);
    }, "call$1", null, 2, 0, null, 173, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendError_closure: {
    "^": "Closure;this_0,error_1,stackTrace_2",
    call$1: [function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    }, "call$1", null, 2, 0, null, 173, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendDone_closure: {
    "^": "Closure;this_0",
    call$1: [function(subscription) {
      subscription._close$0();
    }, "call$1", null, 2, 0, null, 173, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _AsyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var link, t1;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
        t1 = new P._DelayedData(data, null);
        t1.$builtinTypeInfo = [null];
        link._addPending$1(t1);
      }
    },
    _sendError$2: function(error, stackTrace) {
      var link;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next())
        link._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      var link = this._async$_next;
      if (link !== this)
        for (; link !== this; link = link.get$_async$_next())
          link._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_Future_closure: {
    "^": "Closure:114;computation_0,result_1",
    call$0: [function() {
      var e, s, exception, t1;
      try {
        this.result_1._complete$1(this.computation_0.call$0());
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.result_1._completeError$2(e, s);
      }

    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: [function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    }, function($receiver) {
      return this.complete$1($receiver, null);
    }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 364, 84, 30, []],
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(new P.ArgumentError("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(new P.StateError("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 363, 84, 168, [], 169, []]
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, t1.registerUnaryCallback$1(f), null, P._registerErrorHandler(onError, $.Zone__current), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, $.Zone__current.registerUnaryCallback$1(test), t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null, null, null, null, null, t1.registerCallback$1(action));
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      if (this._state >= 4)
        this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
      else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 167, 84, 168, [], 169, []],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      if (this._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      this._state = 1;
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future$immediateError: function(error, stackTrace, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediateError$2(error, stackTrace, $T);
        return t1;
      }, _Future__chainForeignFuture: [function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, "call$2", "_Future__chainForeignFuture$closure", 4, 0, null, 33, [], 81, []], _Future__chainCoreFuture: [function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, "call$2", "_Future__chainCoreFuture$closure", 4, 0, null, 33, [], 81, []], _Future__propagateMultipleListeners: [function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, "call$2", "_Future__propagateMultipleListeners$closure", 4, 0, null, 33, [], 163, []], _Future__propagateToListeners: [function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, sourceValue, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (hasError && !t1.source_4.get$_zone().inSameErrorZone$1(zone)) {
              asyncError = t1.source_4.get$_error();
              t1.source_4.get$_zone().handleUncaughtError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }, "call$2", "_Future__propagateToListeners$closure", 4, 0, null, 33, [], 163, []]}
  },
  _Future__addListener_closure: {
    "^": "Closure:114;this_0,listener_1",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:115;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:365;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 84, 168, [], 169, [], "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:114;this_0,coreFuture_1",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:114;this_2,value_3",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:114;this_0,error_1,stackTrace_2",
    call$0: [function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:303;box_1,listener_3,sourceValue_4,zone_5",
    call$0: [function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:125;box_2,box_1,listener_6,zone_7",
    call$0: [function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:125;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: [function() {
      var t1, e, s, exception, t2, t3;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t1.completeResult_0 = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:115;box_2,listener_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, null, 366, [], "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:365;box_0,listener_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 84, 168, [], 169, [], "call"],
    $isFunction: true
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback>,next@",
    callback$0: function($receiver) {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: [function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Stream__dynamic__T", ret: P.Stream, args: [{func: "dynamic__T", args: [T]}]};
      }, this.$receiver, "Stream");
    }, 367, []],
    expand$1: [function(_, convert) {
      return H.setRuntimeTypeInfo(new P._ExpandStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    }, "call$1", "get$expand", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "Stream__Iterable__T", ret: P.Stream, args: [{func: "Iterable__T", ret: P.Iterable, args: [T]}]};
      }, this.$receiver, "Stream");
    }, 367, []],
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    any$1: function(_, test) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSBool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    take$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._TakeStream(count, this), [null]);
      t1._TakeStream$2(this, count, null);
      return t1;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    },
    elementAt$1: function(_, index) {
      var t1, future;
      t1 = {};
      t1.index_0 = index;
      if (typeof index !== "number" || Math.floor(index) !== index || J.$lt$n(index, 0))
        throw H.wrapException(new P.ArgumentError(t1.index_0));
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_1 = null;
      t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_elementAt_closure(t1, this, future), true, new P.Stream_elementAt_closure0(t1, future), future.get$_completeError());
      return future;
    },
    $isStream: true
  },
  Stream_contains_closure: {
    "^": "Closure;box_0,this_1,needle_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 141, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure:114;needle_4,element_5",
    call$0: [function() {
      return J.$eq(this.element_5, this.needle_4);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_contains__closure0: {
    "^": "Closure:306;box_0,future_6",
    call$1: [function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    }, "call$1", null, 2, 0, null, 368, [], "call"],
    $isFunction: true
  },
  Stream_contains_closure0: {
    "^": "Closure:114;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 141, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:114;action_4,element_5",
    call$0: [function() {
      return this.action_4.call$1(this.element_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_forEach__closure0: {
    "^": "Closure:115;",
    call$1: [function(_) {
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  Stream_forEach_closure0: {
    "^": "Closure:114;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_any_closure: {
    "^": "Closure;box_0,this_1,test_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 141, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_any__closure: {
    "^": "Closure:114;test_4,element_5",
    call$0: [function() {
      return this.test_4.call$1(this.element_5);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_any__closure0: {
    "^": "Closure:306;box_0,future_6",
    call$1: [function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    }, "call$1", null, 2, 0, null, 368, [], "call"],
    $isFunction: true
  },
  Stream_any_closure0: {
    "^": "Closure:114;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_length_closure: {
    "^": "Closure:115;box_0",
    call$1: [function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  Stream_length_closure0: {
    "^": "Closure:114;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure: {
    "^": "Closure:115;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:114;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, null, 245, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:114;result_2,future_3",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:114;future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_last_closure: {
    "^": "Closure;box_0,this_1",
    call$1: [function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure:114;box_0,future_2",
    call$0: [function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_elementAt_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: [function(value) {
      var t1 = this.box_0;
      if (J.$eq(t1.index_0, 0)) {
        P._cancelAndValue(t1.subscription_1, this.future_2, value);
        return;
      }
      t1.index_0 = J.$sub$n(t1.index_0, 1);
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_elementAt_closure0: {
    "^": "Closure:114;box_0,future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.RangeError("value " + H.S(this.box_0.index_0)));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  StreamSubscription: {
    "^": "Object;",
    $isStreamSubscription: true
  },
  _ControllerStream: {
    "^": "_StreamImpl;",
    _createSubscription$1: function(cancelOnError) {
      var t1, t2, t3, subscription;
      t1 = this._async$_controller;
      if ((t1._state & 4) !== 0)
        H.throwExpression(new P.StateError("Subscribing to closed stream"));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._BroadcastSubscription(null, null, null, t1, null, null, null, t2, t3, null, null), [H.getTypeArgumentByIndex(t1, 0)]);
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t3 = t1._async$_previous;
      subscription._async$_previous = t3;
      subscription._async$_next = t1;
      t3.set$_async$_next(subscription);
      t1._async$_previous = subscription;
      subscription._eventState = t1._state & 1;
      if (t1._async$_next === subscription)
        P._runGuarded(t1._onListen);
      return subscription;
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller<",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    _onPause$0: [function() {
      this.get$_async$_controller();
    }, "call$0", "get$_onPause", 0, 0, 125],
    _onResume$0: [function() {
      this.get$_async$_controller();
    }, "call$0", "get$_onResume", 0, 0, 125]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    onData$1: function(handleData) {
      this._async$_onData = this._zone.registerUnaryCallback$1(handleData);
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._onDone = this._zone.registerCallback$1(handleDone);
    },
    pause$1: function(_, resumeSignal) {
      var t1, t2, t3;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      this._state = t2;
      if (t1 < 128 && this._pending != null) {
        t3 = this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && this._pending.lastPendingEvent != null)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1, t2;
      t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 125],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 125],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      new P._BufferingStreamSubscription__sendDone_sendDone(this).call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0 && this._pending.lastPendingEvent == null) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.lastPendingEvent == null;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    $isStreamSubscription: true,
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:125;this_0,error_1,stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      if (!t2.inSameErrorZone$1($.Zone__current))
        $.Zone__current.handleUncaughtError$2(this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t3, t5);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:125;this_0",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(new P.StateError("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:114;this_0,dispatch_1",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:114;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:369;subscription_0,future_1",
    call$2: [function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }, "call$2", null, 4, 0, null, 168, [], 169, [], "call"],
    $isFunction: true
  },
  _cancelAndValue_closure: {
    "^": "Closure:114;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(0, data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(_, data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 125],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0(0);
    }, "call$0", "get$_onResume", 0, 0, 125],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 245, []],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 370, 168, [], 169, []],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 125],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _WhereStream: {
    "^": "_ForwardingStream;_test,_async$_source",
    _test$1: function(arg0) {
      return this._test.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var satisfies, e, s, exception, t1;
      satisfies = null;
      try {
        satisfies = this._test$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      if (satisfies === true)
        J._async$_add$1$x(sink, inputEvent);
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      J._async$_add$1$x(sink, outputEvent);
    }
  },
  _ExpandStream: {
    "^": "_ForwardingStream;_expand,_async$_source",
    _expand$1: function(arg0) {
      return this._expand.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var value, e, s, t1, exception;
      try {
        for (t1 = J.get$iterator$ax(this._expand$1(inputEvent)); t1.moveNext$0();) {
          value = t1.get$current();
          J._async$_add$1$x(sink, value);
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
      }

    }
  },
  _TakeStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      var t1;
      if (J.$gt$n(this._remaining, 0)) {
        sink._async$_add$1(0, inputEvent);
        t1 = J.$sub$n(this._remaining, 1);
        this._remaining = t1;
        if (J.$eq(t1, 0))
          sink._close$0();
      }
    },
    _TakeStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count)
        throw H.wrapException(new P.ArgumentError(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      if (J.$gt$n(this._remaining, 0)) {
        this._remaining = J.$sub$n(this._remaining, 1);
        return;
      }
      sink._async$_add$1(0, inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        throw H.wrapException(new P.ArgumentError(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  Timer: {
    "^": "Object;"
  },
  ZoneSpecification: {
    "^": "Object;"
  },
  _ZoneSpecification: {
    "^": "Object;handleUncaughtError<,run<,runUnary<,runBinary<,registerCallback<,registerUnaryCallback<,registerBinaryCallback<,scheduleMicrotask<,createTimer<,createPeriodicTimer,print>,fork<",
    handleUncaughtError$2: function(arg0, arg1) {
      return this.handleUncaughtError.call$2(arg0, arg1);
    },
    run$1: function(arg0) {
      return this.run.call$1(arg0);
    },
    runUnary$2: function(arg0, arg1) {
      return this.runUnary.call$2(arg0, arg1);
    },
    runBinary$3: function(arg0, arg1, arg2) {
      return this.runBinary.call$3(arg0, arg1, arg2);
    },
    registerCallback$1: function(arg0) {
      return this.registerCallback.call$1(arg0);
    },
    registerUnaryCallback$1: function(arg0) {
      return this.registerUnaryCallback.call$1(arg0);
    },
    registerBinaryCallback$1: function(arg0) {
      return this.registerBinaryCallback.call$1(arg0);
    },
    scheduleMicrotask$1: function(arg0) {
      return this.scheduleMicrotask.call$1(arg0);
    },
    scheduleMicrotask$2: function(arg0, arg1) {
      return this.scheduleMicrotask.call$2(arg0, arg1);
    },
    createTimer$2: function(arg0, arg1) {
      return this.createTimer.call$2(arg0, arg1);
    },
    print$1: function($receiver, arg0) {
      return this.print.call$1(arg0);
    },
    fork$1$specification: function(arg0) {
      return this.fork.call$1$specification(arg0);
    }
  },
  ZoneDelegate: {
    "^": "Object;"
  },
  Zone: {
    "^": "Object;"
  },
  _ZoneDelegate: {
    "^": "Object;_degelationTarget",
    get$_zone: function() {
      return this._degelationTarget;
    },
    handleUncaughtError$3: function(zone, error, stackTrace) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$handleUncaughtError() == null;)
        $parent = $parent.get$parent($parent);
      return t1.get$handleUncaughtError().call$5($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, error, stackTrace);
    },
    run$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$run() == null;)
        $parent = $parent.get$parent($parent);
      return t1.get$run().call$4($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f);
    },
    runUnary$3: function(zone, f, arg) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$runUnary() == null;)
        $parent = $parent.get$parent($parent);
      return t1.get$runUnary().call$5($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f, arg);
    },
    runBinary$4: function(zone, f, arg1, arg2) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$runBinary() == null;)
        $parent = $parent.get$parent($parent);
      return t1.get$runBinary().call$6($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f, arg1, arg2);
    },
    registerCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerCallback(), t1 == null;)
        $parent = $parent.get$parent($parent);
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f);
    },
    registerUnaryCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerUnaryCallback(), t1 == null;)
        $parent = $parent.get$parent($parent);
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f);
    },
    registerBinaryCallback$2: function(zone, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification().get$registerBinaryCallback(), t1 == null;)
        $parent = $parent.get$parent($parent);
      return t1.call$4($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, f);
    },
    scheduleMicrotask$2: function(zone, f) {
      var $parent, t1, t2;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$scheduleMicrotask() == null;)
        $parent = $parent.get$parent($parent);
      t2 = $parent.get$parent($parent);
      t1.get$scheduleMicrotask().call$4($parent, new P._ZoneDelegate(t2), zone, f);
    },
    createTimer$3: function(zone, duration, f) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$createTimer() == null;)
        $parent = $parent.get$parent($parent);
      return t1.get$createTimer().call$5($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, duration, f);
    },
    print$2: function(_, zone, line) {
      var $parent, t1;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$print(t1) == null;)
        $parent = $parent.get$parent($parent);
      t1.get$print(t1).call$4($parent, new P._ZoneDelegate($parent.get$parent($parent)), zone, line);
    },
    fork$3: function(zone, specification, zoneValues) {
      var $parent, t1, t2;
      $parent = this._degelationTarget;
      for (; t1 = $parent.get$_specification(), t1.get$fork() == null;)
        $parent = $parent.get$parent($parent);
      t2 = $parent.get$parent($parent);
      return t1.get$fork().call$5($parent, new P._ZoneDelegate(t2), zone, specification, zoneValues);
    }
  },
  _BaseZone: {
    "^": "Object;",
    inSameErrorZone$1: function(otherZone) {
      return this.get$_errorZone() === otherZone.get$_errorZone();
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    },
    bindBinaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerBinaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindBinaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindBinaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure:114;this_0,registered_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure:114;this_2,registered_3",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure:115;this_0,registered_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }, "call$1", null, 2, 0, null, 181, [], "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure:115;this_2,registered_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }, "call$1", null, 2, 0, null, 181, [], "call"],
    $isFunction: true
  },
  _BaseZone_bindBinaryCallback_closure: {
    "^": "Closure:296;this_0,registered_1",
    call$2: [function(arg1, arg2) {
      return this.this_0.runBinaryGuarded$3(this.registered_1, arg1, arg2);
    }, "call$2", null, 4, 0, null, 59, [], 60, [], "call"],
    $isFunction: true
  },
  _BaseZone_bindBinaryCallback_closure0: {
    "^": "Closure:296;this_2,registered_3",
    call$2: [function(arg1, arg2) {
      return this.this_2.runBinary$3(this.registered_3, arg1, arg2);
    }, "call$2", null, 4, 0, null, 59, [], 60, [], "call"],
    $isFunction: true
  },
  _CustomizedZone: {
    "^": "_BaseZone;parent>,_specification<,_async$_map",
    get$_errorZone: function() {
      return this.parent.get$_errorZone();
    },
    $index: function(_, key) {
      var t1, result;
      t1 = this._async$_map;
      result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      return this.parent.$index(0, key);
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return new P._ZoneDelegate(this).handleUncaughtError$3(this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return new P._ZoneDelegate(this).fork$3(this, specification, zoneValues);
    },
    fork$1$specification: function(specification) {
      return this.fork$2$specification$zoneValues(specification, null);
    },
    run$1: function(f) {
      return new P._ZoneDelegate(this).run$2(this, f);
    },
    runUnary$2: function(f, arg) {
      return new P._ZoneDelegate(this).runUnary$3(this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return new P._ZoneDelegate(this).runBinary$4(this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerCallback$2(this, f);
    },
    registerUnaryCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerUnaryCallback$2(this, f);
    },
    registerBinaryCallback$1: function(f) {
      return new P._ZoneDelegate(this).registerBinaryCallback$2(this, f);
    },
    scheduleMicrotask$1: function(f) {
      new P._ZoneDelegate(this).scheduleMicrotask$2(this, f);
    },
    createTimer$2: function(duration, f) {
      return new P._ZoneDelegate(this).createTimer$3(this, duration, f);
    },
    print$1: function(_, line) {
      new P._ZoneDelegate(this).print$2(0, this, line);
    }
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:114;error_0,stackTrace_1",
    call$0: [function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure:114;error_2,stackTrace_3",
    call$0: [function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _rootFork_closure: {
    "^": "Closure:296;copiedMap_0",
    call$2: [function(key, value) {
      this.copiedMap_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  _RootZoneSpecification: {
    "^": "Object;",
    get$handleUncaughtError: function() {
      return P._rootHandleUncaughtError$closure();
    },
    handleUncaughtError$2: function(arg0, arg1) {
      return this.get$handleUncaughtError().call$2(arg0, arg1);
    },
    get$run: function() {
      return P._rootRun$closure();
    },
    run$1: function(arg0) {
      return this.get$run().call$1(arg0);
    },
    get$runUnary: function() {
      return P._rootRunUnary$closure();
    },
    runUnary$2: function(arg0, arg1) {
      return this.get$runUnary().call$2(arg0, arg1);
    },
    get$runBinary: function() {
      return P._rootRunBinary$closure();
    },
    runBinary$3: function(arg0, arg1, arg2) {
      return this.get$runBinary().call$3(arg0, arg1, arg2);
    },
    get$registerCallback: function() {
      return P._rootRegisterCallback$closure();
    },
    registerCallback$1: function(arg0) {
      return this.get$registerCallback().call$1(arg0);
    },
    get$registerUnaryCallback: function() {
      return P._rootRegisterUnaryCallback$closure();
    },
    registerUnaryCallback$1: function(arg0) {
      return this.get$registerUnaryCallback().call$1(arg0);
    },
    get$registerBinaryCallback: function() {
      return P._rootRegisterBinaryCallback$closure();
    },
    registerBinaryCallback$1: function(arg0) {
      return this.get$registerBinaryCallback().call$1(arg0);
    },
    get$scheduleMicrotask: function() {
      return P._rootScheduleMicrotask$closure();
    },
    scheduleMicrotask$1: function(arg0) {
      return this.get$scheduleMicrotask().call$1(arg0);
    },
    scheduleMicrotask$2: function(arg0, arg1) {
      return this.get$scheduleMicrotask().call$2(arg0, arg1);
    },
    get$createTimer: function() {
      return P._rootCreateTimer$closure();
    },
    createTimer$2: function(arg0, arg1) {
      return this.get$createTimer().call$2(arg0, arg1);
    },
    get$print: function(_) {
      return P._rootPrint$closure();
    },
    print$1: function($receiver, arg0) {
      return this.get$print(this).call$1(arg0);
    },
    get$fork: function() {
      return P._rootFork$closure();
    },
    fork$1$specification: function(arg0) {
      return this.get$fork().call$1$specification(arg0);
    }
  },
  _RootZone: {
    "^": "_BaseZone;",
    get$parent: function(_) {
      return;
    },
    get$_specification: function() {
      return C.C__RootZoneSpecification;
    },
    get$_errorZone: function() {
      return this;
    },
    inSameErrorZone$1: function(otherZone) {
      return otherZone.get$_errorZone() === this;
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(this, null, this, specification, zoneValues);
    },
    fork$1$specification: function(specification) {
      return this.fork$2$specification$zoneValues(specification, null);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    },
    registerBinaryCallback$1: function(f) {
      return f;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(this, null, this, f);
    },
    createTimer$2: function(duration, f) {
      return P._rootCreateTimer(this, null, this, duration, f);
    },
    print$1: function(_, line) {
      H.printString(line);
      return;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 195, 117, [], 196, []],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 197, 117, []],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1;
    if (equals == null) {
      t1 = new P._HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$K, $V];
      return t1;
    }
    hashCode = P._defaultHashCode$closure();
    return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
  },
  HashMap_HashMap$identity: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: [function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  }, "call$1", "_iterableToString$closure", 2, 0, null, 126, []],
  _iterablePartsToStrings: [function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t1, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
              if (typeof t1 !== "number")
                return H.iae(t1);
              $length -= t1;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      t1 = J.$add$ns(J.get$length$asx(parts.pop()), 2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      $length -= t1;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  }, "call$2", "_iterablePartsToStrings$closure", 4, 0, null, 126, [], 198, []],
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: [function(m) {
    var t1, result, i, t2, t3;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i) {
      t2 = t2[i];
      t3 = m;
      if (t2 == null ? t3 == null : t2 === t3)
        return "{...}";
    }
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  }, "call$1", "Maps_mapToString$closure", 2, 0, null, 199, []],
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    containsValue$1: function(value) {
      var t1 = this._computeKeys$0();
      t1.toString;
      return H.IterableMixinWorkaround_any(t1, new P._HashMap_containsValue_closure(this, value));
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return bucket.splice(index, 2)[1];
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        this._collection$_length = this._collection$_length - 1;
        this._keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__getTableEntry: [function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, "call$2", "_HashMap__getTableEntry$closure", 4, 0, null, 194, [], 48, []], _HashMap__setTableEntry: [function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, "call$3", "_HashMap__setTableEntry$closure", 6, 0, null, 194, [], 48, [], 30, []], _HashMap__newHashTable: [function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }, "call$0", "_HashMap__newHashTable$closure", 0, 0, null]}
  },
  _HashMap_values_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 371, [], "call"],
    $isFunction: true
  },
  _HashMap_containsValue_closure: {
    "^": "Closure:115;this_0,value_1",
    call$1: [function(each) {
      return J.$eq(this.this_0.$index(0, each), this.value_1);
    }, "call$1", null, 2, 0, null, 371, [], "call"],
    $isFunction: true
  },
  _HashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_HashMap");
    }
  },
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length,_strings,_nums,_rest,_keys",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _CustomHashMap: {
    "^": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_keys",
    _equals$2: function(arg0, arg1) {
      return this._equals.call$2(arg0, arg1);
    },
    _hashCode$1: function(arg0) {
      return this._hashCode.call$1(arg0);
    },
    _validKey$1: function(arg0) {
      return this._validKey.call$1(arg0);
    },
    $index: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype.$index.call(this, this, key);
    },
    containsKey$1: function(key) {
      if (this._validKey$1(key) !== true)
        return false;
      return P._HashMap.prototype.containsKey$1.call(this, key);
    },
    remove$1: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype.remove$1.call(this, this, key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode$1(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (this._equals$2(bucket[i], key) === true)
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    static: {_CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
        var t1 = new P._CustomHashMap_closure($K);
        return H.setRuntimeTypeInfo(new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null), [$K, $V]);
      }}
  },
  _CustomHashMap_closure: {
    "^": "Closure:115;K_0",
    call$1: [function(v) {
      var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
      return t1;
    }, "call$1", null, 2, 0, null, 121, [], "call"],
    $isFunction: true
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums, rest;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    containsValue$1: function(value) {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]).any$1(0, new P._LinkedHashMap_containsValue_closure(this, value));
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_collection$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_collection$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_collection$_value();
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_collection$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isLinkedHashMap: true,
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: [function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }, "call$0", "_LinkedHashMap__newHashTable$closure", 0, 0, null]}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 371, [], "call"],
    $isFunction: true
  },
  _LinkedHashMap_containsValue_closure: {
    "^": "Closure:115;this_0,value_1",
    call$1: [function(each) {
      return J.$eq(this.this_0.$index(0, each), this.value_1);
    }, "call$1", null, 2, 0, null, 371, [], "call"],
    $isFunction: true
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V0", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;",
    get$iterator: function(_) {
      var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [element];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(element);
        }
        this._collection$_length = this._collection$_length + 1;
        this._elements = null;
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        bucket.splice(index, 1);
        return true;
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._elements = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        this._collection$_length = this._collection$_length - 1;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(this, this._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_collection$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(new P.StateError("No elements"));
      return t1.get$_collection$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else {
        rest = this._rest;
        if (rest == null)
          return false;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      }
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  UnmodifiableListView: {
    "^": "UnmodifiableListBase;_collection$_source",
    get$length: function(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index: function(_, index) {
      return J.elementAt$1$ax(this._collection$_source, index);
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isSet: true,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  IterableBase: {
    "^": "Object;",
    map$1: [function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E1", ret: P.Iterable, args: [{func: "dynamic__E1", args: [E]}]};
      }, this.$receiver, "IterableBase");
    }, 127, []],
    where$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(this, f), [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    },
    expand$1: [function(_, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(this, f), [H.getRuntimeTypeArgument(this, "IterableBase", 0), null]);
    }, "call$1", "get$expand", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__Iterable__E0", ret: P.Iterable, args: [{func: "Iterable__E0", ret: P.Iterable, args: [E]}]};
      }, this.$receiver, "IterableBase");
    }, 127, []],
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "")
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        } while (iterator.moveNext$0());
      else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer._contents = buffer._contents + separator;
          t1 = H.S(iterator.get$current());
          buffer._contents = buffer._contents + t1;
        }
      }
      return buffer._contents;
    },
    any$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (f.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    take$1: function(_, n) {
      return H.TakeIterable_TakeIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(new P.StateError("No elements"));
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element) === true)
          return element;
      }
      throw H.wrapException(new P.StateError("No matching element"));
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    },
    $isIterable: true,
    $asIterable: null
  },
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return J.$eq(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$last: function(receiver) {
      if (J.$eq(this.get$length(receiver), 0))
        throw H.wrapException(new P.StateError("No elements"));
      return this.$index(receiver, J.$sub$n(this.get$length(receiver), 1));
    },
    contains$1: function(receiver, element) {
      var $length, t1, i, t2;
      $length = this.get$length(receiver);
      t1 = J.getInterceptor($length);
      i = 0;
      while (true) {
        t2 = this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if (!t1.$eq($length, this.get$length(receiver)))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
        ++i;
      }
      return false;
    },
    any$1: function(receiver, test) {
      var $length, i;
      $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)) === true)
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1: function(receiver, separator) {
      var buffer;
      if (J.$eq(this.get$length(receiver), 0))
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer._contents;
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    map$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    }, "call$1", "get$map", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__dynamic__E2", ret: P.Iterable, args: [{func: "dynamic__E2", args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 127, []],
    expand$1: [function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.ExpandIterable(receiver, f), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0), null]);
    }, "call$1", "get$expand", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "Iterable__Iterable__E1", ret: P.Iterable, args: [{func: "Iterable__E1", ret: P.Iterable, args: [E]}]};
      }, this.$receiver, "ListMixin");
    }, 127, []],
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, J.$add$ns(t1, 1));
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var t1, element, t2;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        t2 = this.get$length(receiver);
        this.set$length(receiver, J.$add$ns(t2, 1));
        this.$indexSet(receiver, t2, element);
      }
    },
    remove$1: function(receiver, element) {
      var i, t1;
      i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, J.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
          this.set$length(receiver, J.$sub$n(this.get$length(receiver), 1));
          return true;
        }
        ++i;
      }
      return false;
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    sort$1: function(receiver, compare) {
      if (compare == null)
        compare = P.Comparable_compare$closure();
      H.Sort__doSort(receiver, 0, J.$sub$n(this.get$length(receiver), 1), compare);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      end = this.get$length(receiver);
      this._rangeCheck$2(receiver, start, end);
      $length = J.$sub$n(end, start);
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2: function(receiver, start, end) {
      this._rangeCheck$2(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    removeRange$2: function(receiver, start, end) {
      var $length;
      this._rangeCheck$2(receiver, start, end);
      $length = end - start;
      this.setRange$4(receiver, start, J.$sub$n(this.get$length(receiver), $length), receiver, end);
      this.set$length(receiver, J.$sub$n(this.get$length(receiver), $length));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = t1.$sub(end, start);
      if (J.$eq($length, 0))
        return;
      if (skipCount < 0)
        throw H.wrapException(new P.ArgumentError(skipCount));
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t1.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      if (typeof $length !== "number")
        return H.iae($length);
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(new P.StateError("Not enough elements"));
      if (typeof start !== "number")
        return H.iae(start);
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    indexOf$2: function(receiver, element, startIndex) {
      var t1, i;
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (startIndex >= t1)
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      i = startIndex;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq(this.$index(receiver, i), element))
          return i;
        ++i;
      }
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i, t1;
      startIndex = J.$sub$n(this.get$length(receiver), 1);
      for (i = startIndex; t1 = J.getInterceptor$n(i), t1.$ge(i, 0); i = t1.$sub(i, 1))
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    insert$2: function(receiver, index, element) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = index > t1;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(receiver)));
      if (index === this.get$length(receiver)) {
        this.add$1(receiver, element);
        return;
      }
      this.set$length(receiver, J.$add$ns(this.get$length(receiver), 1));
      this.setRange$4(receiver, index + 1, this.get$length(receiver), receiver, index);
      this.$indexSet(receiver, index, element);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength;
      if (index >= 0) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = index > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(receiver)));
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isEfficientLength)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      this.set$length(receiver, J.$add$ns(this.get$length(receiver), insertionLength));
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      this.setRange$4(receiver, index + insertionLength, this.get$length(receiver), receiver, index);
      this.setAll$2(receiver, index, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, index0;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isList) {
        t1 = t1.get$length(iterable);
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.setRange$3(receiver, index, index + t1, iterable);
      } else
        for (t1 = t1.get$iterator(iterable); t1.moveNext$0(); index = index0) {
          index0 = index + 1;
          this.$indexSet(receiver, index, t1.get$current());
        }
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Maps_mapToString_closure: {
    "^": "Closure:296;box_0,result_1",
    call$2: [function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }, "call$2", null, 4, 0, null, 372, [], 121, [], "call"],
    $isFunction: true
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return J.$and$n(J.$sub$n(this._tail, this._head), this._table.length - 1);
    },
    get$last: function(_) {
      var t1, t2;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(new P.StateError("No elements"));
      t1 = this._table;
      t2 = J.$and$n(J.$sub$n(t2, 1), this._table.length - 1);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$gt(index, this.get$length(this)))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      t1 = this._table;
      t2 = this._head;
      if (typeof index !== "number")
        return H.iae(index);
      t3 = t1.length;
      t2 = (t2 + index & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(0, element);
    },
    addAll$1: function(_, elements) {
      var t1, addCount, $length, t2, t3, newCapacity, newTable, endSpace, preSpace;
      t1 = J.getInterceptor(elements);
      if (!!t1.$isList) {
        addCount = t1.get$length(elements);
        $length = this.get$length(this);
        if (typeof addCount !== "number")
          return H.iae(addCount);
        t1 = $length + addCount;
        t2 = this._table;
        t3 = t2.length;
        if (t1 >= t3) {
          newCapacity = P.ListQueue__nextPowerOf2(t1);
          if (typeof newCapacity !== "number")
            return H.iae(newCapacity);
          t2 = Array(newCapacity);
          t2.fixed$length = init;
          newTable = H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(this, 0)]);
          this._tail = this._writeToList$1(newTable);
          this._table = newTable;
          this._head = 0;
          H.IterableMixinWorkaround_setRangeList(newTable, $length, t1, elements, 0);
          this._tail = J.$add$ns(this._tail, addCount);
        } else {
          t1 = this._tail;
          if (typeof t1 !== "number")
            return H.iae(t1);
          endSpace = t3 - t1;
          if (addCount < endSpace) {
            H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + addCount, elements, 0);
            this._tail = J.$add$ns(this._tail, addCount);
          } else {
            preSpace = addCount - endSpace;
            H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + endSpace, elements, 0);
            t1 = this._table;
            H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
            this._tail = preSpace;
          }
        }
        this._modificationCount = this._modificationCount + 1;
      } else
        for (t1 = t1.get$iterator(elements); t1.moveNext$0();)
          this._add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(i);
          this._modificationCount = this._modificationCount + 1;
          return true;
        }
      }
      return false;
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        this._modificationCount = this._modificationCount + 1;
      }
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    _add$1: function(_, element) {
      var t1, t2;
      t1 = this._table;
      t2 = this._tail;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t2 = (t2 + 1 & this._table.length - 1) >>> 0;
      this._tail = t2;
      if (this._head === t2)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    _remove$1: function(offset) {
      var mask, t1, t2, t3, i, prevOffset, t4, nextOffset;
      mask = this._table.length - 1;
      if ((offset - this._head & mask) >>> 0 < J.$and$n(J.$sub$n(this._tail, offset), mask)) {
        for (t1 = this._head, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t3)
            return H.ioore(t2, prevOffset);
          t4 = t2[prevOffset];
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = t4;
        }
        if (t1 >= t3)
          return H.ioore(t2, t1);
        t2[t1] = null;
        this._head = (t1 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t1 = J.$and$n(J.$sub$n(this._tail, 1), mask);
        this._tail = t1;
        for (t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t3)
            return H.ioore(t2, nextOffset);
          t4 = t2[nextOffset];
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = t4;
        }
        if (t1 >= t3)
          return H.ioore(t2, t1);
        t2[t1] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 <= t2) {
        $length = t2 - t1;
        t1 = this._table;
        t2 = this._head;
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t1, t2);
        return $length;
      } else {
        t2 = this._table;
        firstPartSize = t2.length - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t2, t1);
        t1 = this._tail;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return J.$add$ns(this._tail, firstPartSize);
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }, ListQueue__nextPowerOf2: [function(number) {
        var nextNumber;
        if (typeof number !== "number")
          return number.$shl();
        number = (number << 2 >>> 0) - 1;
        for (; true; number = nextNumber) {
          nextNumber = (number & number - 1) >>> 0;
          if (nextNumber === 0)
            return number;
        }
      }, "call$1", "ListQueue__nextPowerOf2$closure", 2, 0, null, 200, []]}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  _SplayTreeNode: {
    "^": "Object;key>,left>,right>",
    $is_SplayTreeNode: true
  },
  _SplayTreeMapNode: {
    "^": "_SplayTreeNode;value*,key,left,right",
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  },
  _SplayTree: {
    "^": "Object;",
    _splay$1: function(key) {
      var current, left, right, left0, comp, t1, tmp, current0;
      current = this._root;
      if (current == null)
        return -1;
      left = this._dummy;
      for (right = left, left0 = right, comp = null; true;) {
        comp = this._compare$2(current.key, key);
        t1 = J.getInterceptor$n(comp);
        if (t1.$gt(comp, 0)) {
          t1 = current.left;
          if (t1 == null)
            break;
          comp = this._compare$2(t1.key, key);
          if (J.$gt$n(comp, 0)) {
            tmp = current.left;
            current.left = tmp.right;
            tmp.right = current;
            if (tmp.left == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.left = current;
          current0 = current.left;
          right = current;
          current = current0;
        } else {
          if (t1.$lt(comp, 0)) {
            t1 = current.right;
            if (t1 == null)
              break;
            comp = this._compare$2(t1.key, key);
            if (J.$lt$n(comp, 0)) {
              tmp = current.right;
              current.right = tmp.left;
              tmp.left = current;
              if (tmp.right == null) {
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.right = current;
            current0 = current.right;
          } else
            break;
          left0 = current;
          current = current0;
        }
      }
      left0.right = current.left;
      right.left = current.right;
      current.left = left.right;
      current.right = left.left;
      this._root = current;
      left.right = null;
      left.left = null;
      this._splayCount = this._splayCount + 1;
      return comp;
    },
    _splayMax$1: function(node) {
      var current, current0;
      for (current = node; current0 = current.right, current0 != null; current = current0) {
        current.right = current0.left;
        current0.left = current;
      }
      return current;
    },
    _remove$1: function(key) {
      var result, t1, right;
      if (this._root == null)
        return;
      if (!J.$eq(this._splay$1(key), 0))
        return;
      result = this._root;
      this._count = this._count - 1;
      t1 = result.left;
      if (t1 == null)
        this._root = result.right;
      else {
        right = result.right;
        t1 = this._splayMax$1(t1);
        this._root = t1;
        t1.right = right;
      }
      this._modificationCount = this._modificationCount + 1;
      return result;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, t2;
      this._count = this._count + 1;
      this._modificationCount = this._modificationCount + 1;
      if (this._root == null) {
        this._root = node;
        return;
      }
      t1 = J.$lt$n(comp, 0);
      t2 = this._root;
      if (t1) {
        node.left = t2;
        node.right = t2.right;
        t2.right = null;
      } else {
        node.right = t2;
        node.left = t2.left;
        t2.left = null;
      }
      this._root = node;
    }
  },
  SplayTreeMap: {
    "^": "_SplayTree;_comparator,_validKey,_root,_dummy,_count,_modificationCount,_splayCount",
    _comparator$2: function(arg0, arg1) {
      return this._comparator.call$2(arg0, arg1);
    },
    _validKey$1: function(arg0) {
      return this._validKey.call$1(arg0);
    },
    _compare$2: function(key1, key2) {
      return this._comparator$2(key1, key2);
    },
    $index: function(_, key) {
      if (key == null)
        throw H.wrapException(new P.ArgumentError(key));
      if (this._validKey$1(key) !== true)
        return;
      if (this._root != null)
        if (J.$eq(this._splay$1(key), 0))
          return this._root.value;
      return;
    },
    remove$1: function(_, key) {
      var mapRoot;
      if (this._validKey$1(key) !== true)
        return;
      mapRoot = this._remove$1(key);
      if (mapRoot != null)
        return mapRoot.value;
      return;
    },
    $indexSet: function(_, key, value) {
      var comp;
      if (key == null)
        throw H.wrapException(new P.ArgumentError(key));
      comp = this._splay$1(key);
      if (J.$eq(comp, 0)) {
        this._root.value = value;
        return;
      }
      this._addNewRoot$2(H.setRuntimeTypeInfo(new P._SplayTreeMapNode(value, key, null, null), [null, null]), comp);
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P.SplayTreeMap_addAll_closure(this));
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    get$isNotEmpty: function(_) {
      return this._root != null;
    },
    forEach$1: function(_, f) {
      var t1, nodes, node;
      t1 = H.getTypeArgumentByIndex(this, 0);
      nodes = H.setRuntimeTypeInfo(new P._SplayTreeNodeIterator(this, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), this._modificationCount, this._splayCount, null), [t1]);
      nodes._SplayTreeIterator$1(this, [P._SplayTreeNode, t1]);
      for (; nodes.moveNext$0();) {
        node = nodes.get$current();
        t1 = J.getInterceptor$x(node);
        f.call$2(t1.get$key(node), t1.get$value(node));
      }
    },
    get$length: function(_) {
      return this._count;
    },
    clear$0: function(_) {
      this._root = null;
      this._count = 0;
      this._modificationCount = this._modificationCount + 1;
    },
    containsKey$1: function(key) {
      return this._validKey$1(key) === true && J.$eq(this._splay$1(key), 0);
    },
    containsValue$1: function(value) {
      return new P.SplayTreeMap_containsValue_visit(this, value, this._splayCount).call$1(this._root);
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P._SplayTreeKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var t1 = new P._SplayTreeValueIterable(this);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isSplayTreeMap: true,
    $as_SplayTree: function($K, $V) {
      return [$K];
    },
    $asMap: null,
    $isMap: true,
    static: {SplayTreeMap$: function(compare, isValidKey, $K, $V) {
        var t1, t2;
        t1 = P.Comparable_compare$closure();
        t2 = new P.SplayTreeMap_closure($K);
        return H.setRuntimeTypeInfo(new P.SplayTreeMap(t1, t2, null, H.setRuntimeTypeInfo(new P._SplayTreeNode(null, null, null), [$K]), 0, 0, 0), [$K, $V]);
      }}
  },
  SplayTreeMap_closure: {
    "^": "Closure:115;K_0",
    call$1: [function(v) {
      var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
      return t1;
    }, "call$1", null, 2, 0, null, 121, [], "call"],
    $isFunction: true
  },
  SplayTreeMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V1", args: [K, V]};
      }, this.this_0, "SplayTreeMap");
    }
  },
  SplayTreeMap_containsValue_visit: {
    "^": "Closure:373;this_0,value_1,initialSplayCount_2",
    call$1: [function(node) {
      var t1, t2, t3, t4;
      for (t1 = this.initialSplayCount_2, t2 = this.this_0, t3 = this.value_1; node != null;) {
        if (J.$eq(node.value, t3))
          return true;
        if (t1 !== t2._splayCount)
          throw H.wrapException(P.ConcurrentModificationError$(t2));
        t4 = node.right;
        if (t4 != null && this.call$1(t4) === true)
          return true;
        node = node.left;
      }
      return false;
    }, "call$1", null, 2, 0, null, 269, [], "call"],
    $isFunction: true
  },
  _SplayTreeIterator: {
    "^": "Object;",
    get$current: function() {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return this._getValue$1(t1);
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      for (t1 = this._workList; node != null;) {
        t1.push(node);
        node = J.get$left$x(node);
      }
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._tree;
      if (this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this._workList;
      if (t2.length === 0) {
        this._currentNode = null;
        return false;
      }
      if (t1._splayCount !== this._splayCount && this._currentNode != null) {
        t3 = this._currentNode;
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          this._findLeftMostDescendent$1(t1._root);
        else {
          t1._splay$1(J.get$key$x(t3));
          this._findLeftMostDescendent$1(t1._root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1 = t2.pop();
      this._currentNode = t1;
      this._findLeftMostDescendent$1(J.get$right$x(t1));
      return true;
    },
    _SplayTreeIterator$1: function(tree, $T) {
      this._findLeftMostDescendent$1(tree._root);
    }
  },
  _SplayTreeKeyIterable: {
    "^": "IterableBase;_tree",
    get$length: function(_) {
      return this._tree._count;
    },
    get$isEmpty: function(_) {
      return this._tree._count === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._tree;
      t2 = new P._SplayTreeKeyIterator(t1, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), t1._modificationCount, t1._splayCount, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._SplayTreeIterator$1(t1, H.getTypeArgumentByIndex(this, 0));
      return t2;
    },
    $isEfficientLength: true
  },
  _SplayTreeValueIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._count;
    },
    get$isEmpty: function(_) {
      return this._map._count === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P._SplayTreeValueIterator(t1, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), t1._modificationCount, t1._splayCount, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._SplayTreeIterator$1(t1, H.getTypeArgumentByIndex(this, 1));
      return t2;
    },
    $asIterableBase: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isEfficientLength: true
  },
  _SplayTreeKeyIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return J.get$key$x(node);
    }
  },
  _SplayTreeValueIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return J.get$value$x(node);
    },
    $as_SplayTreeIterator: function($K, $V) {
      return [$V];
    }
  },
  _SplayTreeNodeIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return node;
    },
    $as_SplayTreeIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDart: [function(json, reviver) {
    var revive = reviver == null ? new P._convertJsonToDart_closure() : reviver;
    return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
  }, "call$2", "_convertJsonToDart$closure", 4, 0, null, 201, [], 202, []],
  _parseJson: [function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(new P.ArgumentError(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e)));
    }

    return P._convertJsonToDart(parsed, reviver);
  }, "call$2", "_parseJson$closure", 4, 0, null, 33, [], 202, []],
  _defaultToEncodable: [function(object) {
    return object.toJson$0();
  }, "call$1", "_defaultToEncodable$closure", 2, 0, 203, 6, []],
  _convertJsonToDart_closure: {
    "^": "Closure:296;",
    call$2: [function(key, value) {
      return value;
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  _convertJsonToDart_walk: {
    "^": "Closure:115;revive_0",
    call$1: [function(e) {
      var list, t1, i, keys, map, key, proto;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        list = e;
        for (t1 = this.revive_0, i = 0; i < list.length; ++i)
          list[i] = t1.call$2(i, this.call$1(list[i]));
        return list;
      }
      keys = Object.keys(e);
      map = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
        key = keys[i];
        map.$indexSet(0, key, t1.call$2(key, this.call$1(e[key])));
      }
      proto = e.__proto__;
      if (typeof proto !== "undefined" && proto !== Object.prototype)
        map.$indexSet(0, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
      return map;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;",
    $asCodec: function() {
      return [J.JSString, [J.JSArray, J.JSInt]];
    }
  },
  JsonUnsupportedObjectError: {
    "^": "Error;unsupportedObject,cause",
    toString$0: function(_) {
      if (this.cause != null)
        return "Converting object to an encodable object failed.";
      else
        return "Converting object did not return an encodable object.";
    },
    static: {JsonUnsupportedObjectError$: function(unsupportedObject, cause) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
      }}
  },
  JsonCyclicError: {
    "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    },
    static: {JsonCyclicError$: function(object) {
        return new P.JsonCyclicError(object, null);
      }}
  },
  JsonCodec: {
    "^": "Codec;_reviver<,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      return P._JsonStringifier_stringify(value, this.get$encoder()._toEncodableFunction);
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, J.JSString];
    }
  },
  JsonEncoder: {
    "^": "Converter;_toEncodableFunction",
    $asConverter: function() {
      return [P.Object, J.JSString];
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver<",
    $asConverter: function() {
      return [J.JSString, P.Object];
    }
  },
  _JsonStringifier: {
    "^": "Object;_toEncodable,_sink,_seen",
    _toEncodable$1: function(arg0) {
      return this._toEncodable.call$1(arg0);
    },
    escape$1: function(s) {
      var t1, $length, t2, offset, i, charCode, t3, charCodes, str;
      t1 = J.getInterceptor$asx(s);
      $length = t1.get$length(s);
      if (typeof $length !== "number")
        return H.iae($length);
      t2 = this._sink;
      offset = 0;
      i = 0;
      for (; i < $length; ++i) {
        charCode = t1.codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset) {
            t3 = t1.substring$2(s, offset, i);
            t2._contents = t2._contents + t3;
          }
          offset = i + 1;
          charCodes = P.List_List$filled(1, 92, J.JSInt);
          t3 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t3;
          switch (charCode) {
            case 8:
              charCodes = P.List_List$filled(1, 98, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 9:
              charCodes = P.List_List$filled(1, 116, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 10:
              charCodes = P.List_List$filled(1, 110, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 12:
              charCodes = P.List_List$filled(1, 102, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            case 13:
              charCodes = P.List_List$filled(1, 114, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
            default:
              charCodes = P.List_List$filled(1, 117, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              charCodes = P.List_List$filled(1, 48, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              charCodes = P.List_List$filled(1, 48, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              t3 = charCode >>> 4 & 15;
              t3 = t3 < 10 ? 48 + t3 : 87 + t3;
              charCodes = P.List_List$filled(1, t3, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              t3 = charCode & 15;
              t3 = t3 < 10 ? 48 + t3 : 87 + t3;
              charCodes = P.List_List$filled(1, t3, J.JSInt);
              t3 = H.Primitives_stringFromCharCodes(charCodes);
              t2._contents = t2._contents + t3;
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset) {
            t3 = t1.substring$2(s, offset, i);
            t2._contents = t2._contents + t3;
          }
          offset = i + 1;
          charCodes = P.List_List$filled(1, 92, J.JSInt);
          t3 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t3;
          charCodes = P.List_List$filled(1, charCode, J.JSInt);
          t3 = H.Primitives_stringFromCharCodes(charCodes);
          t2._contents = t2._contents + t3;
        }
      }
      if (offset === 0) {
        str = typeof s === "string" ? s : H.S(s);
        t2._contents = t2._contents + str;
      } else if (offset < $length) {
        t1 = t1.substring$2(s, offset, $length);
        t2._contents = t2._contents + t1;
      }
    },
    checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
      }
      t1.push(object);
    },
    stringifyValue$1: function(object) {
      var customJson, e, t1, exception;
      if (!this.stringifyJsonValue$1(object)) {
        this.checkCycle$1(object);
        try {
          customJson = this._toEncodable$1(object);
          if (!this.stringifyJsonValue$1(customJson)) {
            t1 = P.JsonUnsupportedObjectError$(object, null);
            throw H.wrapException(t1);
          }
          t1 = this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1.pop();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
        }

      }
    },
    stringifyJsonValue$1: function(object) {
      var t1, t2, i, t3, separator, key;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        this._sink.write$1(C.JSNumber_methods.toString$0(object));
        return true;
      } else if (object === true) {
        this._sink.write$1("true");
        return true;
      } else if (object === false) {
        this._sink.write$1("false");
        return true;
      } else if (object == null) {
        this._sink.write$1("null");
        return true;
      } else if (typeof object === "string") {
        t1 = this._sink;
        t1.write$1("\"");
        this.escape$1(object);
        t1.write$1("\"");
        return true;
      } else {
        t1 = J.getInterceptor(object);
        if (!!t1.$isList) {
          this.checkCycle$1(object);
          t2 = this._sink;
          t2.write$1("[");
          if (J.$gt$n(t1.get$length(object), 0)) {
            this.stringifyValue$1(t1.$index(object, 0));
            i = 1;
            while (true) {
              t3 = t1.get$length(object);
              if (typeof t3 !== "number")
                return H.iae(t3);
              if (!(i < t3))
                break;
              t2._contents = t2._contents + ",";
              this.stringifyValue$1(t1.$index(object, i));
              ++i;
            }
          }
          t2.write$1("]");
          this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          this.checkCycle$1(object);
          t2 = this._sink;
          t2.write$1("{");
          for (t3 = J.get$iterator$ax(object.get$keys()), separator = "\""; t3.moveNext$0(); separator = ",\"") {
            key = t3.get$current();
            t2._contents = t2._contents + separator;
            this.escape$1(key);
            t2._contents = t2._contents + "\":";
            this.stringifyValue$1(t1.$index(object, key));
          }
          t2.write$1("}");
          this._removeSeen$1(object);
          return true;
        } else
          return false;
      }
    },
    _removeSeen$1: function(object) {
      var t1 = this._seen;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    },
    static: {"^": "_JsonStringifier_BACKSPACE,_JsonStringifier_TAB,_JsonStringifier_NEWLINE,_JsonStringifier_CARRIAGE_RETURN,_JsonStringifier_FORM_FEED,_JsonStringifier_QUOTE,_JsonStringifier_CHAR_0,_JsonStringifier_BACKSLASH,_JsonStringifier_CHAR_b,_JsonStringifier_CHAR_f,_JsonStringifier_CHAR_n,_JsonStringifier_CHAR_r,_JsonStringifier_CHAR_t,_JsonStringifier_CHAR_u", _JsonStringifier_stringify: [function(object, toEncodable) {
        var output;
        toEncodable = P._defaultToEncodable$closure();
        output = P.StringBuffer$("");
        new P._JsonStringifier(toEncodable, output, []).stringifyValue$1(object);
        return output._contents;
      }, "call$2", "_JsonStringifier_stringify$closure", 4, 0, null, 6, [], 204, []]}
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder;
      t1 = J.getInterceptor$asx(string);
      t2 = J.$mul$ns(t1.get$length(string), 3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = H.setRuntimeTypeInfo(Array(t2), [J.JSInt]);
      encoder = new P._Utf8Encoder(0, 0, t2);
      if (encoder._fillBuffer$3(string, 0, t1.get$length(string)) !== t1.get$length(string))
        encoder._writeSurrogate$2(t1.codeUnitAt$1(string, J.$sub$n(t1.get$length(string), 1)), 0);
      return C.JSArray_methods.sublist$2(t2, 0, encoder._bufferIndex);
    },
    $asConverter: function() {
      return [J.JSString, [J.JSArray, J.JSInt]];
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
        end = J.$sub$n(end, 1);
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: [function(namedArguments) {
    return;
  }, "call$1", "Function__toMangledNames$closure", 2, 0, null, 50, []],
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 205, 117, [], 196, []],
  Error_safeToString: [function(object) {
    var buffer, t1, i, t2, codeUnit, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10) {
            t2 = buffer._contents + "\\n";
            buffer._contents = t2;
          } else if (codeUnit === 13) {
            t2 = buffer._contents + "\\r";
            buffer._contents = t2;
          } else if (codeUnit === 9) {
            t2 = buffer._contents + "\\t";
            buffer._contents = t2;
          } else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            t2 = buffer._contents + t2;
            buffer._contents = t2;
          }
        else if (codeUnit === 92) {
          t2 = buffer._contents + "\\\\";
          buffer._contents = t2;
        } else if (codeUnit === 34) {
          t2 = buffer._contents + "\\\"";
          buffer._contents = t2;
        } else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t2 = buffer._contents + t2;
          buffer._contents = t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  }, "call$1", "Error_safeToString$closure", 2, 0, null, 6, []],
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 208, 117, [], 196, []],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 209, 6, []],
  int_parse: [function(source, onError, radix) {
    return H.Primitives_parseInt(source, radix, onError);
  }, function(source) {
    return P.int_parse(source, null, null);
  }, null, function(source, onError) {
    return P.int_parse(source, onError, null);
  }, null, "call$3$onError$radix", "call$1", "call$2$onError", "int_parse$closure", 2, 5, 210, 84, 84, 33, [], 34, [], 172, []],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && fill != null)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: [function(object) {
    var line, t1;
    line = H.S(object);
    t1 = $.printToZone;
    if (t1 == null)
      H.printString(line);
    else
      t1.call$1(line);
  }, "call$1", "print$closure", 2, 0, null, 6, []],
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(charCodes);
  },
  String_String$fromCharCode: function(charCode) {
    return P.String_String$fromCharCodes(P.List_List$filled(1, charCode, J.JSInt));
  },
  Function__toMangledNames_closure: {
    "^": "Closure:296;result_0",
    call$2: [function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(symbol), value);
    }, "call$2", null, 4, 0, null, 145, [], 30, [], "call"],
    $isFunction: true
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:355;box_0",
    call$2: [function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(J.get$_name$x(key));
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      t1.i_1 = t1.i_1 + 1;
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  Deprecated: {
    "^": "Object;expires",
    toString$0: function(_) {
      return "Deprecated feature. Will be removed " + this.expires;
    }
  },
  bool: {
    "^": "Object;",
    toString$0: function(_) {
      return this ? "true" : "false";
    },
    $isbool: true
  },
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime_parse: [function(formattedString) {
        var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, t3, sign, hourDifference, minuteDifference, isUtc, millisecondsSinceEpoch;
        match = new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^([+-]?\\d{4,5})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
        if (match != null) {
          t1 = new P.DateTime_parse_parseIntOrZero();
          t2 = match._match;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          years = H.Primitives_parseInt(t2[1], null, null);
          if (2 >= t2.length)
            return H.ioore(t2, 2);
          month = H.Primitives_parseInt(t2[2], null, null);
          if (3 >= t2.length)
            return H.ioore(t2, 3);
          day = H.Primitives_parseInt(t2[3], null, null);
          if (4 >= t2.length)
            return H.ioore(t2, 4);
          hour = t1.call$1(t2[4]);
          if (5 >= t2.length)
            return H.ioore(t2, 5);
          minute = t1.call$1(t2[5]);
          if (6 >= t2.length)
            return H.ioore(t2, 6);
          second = t1.call$1(t2[6]);
          if (7 >= t2.length)
            return H.ioore(t2, 7);
          millisecond = J.round$0$n(J.$mul$ns(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
          if (millisecond === 1000) {
            addOneMillisecond = true;
            millisecond = 999;
          } else
            addOneMillisecond = false;
          t3 = t2.length;
          if (8 >= t3)
            return H.ioore(t2, 8);
          if (t2[8] != null) {
            if (9 >= t3)
              return H.ioore(t2, 9);
            t3 = t2[9];
            if (t3 != null) {
              sign = J.$eq(t3, "-") ? -1 : 1;
              if (10 >= t2.length)
                return H.ioore(t2, 10);
              hourDifference = H.Primitives_parseInt(t2[10], null, null);
              if (11 >= t2.length)
                return H.ioore(t2, 11);
              minuteDifference = t1.call$1(t2[11]);
              if (typeof hourDifference !== "number")
                return H.iae(hourDifference);
              minuteDifference = J.$add$ns(minuteDifference, 60 * hourDifference);
              if (typeof minuteDifference !== "number")
                return H.iae(minuteDifference);
              minute = J.$sub$n(minute, sign * minuteDifference);
            }
            isUtc = true;
          } else
            isUtc = false;
          millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
          return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
        } else
          throw H.wrapException(P.FormatException$(formattedString));
      }, "call$1", "DateTime_parse$closure", 2, 0, null, 206, []], DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: [function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, "call$1", "DateTime__fourDigits$closure", 2, 0, null, 207, []], DateTime__threeDigits: [function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, "call$1", "DateTime__threeDigits$closure", 2, 0, null, 207, []], DateTime__twoDigits: [function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }, "call$1", "DateTime__twoDigits$closure", 2, 0, null, 207, []]}
  },
  DateTime_parse_parseIntOrZero: {
    "^": "Closure:375;",
    call$1: [function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseInt(matched, null, null);
    }, "call$1", null, 2, 0, null, 374, [], "call"],
    $isFunction: true
  },
  DateTime_parse_parseDoubleOrZero: {
    "^": "Closure:376;",
    call$1: [function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseDouble(matched, null);
    }, "call$1", null, 2, 0, null, 374, [], "call"],
    $isFunction: true
  },
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (J.$eq(quotient, 0))
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      if (typeof quotient !== "number")
        return H.iae(quotient);
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:120;",
    call$1: [function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    }, "call$1", null, 2, 0, null, 207, [], "call"],
    $isFunction: true
  },
  Duration_toString_twoDigits: {
    "^": "Closure:120;",
    call$1: [function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    }, "call$1", null, 2, 0, null, 207, [], "call"],
    $isFunction: true
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  FallThroughError: {
    "^": "Error;",
    static: {FallThroughError$: function() {
        return new P.FallThroughError();
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, i, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      t2 = this._core$_arguments;
      if (t2 != null)
        for (t3 = 0; t4 = t2.length, t3 < t4; i = t1.i_1 + 1, t1.i_1 = i, t3 = i) {
          if (t3 > 0) {
            t5 = t1.sb_0;
            t5._contents = t5._contents + ", ";
          }
          t5 = t1.sb_0;
          if (t3 < 0)
            return H.ioore(t2, t3);
          str = P.Error_safeToString(t2[t3]);
          str = typeof str === "string" ? str : H.S(str);
          t5._contents = t5._contents + str;
        }
      t2 = this._namedArguments;
      if (t2 != null)
        t2.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
    },
    $isNoSuchMethodError: true,
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  Iterable: {
    "^": "Object;",
    $isIterable: true,
    $asIterable: null
  },
  Iterator: {
    "^": "Object;"
  },
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    },
    $isObject: true
  },
  Match: {
    "^": "Object;",
    $isMatch: true
  },
  StackTrace: {
    "^": "Object;"
  },
  RuneIterator: {
    "^": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
    get$current: function() {
      return this._currentCodePoint;
    },
    moveNext$0: function() {
      var t1, t2, t3, codeUnit, nextPosition, nextCodeUnit;
      t1 = this._nextPosition;
      this._core$_position = t1;
      t2 = this.string;
      t3 = J.getInterceptor$asx(t2);
      if (t1 === t3.get$length(t2)) {
        this._currentCodePoint = null;
        return false;
      }
      codeUnit = t3.codeUnitAt$1(t2, this._core$_position);
      nextPosition = this._core$_position + 1;
      if ((codeUnit & 64512) === 55296) {
        t1 = t3.get$length(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = nextPosition < t1;
      } else
        t1 = false;
      if (t1) {
        nextCodeUnit = t3.codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          this._nextPosition = nextPosition + 1;
          this._currentCodePoint = 65536 + ((codeUnit & 1023) << 10 >>> 0) + (nextCodeUnit & 1023);
          return true;
        }
      }
      this._nextPosition = nextPosition;
      this._currentCodePoint = codeUnit;
      return true;
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      if (typeof $content === "string")
        this._contents = $content;
      else
        this.write$1($content);
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;",
    $isSymbol: true
  },
  Type: {
    "^": "Object;",
    $isType: true
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$authority: function() {
      if (this.get$host(this) === "")
        return "";
      var sb = P.StringBuffer$("");
      this._writeAuthority$1(sb);
      return sb._contents;
    },
    get$host: function(_) {
      var t1;
      if (C.JSString_methods.startsWith$1(this._host, "[")) {
        t1 = this._host;
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      }
      return this._host;
    },
    get$port: function(_) {
      var t1;
      if (J.$eq(this._port, 0)) {
        t1 = this.scheme;
        if (t1 === "http")
          return 80;
        if (t1 === "https")
          return 443;
      }
      return this._port;
    },
    get$path: function(_) {
      return this._path;
    },
    query$1: function($receiver, arg0) {
      return this.query.call$1(arg0);
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && true)
        return "";
      t1 = !t1;
      if (t1)
        ;
      result = t1 ? P.Uri__normalize(path) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
      if ((this.get$host(this) !== "" || this.scheme === "file") && C.JSString_methods.get$isNotEmpty(result) && !C.JSString_methods.startsWith$1(result, "/"))
        return "/" + result;
      return result;
    },
    _merge$2: function(base, reference) {
      if (base === "")
        return "/" + H.S(reference);
      return C.JSString_methods.substring$2(base, 0, J.getInterceptor$asx(base).lastIndexOf$1(base, "/") + 1) + H.S(reference);
    },
    _hasDotSegments$1: function(path) {
      if (path.length > 0 && J.codeUnitAt$1$s(path, 0) === 58)
        return true;
      return J.indexOf$1$asx(path, "/.") !== -1;
    },
    _removeDotSegments$1: function(path) {
      var output, t1, appendSlash, segment, t2;
      if (!this._hasDotSegments$1(path))
        return path;
      output = [];
      for (t1 = path.split("/"), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), appendSlash = false; t1.moveNext$0();) {
        segment = t1._current;
        if (J.$eq(segment, "..")) {
          t2 = output.length;
          if (t2 !== 0)
            if (t2 === 1) {
              if (0 >= t2)
                return H.ioore(output, 0);
              t2 = !J.$eq(output[0], "");
            } else
              t2 = true;
          else
            t2 = false;
          if (t2) {
            if (0 >= output.length)
              return H.ioore(output, 0);
            output.pop();
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          output.push(segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        output.push("");
      return C.JSArray_methods.join$1(output, "/");
    },
    _writeAuthority$1: function(ss) {
      var t1 = this.userInfo;
      if ("" !== t1) {
        ss.write$1(t1);
        ss.write$1("@");
      }
      ss.write$1(this._host);
      if (!J.$eq(this._port, 0)) {
        ss.write$1(":");
        ss.write$1(J.toString$0(this._port));
      }
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (this.get$host(this) !== "" || t1 === "file") {
        sb.write$1("//");
        this._writeAuthority$1(sb);
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isUri)
        return false;
      if (this.scheme === other.scheme)
        if (this.userInfo === other.userInfo)
          if (this.get$host(this) === t1.get$host(other))
            if (J.$eq(this.get$port(this), t1.get$port(other))) {
              t1 = this._path;
              t2 = other._path;
              t1 = (t1 == null ? t2 == null : t1 === t2) && this.query === other.query && this.fragment === other.fragment;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      if (scheme === "http" && J.$eq(port, 80))
        this._port = 0;
      else if (scheme === "https" && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__regNameTable,Uri__pathCharTable,Uri__queryCharTable", Uri_parse: [function(uri) {
        var port, portStr, t1, t2, t3, $length, index, schemeEndIndex, index0, codeUnit, t4, authorityEndIndex, portIndex, userInfoEndIndex, authorityEndIndex0, pathEndIndex, pathEndIndex0, queryEndIndex, queryEndIndex0, scheme, startIndex, userInfo, exception, host, path, query, fragment;
        t1 = new P.Uri_parse_isRegName();
        t2 = new P.Uri_parse_ipV6Address(uri);
        t3 = J.getInterceptor$asx(uri);
        $length = t3.get$length(uri);
        if (J.$eq($length, 0))
          return P.Uri$("", "", null, null, 0, null, null, null, "");
        if (t3.codeUnitAt$1(uri, 0) !== 47) {
          if (typeof $length !== "number")
            return H.iae($length);
          index = 0;
          for (; schemeEndIndex = 0, index < $length; index = index0) {
            index0 = index + 1;
            codeUnit = t3.codeUnitAt$1(uri, index);
            if (codeUnit < 128) {
              t4 = codeUnit >>> 4;
              if (t4 >= 8)
                return H.ioore(C.List_JYB, t4);
              t4 = J.$and$n(C.List_JYB[t4], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t4 = false;
            if (!t4) {
              if (codeUnit === 58) {
                schemeEndIndex = index0;
                index = schemeEndIndex;
              } else {
                index = index0 - 1;
                schemeEndIndex = 0;
              }
              break;
            }
          }
        } else {
          index = 0;
          schemeEndIndex = 0;
        }
        if (schemeEndIndex === index) {
          t4 = schemeEndIndex + 1;
          if (typeof $length !== "number")
            return H.iae($length);
          t4 = t4 < $length && t3.codeUnitAt$1(uri, schemeEndIndex) === 47 && t3.codeUnitAt$1(uri, t4) === 47;
        } else
          t4 = false;
        if (t4) {
          authorityEndIndex = schemeEndIndex + 2;
          for (portIndex = -1; t4 = J.getInterceptor$n(authorityEndIndex), userInfoEndIndex = -1, t4.$lt(authorityEndIndex, $length);) {
            authorityEndIndex0 = t4.$add(authorityEndIndex, 1);
            codeUnit = t3.codeUnitAt$1(uri, authorityEndIndex);
            if (t1.call$1(codeUnit) !== true)
              if (codeUnit === 91)
                authorityEndIndex = t2.call$1(authorityEndIndex0);
              else {
                if (J.$eq(portIndex, -1) && codeUnit === 58)
                  ;
                else {
                  t4 = codeUnit === 64 || codeUnit === 58;
                  authorityEndIndex = authorityEndIndex0 - 1;
                  if (t4) {
                    userInfoEndIndex = t3.indexOf$2(uri, "@", authorityEndIndex);
                    if (userInfoEndIndex === -1) {
                      authorityEndIndex = index;
                      break;
                    }
                    authorityEndIndex = userInfoEndIndex + 1;
                    for (portIndex = -1; t4 = J.getInterceptor$n(authorityEndIndex), t4.$lt(authorityEndIndex, $length);) {
                      authorityEndIndex0 = t4.$add(authorityEndIndex, 1);
                      codeUnit = t3.codeUnitAt$1(uri, authorityEndIndex);
                      if (t1.call$1(codeUnit) !== true)
                        if (codeUnit === 91)
                          authorityEndIndex = t2.call$1(authorityEndIndex0);
                        else {
                          if (codeUnit === 58) {
                            if (!J.$eq(portIndex, -1))
                              throw H.wrapException(P.FormatException$("Double port in host"));
                          } else {
                            authorityEndIndex = authorityEndIndex0 - 1;
                            break;
                          }
                          authorityEndIndex = authorityEndIndex0;
                          portIndex = authorityEndIndex;
                        }
                      else
                        authorityEndIndex = authorityEndIndex0;
                    }
                    break;
                  } else {
                    userInfoEndIndex = -1;
                    break;
                  }
                }
                authorityEndIndex = authorityEndIndex0;
                portIndex = authorityEndIndex;
              }
            else
              authorityEndIndex = authorityEndIndex0;
          }
        } else {
          authorityEndIndex = schemeEndIndex;
          userInfoEndIndex = -1;
          portIndex = -1;
        }
        for (pathEndIndex = authorityEndIndex; t1 = J.getInterceptor$n(pathEndIndex), t1.$lt(pathEndIndex, $length); pathEndIndex = pathEndIndex0) {
          pathEndIndex0 = t1.$add(pathEndIndex, 1);
          codeUnit = t3.codeUnitAt$1(uri, pathEndIndex);
          if (codeUnit === 63 || codeUnit === 35) {
            pathEndIndex = pathEndIndex0 - 1;
            break;
          }
        }
        t1 = J.getInterceptor$n(pathEndIndex);
        if (t1.$lt(pathEndIndex, $length) && t3.codeUnitAt$1(uri, pathEndIndex) === 63)
          for (queryEndIndex = pathEndIndex; t2 = J.getInterceptor$n(queryEndIndex), t2.$lt(queryEndIndex, $length); queryEndIndex = queryEndIndex0) {
            queryEndIndex0 = t2.$add(queryEndIndex, 1);
            if (t3.codeUnitAt$1(uri, queryEndIndex) === 35) {
              queryEndIndex = queryEndIndex0 - 1;
              break;
            }
          }
        else
          queryEndIndex = pathEndIndex;
        scheme = schemeEndIndex > 0 ? t3.substring$2(uri, 0, schemeEndIndex - 1) : null;
        port = 0;
        if (schemeEndIndex !== authorityEndIndex) {
          startIndex = schemeEndIndex + 2;
          if (userInfoEndIndex > 0) {
            userInfo = t3.substring$2(uri, startIndex, userInfoEndIndex);
            startIndex = userInfoEndIndex + 1;
          } else
            userInfo = "";
          t2 = J.getInterceptor$n(portIndex);
          if (t2.$gt(portIndex, 0)) {
            portStr = t3.substring$2(uri, portIndex, authorityEndIndex);
            try {
              port = H.Primitives_parseInt(portStr, null, null);
            } catch (exception) {
              H.unwrapException(exception);
              throw H.wrapException(P.FormatException$("Invalid port: '" + H.S(portStr) + "'"));
            }

            host = t3.substring$2(uri, startIndex, t2.$sub(portIndex, 1));
          } else
            host = t3.substring$2(uri, startIndex, authorityEndIndex);
        } else {
          host = "";
          userInfo = "";
        }
        path = t3.substring$2(uri, authorityEndIndex, pathEndIndex);
        query = t1.$lt(pathEndIndex, queryEndIndex) ? t3.substring$2(uri, t1.$add(pathEndIndex, 1), queryEndIndex) : "";
        t1 = J.getInterceptor$n(queryEndIndex);
        fragment = t1.$lt(queryEndIndex, $length) ? t3.substring$2(uri, t1.$add(queryEndIndex, 1), $length) : "";
        return P.Uri$(fragment, host, path, null, port, query, null, scheme, userInfo);
      }, "call$1", "Uri_parse$closure", 2, 0, null, 211, []], Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: [function(host) {
        var t1, i;
        if (host.length === 0)
          return host;
        if (C.JSString_methods.codeUnitAt$1(host, 0) === 91) {
          t1 = host.length - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
          return host;
        }
        for (t1 = host.length, i = 0; i < t1; ++i) {
          if (i >= t1)
            H.throwExpression(new P.RangeError("value " + i));
          if (host.charCodeAt(i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + host + "]";
          }
        }
        return host;
      }, "call$1", "Uri__makeHost$closure", 2, 0, null, 212, []], Uri__makeScheme: [function(scheme) {
        var t1, $length, allLowercase, i, codeUnit, t2;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        if (scheme == null)
          return "";
        $length = scheme.length;
        for (allLowercase = true, i = 0; i < $length; ++i) {
          if (i >= $length)
            H.throwExpression(new P.RangeError("value " + i));
          codeUnit = scheme.charCodeAt(i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t2 = codeUnit >= 65 && codeUnit <= 90;
            else
              t2 = true;
            t2 = !t2;
          } else
            t2 = false;
          if (t2)
            throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
          if (t1.call$1(codeUnit) !== true) {
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = J.$and$n(C.List_JYB[t2], C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              ;
            else
              throw H.wrapException(new P.ArgumentError("Illegal scheme: " + scheme));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : scheme.toLowerCase();
      }, "call$1", "Uri__makeScheme$closure", 2, 0, null, 213, []], Uri__makeQuery: [function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, "call$2", "Uri__makeQuery$closure", 4, 0, null, 214, [], 215, []], Uri__makeFragment: [function(fragment) {
        return P.Uri__normalize(fragment);
      }, "call$1", "Uri__makeFragment$closure", 2, 0, null, 216, []], Uri__normalize: [function(component) {
        var t1, index, t2, t3, t4, t5, $length, t6, t7, codeUnit1, codeUnit2, decodedCodeUnit, t8, charCodes, next;
        t1 = {};
        index = J.getInterceptor$asx(component).indexOf$1(component, "%");
        t1.index_0 = index;
        if (index < 0)
          return component;
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_1 = null;
        $length = component.length;
        t1.prevIndex_2 = 0;
        t6 = new P.Uri__normalize_fillResult(t1, component);
        for (t7 = index; t7 < $length;) {
          if ($length < t7 + 2)
            throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + component));
          codeUnit1 = C.JSString_methods.codeUnitAt$1(component, t7 + 1);
          codeUnit2 = C.JSString_methods.codeUnitAt$1(component, t1.index_0 + 2);
          decodedCodeUnit = t5.call$1(t1.index_0 + 1);
          if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true) {
            index = t1.index_0 + 3;
            t1.index_0 = index;
            t7 = index;
          } else {
            t6.call$0();
            t7 = t3.call$1(decodedCodeUnit);
            t8 = t1.result_1;
            if (t7 === true) {
              t8.toString;
              charCodes = P.List_List$filled(1, decodedCodeUnit, J.JSInt);
              t7 = H.Primitives_stringFromCharCodes(charCodes);
              t8._contents = t8._contents + t7;
            } else {
              t8.toString;
              t8._contents = t8._contents + "%";
              t7 = t4.call$1(t1.index_0 + 1);
              t8.toString;
              charCodes = P.List_List$filled(1, t7, J.JSInt);
              t7 = H.Primitives_stringFromCharCodes(charCodes);
              t8._contents = t8._contents + t7;
              t7 = t1.result_1;
              t8 = t4.call$1(t1.index_0 + 2);
              t7.toString;
              charCodes = P.List_List$filled(1, t8, J.JSInt);
              t8 = H.Primitives_stringFromCharCodes(charCodes);
              t7._contents = t7._contents + t8;
            }
            index = t1.index_0 + 3;
            t1.index_0 = index;
            t1.prevIndex_2 = index;
            t7 = index;
          }
          next = C.JSString_methods.indexOf$2(component, "%", t7);
          if (next >= t1.index_0) {
            t1.index_0 = next;
            t7 = next;
          } else {
            t1.index_0 = $length;
            t7 = $length;
          }
        }
        if (t1.result_1 == null)
          return component;
        if (t1.prevIndex_2 !== t7)
          t6.call$0();
        return J.toString$0(t1.result_1);
      }, "call$1", "Uri__normalize$closure", 2, 0, null, 217, []], Uri_parseIPv4Address: [function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return H.setRuntimeTypeInfo(new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1)), [null, null]).toList$0(0);
      }, "call$1", "Uri_parseIPv4Address$closure", 2, 0, null, 212, []], Uri_parseIPv6Address: [function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.get$length$asx(host) < 2)
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = host;
          t2 = J.get$length$asx(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t2)
            H.throwExpression(new P.RangeError("value " + i));
          if (t1.charCodeAt(i) === 58) {
            if (i === 0) {
              ++i;
              t1 = host;
              if (i >= J.get$length$asx(t1))
                H.throwExpression(new P.RangeError("value " + i));
              if (t1.charCodeAt(i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$shl$n(J.$index$asx(last, 0), 8);
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 | t2) >>> 0);
              t2 = J.$shl$n(J.$index$asx(last, 2), 8);
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, "call$1", "Uri_parseIPv6Address$closure", 2, 0, null, 212, []], Uri__uriEncode: [function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3, charCodes;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128)) {
            t3 = t2.$shr($byte, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = J.$and$n(canonicalTable[t3], C.JSInt_methods._shlPositive$1(1, t2.$and($byte, 15))) !== 0;
          } else
            t3 = false;
          if (t3) {
            charCodes = P.List_List$filled(1, $byte, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            charCodes = P.List_List$filled(1, 43, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
          } else {
            charCodes = P.List_List$filled(1, 37, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            result._contents = result._contents + t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }, "call$4$encoding$spaceToPlus", "Uri__uriEncode$closure", 4, 5, null, 218, 219, 220, [], 221, [], 222, [], 223, []]}
  },
  Uri_parse_isRegName: {
    "^": "Closure:378;",
    call$1: [function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = J.$and$n(C.List_qNA[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }, "call$1", null, 2, 0, null, 377, [], "call"],
    $isFunction: true
  },
  Uri_parse_ipV6Address: {
    "^": "Closure:379;uri_0",
    call$1: [function(index) {
      index = J.indexOf$2$asx(this.uri_0, "]", index);
      if (index === -1)
        throw H.wrapException(P.FormatException$("Bad end of IPv6 host"));
      return index + 1;
    }, "call$1", null, 2, 0, null, 15, [], "call"],
    $isFunction: true
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "^": "Closure:378;",
    call$1: [function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_6Pr, t1);
        t1 = J.$and$n(C.List_6Pr[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }, "call$1", null, 2, 0, null, 377, [], "call"],
    $isFunction: true
  },
  Uri__makePath_closure: {
    "^": "Closure:115;",
    call$1: [function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, C.Utf8Codec_false, false);
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  Uri__makeQuery_closure: {
    "^": "Closure:296;box_0,result_1",
    call$2: [function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  Uri__normalize_isNormalizedHexDigit: {
    "^": "Closure:378;",
    call$1: [function(digit) {
      var t1;
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    }, "call$1", null, 2, 0, null, 380, [], "call"],
    $isFunction: true
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "^": "Closure:378;",
    call$1: [function(digit) {
      return 97 <= digit && digit <= 102;
    }, "call$1", null, 2, 0, null, 380, [], "call"],
    $isFunction: true
  },
  Uri__normalize_isUnreserved: {
    "^": "Closure:378;",
    call$1: [function(ch) {
      var t1;
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = J.$and$n(C.List_nxB[t1], C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    }, "call$1", null, 2, 0, null, 377, [], "call"],
    $isFunction: true
  },
  Uri__normalize_normalizeHexDigit: {
    "^": "Closure:379;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: [function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = C.JSString_methods.codeUnitAt$1(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(new P.ArgumentError("Invalid URI component: " + t1));
      else
        return codeUnit;
    }, "call$1", null, 2, 0, null, 15, [], "call"],
    $isFunction: true
  },
  Uri__normalize_decodeHexDigitPair: {
    "^": "Closure:379;component_4",
    call$1: [function(index) {
      var t1, $byte, i, codeUnit;
      for (t1 = this.component_4, $byte = 0, i = 0; i < 2; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t1, index + i);
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit |= 32;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(new P.ArgumentError("Invalid percent-encoding in URI component: " + t1));
        }
      }
      return $byte;
    }, "call$1", null, 2, 0, null, 15, [], "call"],
    $isFunction: true
  },
  Uri__normalize_fillResult: {
    "^": "Closure:125;box_0,component_5",
    call$0: [function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_1;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_0;
      if (t2 == null)
        t1.result_1 = P.StringBuffer$(C.JSString_methods.substring$2(t4, t3, t5));
      else
        t2.write$1(C.JSString_methods.substring$2(t4, t3, t5));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Uri_hashCode_combine: {
    "^": "Closure:382;",
    call$2: [function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    }, "call$2", null, 4, 0, null, 381, [], 250, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure:190;",
    call$1: [function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg));
    }, "call$1", null, 2, 0, null, 22, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure:115;error_0",
    call$1: [function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }, "call$1", null, 2, 0, null, 383, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure:190;",
    call$1: [function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg));
    }, "call$1", null, 2, 0, null, 22, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure:384;host_0,error_1",
    call$2: [function(start, end) {
      var value, t1;
      if (end - start > 4)
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    }, "call$2", null, 4, 0, null, 133, [], 134, [], "call"],
    $isFunction: true
  },
  Uri_parseIPv6Address_closure: {
    "^": "Closure:115;parts_2",
    call$1: [function(value) {
      var t1 = J.getInterceptor(value);
      if (t1.$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else
        return [t1.$shr(value, 8) & 255, t1.$and(value, 255)];
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:296;",
    call$2: [function($byte, buffer) {
      var t1 = J.getInterceptor$n($byte);
      buffer.write$1(P.String_String$fromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$shr($byte, 4))));
      buffer.write$1(P.String_String$fromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$and($byte, 15))));
    }, "call$2", null, 4, 0, null, 385, [], 386, [], "call"],
    $isFunction: true
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  Element__determineTransitionEventType: [function(e) {
    if (P.Device_isWebKit() === true)
      return "webkitTransitionEnd";
    else if (P.Device_isOpera() === true)
      return "oTransitionEnd";
    return "transitionend";
  }, "call$1", "Element__determineTransitionEventType$closure", 2, 0, 224, 21, []],
  _ElementFactoryProvider_createElement_tag: [function(tag, typeExtension) {
    return document.createElement(tag);
  }, "call$2", "_ElementFactoryProvider_createElement_tag$closure", 4, 0, null, 101, [], 225, []],
  HttpRequest_getString: [function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  }, "call$3$onProgress$withCredentials", "HttpRequest_getString$closure", 2, 5, null, 84, 84, 226, [], 227, [], 228, []],
  HttpRequest_request: [function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    t1 = C.EventStreamProvider_load.forTarget$1(xhr);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = C.EventStreamProvider_error.forTarget$1(xhr);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  }, "call$8$method$mimeType$onProgress$requestHeaders$responseType$sendData$withCredentials", "HttpRequest_request$closure", 2, 15, null, 84, 84, 84, 84, 84, 84, 84, 226, [], 229, [], 227, [], 230, [], 231, [], 232, [], 233, [], 228, []],
  InputElement_InputElement: function(type) {
    var e, exception;
    e = document.createElement("input", null);
    if (type != null)
      try {
        J.set$type$x(e, type);
      } catch (exception) {
        H.unwrapException(exception);
      }

    return e;
  },
  Window__isDartLocation: [function(thing) {
    var exception;
    try {
      return !!J.getInterceptor(thing).$isLocation;
    } catch (exception) {
      H.unwrapException(exception);
      return false;
    }

  }, "call$1", "Window__isDartLocation$closure", 2, 0, null, 234, []],
  _JenkinsSmiHash_combine: [function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  }, "call$2", "_JenkinsSmiHash_combine$closure", 4, 0, null, 235, [], 30, []],
  _convertNativeToDart_Window: [function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  }, "call$1", "_convertNativeToDart_Window$closure", 2, 0, null, 236, []],
  _convertNativeToDart_EventTarget: [function(e) {
    var $window;
    if (e == null)
      return;
    if ("setInterval" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  }, "call$1", "_convertNativeToDart_EventTarget$closure", 2, 0, null, 21, []],
  _convertDartToNative_EventTarget: [function(e) {
    return e;
  }, "call$1", "_convertDartToNative_EventTarget$closure", 2, 0, null, 21, []],
  _convertNativeToDart_XHR_Response: [function(o) {
    if (!!J.getInterceptor(o).$isDocument)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  }, "call$1", "_convertNativeToDart_XHR_Response$closure", 2, 0, null, 98, []],
  _callConstructor: [function($constructor, interceptor) {
    return new W._callConstructor_closure($constructor, interceptor);
  }, "call$2", "_callConstructor$closure", 4, 0, null, 237, [], 7, []],
  _callEnteredView: [function(receiver) {
    return J.enteredView$0$x(receiver);
  }, "call$1", "_callEnteredView$closure", 2, 0, 115, 47, []],
  _callLeftView: [function(receiver) {
    return J.leftView$0$x(receiver);
  }, "call$1", "_callLeftView$closure", 2, 0, 115, 47, []],
  _callAttributeChanged: [function(receiver, $name, oldValue, newValue) {
    return J.attributeChanged$3$x(receiver, $name, oldValue, newValue);
  }, "call$4", "_callAttributeChanged$closure", 8, 0, 238, 47, [], 12, [], 239, [], 240, []],
  _registerCustomElement: [function(context, $document, tag, type, extendsTagName) {
    var interceptorClass, interceptor, $constructor, baseClassName, t1, baseConstructor, properties, proto, t2, options;
    interceptorClass = J.findInterceptorConstructorForType(type);
    if (interceptorClass == null)
      throw H.wrapException(new P.ArgumentError(type));
    interceptor = interceptorClass.prototype;
    $constructor = J.findConstructorForNativeSubclassType(type, "created");
    if ($constructor == null)
      throw H.wrapException(new P.ArgumentError(H.S(type) + " has no constructor called 'created'"));
    J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
    baseClassName = interceptorClass.$nativeSuperclassTag;
    if (baseClassName == null)
      throw H.wrapException(new P.ArgumentError(type));
    t1 = extendsTagName == null;
    if (t1) {
      if (!J.$eq(baseClassName, "HTMLElement"))
        throw H.wrapException(P.UnsupportedError$("Class must provide extendsTag if base native class is not HTMLElement"));
    } else if (!($document.createElement(extendsTagName) instanceof window[baseClassName]))
      throw H.wrapException(P.UnsupportedError$("extendsTag does not match base native class"));
    baseConstructor = context[baseClassName];
    properties = {};
    properties.createdCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callConstructor($constructor, interceptor), 1)))};
    properties.attachedCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callEnteredView$closure(), 1)))};
    properties.detachedCallback = {value: ((function(invokeCallback) {
             return function() {
               return invokeCallback(this);
             };
          })(H.convertDartClosureToJS(W._callLeftView$closure(), 1)))};
    properties.attributeChangedCallback = {value: ((function(invokeCallback) {
             return function(arg1, arg2, arg3) {
               return invokeCallback(this, arg1, arg2, arg3);
             };
          })(H.convertDartClosureToJS(W._callAttributeChanged$closure(), 4)))};
    proto = Object.create(baseConstructor.prototype, properties);
    t2 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: t2, enumerable: false, writable: true, configurable: true});
    options = {prototype: proto};
    if (!t1)
      options.extends = extendsTagName;
    $document.registerElement(tag, options);
  }, "call$5", "_registerCustomElement$closure", 10, 0, null, 96, [], 241, [], 101, [], 11, [], 242, []],
  _wrapZone: [function(callback) {
    if (J.$eq($.Zone__current, C.C__RootZone))
      return callback;
    if (callback == null)
      return;
    return $.Zone__current.bindUnaryCallback$2$runGuarded(callback, true);
  }, "call$1", "_wrapZone$closure", 2, 0, null, 164, []],
  _wrapBinaryZone: [function(callback) {
    if (J.$eq($.Zone__current, C.C__RootZone))
      return callback;
    return $.Zone__current.bindBinaryCallback$2$runGuarded(callback, true);
  }, "call$1", "_wrapBinaryZone$closure", 2, 0, null, 164, []],
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableColElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement;HtmlElement_Polymer|HtmlElement_Polymer_ChangeNotifier|PolymerElement|PolymerElement_ChangeNotifier|ActionLinkElement|ObservatoryElement|ObservatoryElement_ChangeNotifier|BreakpointListElement|ObservatoryElement_ChangeNotifier0|ServiceRefElement|ClassRefElement|ObservatoryElement_ChangeNotifier1|ClassViewElement|CodeRefElement|ObservatoryElement_ChangeNotifier2|CodeViewElement|ObservatoryElement_ChangeNotifier3|CollapsibleContentElement|PolymerElement_ChangeNotifier0|CurlyBlockElement|ObservatoryElement_ChangeNotifier4|ErrorViewElement|ObservatoryElement_ChangeNotifier5|EvalBoxElement|PolymerElement_ChangeNotifier1|EvalLinkElement|FieldRefElement|ObservatoryElement_ChangeNotifier6|FieldViewElement|ServiceRefElement_ChangeNotifier|FunctionRefElement|ObservatoryElement_ChangeNotifier7|FunctionViewElement|ObservatoryElement_ChangeNotifier8|HeapMapElement|ObservatoryElement_ChangeNotifier9|HeapProfileElement|InstanceRefElement|ObservatoryElement_ChangeNotifier10|InstanceViewElement|ObservatoryElement_ChangeNotifier11|IsolateProfileElement|IsolateRefElement|ObservatoryElement_ChangeNotifier12|IsolateSummaryElement|ObservatoryElement_ChangeNotifier13|IsolateRunStateElement|ObservatoryElement_ChangeNotifier14|IsolateLocationElement|ObservatoryElement_ChangeNotifier15|IsolateSharedSummaryElement|ObservatoryElement_ChangeNotifier16|IsolateCounterChartElement|ObservatoryElement_ChangeNotifier17|IsolateViewElement|ObservatoryElement_ChangeNotifier18|JsonViewElement|LibraryRefElement|ObservatoryElement_ChangeNotifier19|LibraryViewElement|ObservatoryElement_ChangeNotifier20|NavBarElement|ObservatoryElement_ChangeNotifier21|NavMenuElement|ObservatoryElement_ChangeNotifier22|NavMenuItemElement|ObservatoryElement_ChangeNotifier23|NavRefreshElement|ObservatoryElement_ChangeNotifier24|TopNavMenuElement|ObservatoryElement_ChangeNotifier25|IsolateNavMenuElement|ObservatoryElement_ChangeNotifier26|LibraryNavMenuElement|ObservatoryElement_ChangeNotifier27|ClassNavMenuElement|ObservatoryElement_ChangeNotifier28|ObservatoryApplicationElement|PolymerDeclaration|ObservatoryElement_ChangeNotifier29|ResponseViewerElement|ObservatoryElement_ChangeNotifier30|ScriptInsetElement|ServiceRefElement_ChangeNotifier0|ScriptRefElement|ObservatoryElement_ChangeNotifier31|ScriptViewElement|ObservatoryElement_ChangeNotifier32|ServiceErrorViewElement|ObservatoryElement_ChangeNotifier33|ServiceExceptionViewElement|ObservatoryElement_ChangeNotifier34|ServiceObjectViewElement|PolymerElement_ChangeNotifier2|SlidingCheckboxElement|ObservatoryElement_ChangeNotifier35|StackFrameElement|ObservatoryElement_ChangeNotifier36|StackTraceElement|VMRefElement|ObservatoryElement_ChangeNotifier37|VMViewElement"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: true,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Entry];
    },
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type%,hash%,host=,href=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;target=,hash%,host=,href=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;href=,target=",
    "%": "HTMLBaseElement"
  },
  BeforeLoadEvent: {
    "^": "Event;url=",
    "%": "BeforeLoadEvent"
  },
  Blob: {
    "^": "Interceptor;type=",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;form=,name%,type%,value%",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "^": "Interceptor;",
    "%": ";CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "^": "CanvasRenderingContext;",
    putImageData$7: function(receiver, imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
      var t1;
      if (dirtyWidth != null)
        t1 = true;
      else
        t1 = false;
      if (t1) {
        receiver.putImageData(P.convertDartToNative_ImageData(imagedata), dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
        return;
      }
      throw H.wrapException(new P.ArgumentError("Incorrect number or type of arguments"));
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;data=,length=",
    "%": "Comment;CharacterData"
  },
  CloseEvent: {
    "^": "Event;code=",
    "%": "CloseEvent"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  CustomEvent: {
    "^": "Event;",
    get$detail: function(receiver) {
      var t1 = receiver._dartDetail;
      if (t1 != null)
        return t1;
      return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
    },
    $isCustomEvent: true,
    "%": "CustomEvent"
  },
  Document: {
    "^": "Node;",
    createDocumentFragment$0: function(receiver) {
      return receiver.createDocumentFragment();
    },
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    importNode$2: function(receiver, node, deep) {
      return receiver.importNode(node, deep);
    },
    get$onChange: function(receiver) {
      return C.EventStreamProvider_change.forTarget$1(receiver);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    get$onInput: function(receiver) {
      return C.EventStreamProvider_input.forTarget$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forTarget$1(receiver);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    queryAll$1: function(receiver, relativeSelectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
    },
    $isDocument: true,
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    set$children: function(receiver, value) {
      var copy, children, t1;
      copy = P.List_List$from(value, true, null);
      children = this.get$children(receiver);
      t1 = J.getInterceptor$ax(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    queryAll$1: function(receiver, relativeSelectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
    },
    "%": ";DocumentFragment"
  },
  DomError: {
    "^": "Interceptor;message=,name=",
    "%": ";DOMError"
  },
  DomException: {
    "^": "Interceptor;message=",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isDomException: true,
    "%": "DOMException"
  },
  Element: {
    "^": "Node;className%,id=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    set$children: function(receiver, value) {
      var copy, children;
      copy = P.List_List$from(value, true, null);
      children = this.get$children(receiver);
      children.clear$0(0);
      children.addAll$1(0, copy);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    query$1: function(receiver, relativeSelectors) {
      return receiver.querySelector(relativeSelectors);
    },
    queryAll$1: function(receiver, relativeSelectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(relativeSelectors), null);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    set$classes: function(receiver, value) {
      var classSet = this.get$classes(receiver);
      classSet.clear$0(0);
      classSet.addAll$1(classSet, value);
    },
    get$client: function(receiver) {
      return P.Rectangle$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight, null);
    },
    get$offset: function(receiver) {
      return P.Rectangle$(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight, null);
    },
    enteredView$0: function(receiver) {
    },
    leftView$0: function(receiver) {
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
    },
    get$localName: function(receiver) {
      return receiver.localName;
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    matches$1: function(receiver, selectors) {
      if (!!receiver.matches)
        return receiver.matches(selectors);
      else if (!!receiver.webkitMatchesSelector)
        return receiver.webkitMatchesSelector(selectors);
      else if (!!receiver.mozMatchesSelector)
        return receiver.mozMatchesSelector(selectors);
      else if (!!receiver.msMatchesSelector)
        return receiver.msMatchesSelector(selectors);
      else if (!!receiver.oMatchesSelector)
        return receiver.oMatchesSelector(selectors);
      else
        throw H.wrapException(P.UnsupportedError$("Not supported on this platform"));
    },
    matchesWithAncestors$1: function(receiver, selectors) {
      var elem = receiver;
      do {
        if (J.matches$1$x(elem, selectors))
          return true;
        elem = elem.parentElement;
      } while (elem != null);
      return false;
    },
    createShadowRoot$0: function(receiver) {
      return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
    },
    get$shadowRoot: function(receiver) {
      return receiver.shadowRoot || receiver.webkitShadowRoot;
    },
    get$on: function(receiver) {
      return new W.ElementEvents(receiver, receiver);
    },
    getAttribute$1: function(receiver, $name) {
      return receiver.getAttribute($name);
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    get$onChange: function(receiver) {
      return C.EventStreamProvider_change.forElement$1(receiver);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onInput: function(receiver) {
      return C.EventStreamProvider_input.forElement$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forElement$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forElement$1(receiver);
    },
    Element$created$0: function(receiver) {
    },
    $isElement: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,name%,src=,type%,width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=,message=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;_selector},bubbles=,path=,type=",
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|TrackEvent|WebGLContextEvent|WebKitAnimationEvent;Event"
  },
  EventTarget: {
    "^": "Interceptor;",
    get$on: function(receiver) {
      return new W.Events(receiver);
    },
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;form=,name%,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FileError: {
    "^": "DomError;code=",
    "%": "FileError"
  },
  FormElement: {
    "^": "HtmlElement;length=,method=,name%,target=",
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=,status=",
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    $isHttpRequest: true,
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,name%,src=,width%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=,height=,width=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height%,src=,width%",
    complete$1: function($receiver, arg0) {
      return $receiver.complete.call$1(arg0);
    },
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;checked%,form=,height%,name%,src=,type%,value%,width%",
    accept$1: function($receiver, arg0) {
      return $receiver.accept.call$1(arg0);
    },
    $isInputElement: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "^": "HtmlElement;form=,name%,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LabelElement: {
    "^": "HtmlElement;form=",
    "%": "HTMLLabelElement"
  },
  LegendElement: {
    "^": "HtmlElement;form=",
    "%": "HTMLLegendElement"
  },
  LinkElement: {
    "^": "HtmlElement;href=,type%",
    $isLinkElement: true,
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;hash%,host=,href=",
    reload$0: function(receiver) {
      return receiver.reload();
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isLocation: true,
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=,src=",
    load$0: function(receiver) {
      return receiver.load();
    },
    "%": "HTMLAudioElement;HTMLMediaElement",
    static: {"^": "MediaElement_pauseEvent<"}
  },
  MediaError: {
    "^": "Interceptor;code=",
    "%": "MediaError"
  },
  MediaKeyError: {
    "^": "Interceptor;code=",
    "%": "MediaKeyError"
  },
  MediaKeyEvent: {
    "^": "Event;message=",
    "%": "MediaKeyEvent"
  },
  MediaKeyMessageEvent: {
    "^": "Event;message=",
    "%": "MediaKeyMessageEvent"
  },
  MediaStream: {
    "^": "EventTarget;id=,label=",
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    $isMessageEvent: true,
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;content=,name%",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=,version=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "^": "UIEvent;",
    _initMouseEvent$15: function(receiver, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
      receiver.initMouseEvent(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, W._convertDartToNative_EventTarget(relatedTarget));
      return;
    },
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    get$offset: function(receiver) {
      var target, point;
      if (!!receiver.offsetX)
        return H.setRuntimeTypeInfo(new P.Point(receiver.offsetX, receiver.offsetY), [null]);
      else {
        if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        point = H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        return H.setRuntimeTypeInfo(new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
      }
    },
    $isMouseEvent: true,
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  MutationObserver: {
    "^": "Interceptor;",
    observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
      var parsedOptions, t1;
      parsedOptions = {};
      t1 = new W.MutationObserver_observe_override(parsedOptions);
      t1.call$2("childList", childList);
      t1.call$2("attributes", attributes);
      t1.call$2("characterData", characterData);
      t1.call$2("subtree", subtree);
      t1.call$2("attributeOldValue", attributeOldValue);
      t1.call$2("characterDataOldValue", characterDataOldValue);
      receiver.observe(target, parsedOptions);
    },
    observe$3$childList$subtree: function($receiver, target, childList, subtree) {
      return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, null, null, null, null, null, childList, subtree);
    },
    "%": "MutationObserver|WebKitMutationObserver"
  },
  MutationRecord: {
    "^": "Interceptor;oldValue=,target=,type=",
    "%": "MutationRecord"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;message=,name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;firstChild=,nextNode:nextSibling=,ownerDocument=,parent:parentElement=,parentNode=,text:textContent%",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    insertAllBefore$2: function(receiver, newNodes, refChild) {
      var t1, len, i;
      t1 = J.getInterceptor(newNodes);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = newNodes._this;
        if (t1 === receiver)
          throw H.wrapException(new P.ArgumentError(newNodes));
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          receiver.insertBefore(t1.firstChild, refChild);
      } else
        for (t1 = t1.get$iterator(newNodes); t1.moveNext$0();)
          receiver.insertBefore(t1.get$current(), refChild);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    append$1: function(receiver, newChild) {
      return receiver.appendChild(newChild);
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    insertBefore$2: function(receiver, newChild, refChild) {
      return receiver.insertBefore(newChild, refChild);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data=,form=,height%,name%,type%,width%",
    "%": "HTMLObjectElement"
  },
  OptGroupElement: {
    "^": "HtmlElement;label%",
    "%": "HTMLOptGroupElement"
  },
  OptionElement: {
    "^": "HtmlElement;form=,index=,label%,value%",
    $isOptionElement: true,
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;form=,name%,type=,value%",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name%,value%",
    "%": "HTMLParamElement"
  },
  PositionError: {
    "^": "Interceptor;code=,message=",
    "%": "PositionError"
  },
  ProcessingInstruction: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;loaded=",
    $isProgressEvent: true,
    "%": "XMLHttpRequestProgressEvent;ProgressEvent"
  },
  ResourceProgressEvent: {
    "^": "ProgressEvent;url=",
    "%": "ResourceProgressEvent"
  },
  ScriptElement: {
    "^": "HtmlElement;src=,type%",
    $isScriptElement: true,
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;form=,length%,name%,selectedIndex%,type=,value%",
    $isSelectElement: true,
    "%": "HTMLSelectElement"
  },
  ShadowRoot: {
    "^": "DocumentFragment;host=",
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isShadowRoot: true,
    "%": "ShadowRoot"
  },
  SourceElement: {
    "^": "HtmlElement;src=,type%",
    "%": "HTMLSourceElement"
  },
  SpeechInputEvent: {
    "^": "Event;results=",
    "%": "SpeechInputEvent"
  },
  SpeechInputResult: {
    "^": "Interceptor;",
    "%": "SpeechInputResult"
  },
  SpeechRecognitionError: {
    "^": "Event;error=,message=",
    "%": "SpeechRecognitionError"
  },
  SpeechRecognitionEvent: {
    "^": "Event;results=",
    "%": "SpeechRecognitionEvent"
  },
  SpeechRecognitionResult: {
    "^": "Interceptor;isFinal=,length=",
    "%": "SpeechRecognitionResult"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StorageEvent: {
    "^": "Event;key=,newValue=,oldValue=,url=",
    "%": "StorageEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLStyleElement"
  },
  TableCellElement: {
    "^": "HtmlElement;",
    $isTableCellElement: true,
    "%": "HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement"
  },
  TableElement: {
    "^": "HtmlElement;",
    get$rows: function(receiver) {
      return H.setRuntimeTypeInfo(new W._WrappedList(receiver.rows), [W.TableRowElement]);
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "^": "HtmlElement;rowIndex=",
    $isTableRowElement: true,
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "^": "HtmlElement;",
    get$rows: function(receiver) {
      return H.setRuntimeTypeInfo(new W._WrappedList(receiver.rows), [W.TableRowElement]);
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "^": "HtmlElement;content=",
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  Text: {
    "^": "CharacterData;",
    $isText: true,
    "%": "CDATASection|Text"
  },
  TextAreaElement: {
    "^": "HtmlElement;form=,name%,rows%,type=,value%",
    $isTextAreaElement: true,
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  TrackElement: {
    "^": "HtmlElement;kind%,label%,src=",
    "%": "HTMLTrackElement"
  },
  TransitionEvent: {
    "^": "Event;",
    $isTransitionEvent: true,
    "%": "TransitionEvent|WebKitTransitionEvent"
  },
  UIEvent: {
    "^": "Event;",
    "%": "FocusEvent|KeyboardEvent|SVGZoomEvent|TouchEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    "%": "HTMLVideoElement"
  },
  Window: {
    "^": "EventTarget;name%,status%",
    get$location: function(receiver) {
      var result = receiver.location;
      if (W.Window__isDartLocation(result) === true)
        return result;
      if (null == receiver._location_wrapper)
        receiver._location_wrapper = new W._LocationWrapper(result);
      return receiver._location_wrapper;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
        (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    close$0: function(receiver) {
      return receiver.close();
    },
    postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
      receiver.postMessage(P._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
      return;
    },
    postMessage$2: function($receiver, message, targetOrigin) {
      return this.postMessage$3($receiver, message, targetOrigin, null);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$onChange: function(receiver) {
      return C.EventStreamProvider_change.forTarget$1(receiver);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    get$onInput: function(receiver) {
      return C.EventStreamProvider_input.forTarget$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forTarget$1(receiver);
    },
    $isWindow: true,
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value%",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.left, receiver.top), [null]);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  _SpeechInputResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "SpeechInputResultList"
  },
  _SpeechRecognitionResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin3;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(new P.StateError("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "SpeechRecognitionResultList"
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(!!J.getInterceptor(iterable).$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    remove$1: function(_, object) {
      return false;
    },
    insert$2: function(_, index, element) {
      var t1, t2, t3;
      if (index > this._childElements.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._childElements.length));
      t1 = this._childElements;
      t2 = t1.length;
      t3 = this._element;
      if (index === t2)
        t3.appendChild(element);
      else {
        if (index >= t2)
          return H.ioore(t1, index);
        t3.insertBefore(element, t1[index]);
      }
    },
    setAll$2: function(_, index, iterable) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    clear$0: function(_) {
      J.set$text$x(this._element, "");
    },
    get$last: function(_) {
      var result = this._element.lastElementChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    }
  },
  _FrozenElementList: {
    "^": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    get$last: function(_) {
      return C.NodeList_methods.get$last(this._nodeList);
    },
    get$classes: function(_) {
      return W._MultiElementCssClassSet$(this._elementList);
    },
    set$classes: function(_, value) {
      H.IterableMixinWorkaround_forEach(this._elementList, new W._FrozenElementList_classes_closure(value));
    },
    get$onChange: function(_) {
      return C.EventStreamProvider_change._forElementList$1(this);
    },
    get$onClick: function(_) {
      return C.EventStreamProvider_click._forElementList$1(this);
    },
    get$onInput: function(_) {
      return C.EventStreamProvider_input._forElementList$1(this);
    },
    get$onMouseDown: function(_) {
      return C.EventStreamProvider_mousedown._forElementList$1(this);
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = H.setRuntimeTypeInfo(new W._FrozenElementList(_nodeList, null), [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "^": "Closure:115;",
    call$1: [function(e) {
      return !!J.getInterceptor(e).$isElement;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _FrozenElementList_classes_closure: {
    "^": "Closure:115;value_0",
    call$1: [function(e) {
      var t1 = this.value_0;
      J.set$classes$x(e, t1);
      return t1;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  Entry: {
    "^": "Interceptor;"
  },
  Events: {
    "^": "Object;_ptr<",
    $index: function(_, type) {
      return H.setRuntimeTypeInfo(new W._EventStream(this.get$_ptr(), type, false), [null]);
    }
  },
  ElementEvents: {
    "^": "Events;_ptr:html$ElementEvents$_ptr<,_ptr",
    $index: function(_, type) {
      var t1, t2;
      t1 = $.get$ElementEvents_webkitEvents();
      t2 = J.getInterceptor$s(type);
      if (t1.get$keys()._map.containsKey$1(t2.toLowerCase$0(type)))
        if (P.Device_isWebKit() === true)
          return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(this.html$ElementEvents$_ptr, t1.$index(0, t2.toLowerCase$0(type)), false), [null]);
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(this.html$ElementEvents$_ptr, type, false), [null]);
    },
    static: {"^": "ElementEvents_webkitEvents"}
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  HttpRequest_getString_closure: {
    "^": "Closure:115;",
    call$1: [function(xhr) {
      return J.get$responseText$x(xhr);
    }, "call$1", null, 2, 0, null, 387, [], "call"],
    $isFunction: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:296;xhr_0",
    call$2: [function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }, "call$2", null, 4, 0, null, 388, [], 30, [], "call"],
    $isFunction: true
  },
  HttpRequest_request_closure: {
    "^": "Closure:115;completer_1,xhr_2",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2) {
        t2 = t3.future;
        if (t2._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t2._asyncComplete$1(t1);
      } else
        t3.completeError$1(e);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  MutationObserver_observe_override: {
    "^": "Closure:296;parsedOptions_0",
    call$2: [function(key, value) {
      if (value != null)
        this.parsedOptions_0[key] = value;
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(new P.StateError("No elements"));
      return result;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    insert$2: function(_, index, node) {
      var t1, t2, t3;
      if (index > this._this.childNodes.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._this.childNodes.length));
      t1 = this._this;
      t2 = t1.childNodes;
      t3 = t2.length;
      if (index === t3)
        t1.appendChild(node);
      else {
        if (index >= t3)
          return H.ioore(t2, index);
        t1.insertBefore(node, t2[index]);
      }
    },
    insertAll$2: function(_, index, iterable) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index < 0 || index >= t2.length)
        return H.ioore(t2, index);
      J.insertAllBefore$2$x(t1, iterable, t2[index]);
    },
    setAll$2: function(_, index, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot setAll on Node list"));
    },
    remove$1: function(_, object) {
      return false;
    },
    clear$0: function(_) {
      J.set$text$x(this._this, "");
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    }
  },
  Interceptor_ListMixin3: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin3: {
    "^": "Interceptor_ListMixin3+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    }
  },
  _AttributeMap: {
    "^": "Object;",
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new W._AttributeMap_addAll_closure(this));
    },
    containsValue$1: function(value) {
      var t1;
      for (t1 = this.get$values(this), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        ;
      return false;
    },
    clear$0: function(_) {
      var t1;
      for (t1 = this.get$keys(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        this.remove$1(0, t1._current);
    },
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    $isMap: true,
    $asMap: function() {
      return [J.JSString, J.JSString];
    }
  },
  _AttributeMap_addAll_closure: {
    "^": "Closure:296;this_0",
    call$2: [function(k, v) {
      this.this_0.$indexSet(0, k, v);
    }, "call$2", null, 4, 0, null, 372, [], 121, [], "call"],
    $isFunction: true
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    containsKey$1: function(key) {
      return this._element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _MultiElementCssClassSet: {
    "^": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
    readClasses$0: function() {
      var s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_readClasses_closure(s));
      return s;
    },
    writeClasses$1: function(s) {
      var classes, t1;
      classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
      for (t1 = this._elementIterable, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.set$className$x(t1._current, classes);
    },
    modify$1: function(f) {
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_modify_closure(f));
    },
    toggle$2: function(value, shouldAdd) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_toggle_closure(value, shouldAdd));
    },
    toggle$1: function(value) {
      return this.toggle$2(value, null);
    },
    remove$1: function(_, value) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
    },
    _modifyWithReturnValue$1: function(f) {
      return this._elementCssClassSetIterable.fold$2(0, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
    },
    _MultiElementCssClassSet$1: function(_elementIterable) {
      this._elementCssClassSetIterable = H.setRuntimeTypeInfo(new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure()), [null, null]);
    },
    static: {_MultiElementCssClassSet$: function(_elementIterable) {
        var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
        t1._MultiElementCssClassSet$1(_elementIterable);
        return t1;
      }}
  },
  _MultiElementCssClassSet_closure: {
    "^": "Closure:115;",
    call$1: [function(e) {
      return new W._ElementCssClassSet(e);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_readClasses_closure: {
    "^": "Closure:115;s_0",
    call$1: [function(e) {
      return this.s_0.addAll$1(0, e.readClasses$0());
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_modify_closure: {
    "^": "Closure:115;f_0",
    call$1: [function(e) {
      return e.modify$1(this.f_0);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_toggle_closure: {
    "^": "Closure:115;value_0,shouldAdd_1",
    call$1: [function(e) {
      return e.toggle$2(this.value_0, this.shouldAdd_1);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_remove_closure: {
    "^": "Closure:115;value_0",
    call$1: [function(e) {
      return J.remove$1$ax(e, this.value_0);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet__modifyWithReturnValue_closure: {
    "^": "Closure:296;f_0",
    call$2: [function(prevValue, element) {
      return this.f_0.call$1(element) === true || prevValue === true;
    }, "call$2", null, 4, 0, null, 389, [], 141, [], "call"],
    $isFunction: true
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      for (t1 = J.get$className$x(this._element).split(" "), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._element, s.join$1(0, " "));
    }
  },
  EventStreamProvider: {
    "^": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventType, useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    },
    _forElementList$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(e, useCapture, this._eventType), [null]);
    },
    _forElementList$1: function(e) {
      return this._forElementList$2$useCapture(e, false);
    }
  },
  _EventStream: {
    "^": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_html$_target,_eventType,_useCapture",
    matches$1: function(_, selector) {
      var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    },
    $isStream: true
  },
  _ElementEventStreamImpl_matches_closure: {
    "^": "Closure:115;selector_0",
    call$1: [function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    }, "call$1", null, 2, 0, null, 321, [], "call"],
    $isFunction: true
  },
  _ElementEventStreamImpl_matches_closure0: {
    "^": "Closure:115;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _ElementListEventStreamImpl: {
    "^": "Stream;_targetList,_useCapture,_eventType",
    matches$1: function(_, selector) {
      var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = H.setRuntimeTypeInfo(new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null])), [null]);
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1._current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(0, t4);
      }
      t1 = pool._html$_controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    $isStream: true
  },
  _ElementListEventStreamImpl_matches_closure: {
    "^": "Closure:115;selector_0",
    call$1: [function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    }, "call$1", null, 2, 0, null, 321, [], "call"],
    $isFunction: true
  },
  _ElementListEventStreamImpl_matches_closure0: {
    "^": "Closure:115;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      this._pauseCount = this._pauseCount + 1;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function(_) {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      this._pauseCount = this._pauseCount - 1;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    }
  },
  _StreamPool: {
    "^": "Object;_html$_controller,_subscriptions",
    add$1: function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = this._html$_controller;
      t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._html$_controller.get$addError()));
    },
    remove$1: function(_, stream) {
      var subscription = this._subscriptions.remove$1(0, stream);
      if (subscription != null)
        subscription.cancel$0();
    },
    close$0: [function(_) {
      var t1, t2;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.cancel$0();
      t1.clear$0(0);
      this._html$_controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 125],
    _html$_StreamPool$broadcast$0: function($T) {
      this._html$_controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
    }
  },
  _StreamPool_add_closure: {
    "^": "Closure:114;this_0,stream_1",
    call$0: [function() {
      return this.this_0.remove$1(0, this.stream_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _CustomEventStreamProvider: {
    "^": "Object;_eventTypeGetter",
    _eventTypeGetter$1: function(arg0) {
      return this._eventTypeGetter.call$1(arg0);
    },
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventTypeGetter$1(e), useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    insert$2: function(receiver, index, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    insertAll$2: function(receiver, index, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    setAll$2: function(receiver, index, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2: function(receiver, start, end) {
      throw H.wrapException(P.UnsupportedError$("Cannot removeRange on immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _WrappedList: {
    "^": "ListBase;_html$_list",
    get$iterator: function(_) {
      return H.setRuntimeTypeInfo(new W._WrappedIterator(J.get$iterator$ax(this._html$_list)), [null]);
    },
    get$length: function(_) {
      return this._html$_list.length;
    },
    add$1: function(_, element) {
      J.add$1$ax(this._html$_list, element);
    },
    remove$1: function(_, element) {
      return J.remove$1$ax(this._html$_list, element);
    },
    clear$0: function(_) {
      J.clear$0$ax(this._html$_list);
    },
    $index: function(_, index) {
      var t1 = this._html$_list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._html$_list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
    },
    set$length: function(_, newLength) {
      J.set$length$asx(this._html$_list, newLength);
    },
    sort$1: function(_, compare) {
      J.sort$1$ax(this._html$_list, compare);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$2: function(_, element, start) {
      return J.indexOf$2$asx(this._html$_list, element, start);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(_, element, start) {
      return J.lastIndexOf$2$asx(this._html$_list, element, start);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    insert$2: function(_, index, element) {
      return J.insert$2$ax(this._html$_list, index, element);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      J.setRange$4$ax(this._html$_list, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2: function(_, start, end) {
      J.removeRange$2$ax(this._html$_list, start, end);
    }
  },
  _WrappedIterator: {
    "^": "Object;_html$_iterator",
    moveNext$0: function() {
      return this._html$_iterator.moveNext$0();
    },
    get$current: function() {
      return this._html$_iterator._html$_current;
    }
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _callConstructor_closure: {
    "^": "Closure:115;constructor_0,interceptor_1",
    call$1: [function(receiver) {
      var t1 = H.makeLeafDispatchRecord(this.interceptor_1);
      Object.defineProperty(receiver, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      receiver.constructor = receiver.__proto__.constructor;
      return this.constructor_0(receiver);
    }, "call$1", null, 2, 0, null, 47, [], "call"],
    $isFunction: true
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    close$0: function(_) {
      return this._window.close();
    },
    postMessage$3: function(_, message, targetOrigin, messagePorts) {
      this._window.postMessage(message, targetOrigin);
    },
    postMessage$2: function($receiver, message, targetOrigin) {
      return this.postMessage$3($receiver, message, targetOrigin, null);
    },
    get$on: function(_) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: [function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }, "call$1", "_DOMWindowCrossFrame__createSafe$closure", 2, 0, null, 243, []]}
  },
  _LocationWrapper: {
    "^": "Object;_ptr",
    get$hash: function(_) {
      return this._ptr.hash;
    },
    set$hash: function(_, value) {
      this._ptr.hash = value;
    },
    get$host: function(_) {
      return this._ptr.host;
    },
    get$href: function(_) {
      return this._ptr.href;
    },
    reload$0: function(_) {
      return this._ptr.reload();
    },
    toString$0: function(_) {
      return this._ptr.toString();
    },
    $isLocation: true
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=,href=",
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;href=",
    "%": "SVGAltGlyphElement"
  },
  FEBlendElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,values=,height=,result=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;operator=,height=,result=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=,href=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;operator=,height=,result=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,result=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=,href=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=,href=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=,href=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type%,href=",
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type%",
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    set$children: function(receiver, value) {
      var children = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
      J.set$text$x(children._childNodes._this, "");
      children.addAll$1(0, value);
    },
    get$onChange: function(receiver) {
      return C.EventStreamProvider_change.forElement$1(receiver);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onInput: function(receiver) {
      return C.EventStreamProvider_input.forElement$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forElement$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forElement$1(receiver);
    },
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement",
    static: {"^": "SvgElement_pauseEvent<"}
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isSvgSvgElement: true,
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;method=,href=",
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=,href=",
    "%": "SVGUseElement"
  },
  _GradientElement: {
    "^": "SvgElement;href=",
    "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlError: {
    "^": "Interceptor;code=,message=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _convertDartFunction: [function(f, captureThis) {
    return function(_call, f, captureThis) {return function() {return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));}}(P._callDartFunction, f, captureThis);
  }, "call$2$captureThis", "_convertDartFunction$closure", 2, 3, null, 219, 127, [], 244, []],
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 164, [], 244, [], 177, [], 89, []],
  _defineProperty: [function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o))
      try {
        Object.defineProperty(o, $name, { value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  }, "call$3", "_defineProperty$closure", 6, 0, null, 98, [], 12, [], 30, []],
  _getOwnProperty: [function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  }, "call$2", "_getOwnProperty$closure", 4, 0, null, 98, [], 12, []],
  _convertToJS: [function(o) {
    var t1;
    if (o == null)
      return;
    else {
      if (typeof o !== "string")
        if (typeof o !== "number")
          if (typeof o !== "boolean") {
            t1 = J.getInterceptor(o);
            t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
          } else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return o;
      else {
        t1 = J.getInterceptor(o);
        if (!!t1.$isDateTime)
          return H.Primitives_lazyAsJsDate(o);
        else if (!!t1.$isJsObject)
          return o._jsObject;
        else if (!!t1.$isFunction)
          return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
        else
          return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
      }
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 115, 98, []],
  _getJsProxy: [function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  }, "call$3", "_getJsProxy$closure", 6, 0, null, 98, [], 68, [], 246, []],
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 203, 98, []],
  _wrapToDart: [function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  }, "call$1", "_wrapToDart$closure", 2, 0, null, 98, []],
  _getDartProxy: [function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  }, "call$3", "_getDartProxy$closure", 6, 0, null, 98, [], 68, [], 246, []],
  JsObject: {
    "^": "Object;_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(new P.ArgumentError("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(new P.ArgumentError("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._jsObject === other._jsObject;
    },
    hasProperty$1: function(property) {
      return property in this._jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    },
    $isJsObject: true,
    static: {JsObject_JsObject: function($constructor, $arguments) {
        var constr, args, factoryFunction;
        constr = P._convertToJS($constructor);
        if ($arguments == null)
          return P._wrapToDart(new constr());
        args = [null];
        C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P._convertToJS$closure()), [null, null]));
        factoryFunction = constr.bind.apply(constr, args);
        String(factoryFunction);
        return P._wrapToDart(new factoryFunction());
      }, JsObject_JsObject$jsify: function(object) {
        return P._wrapToDart(P.JsObject__convertDataTree(object));
      }, JsObject__convertDataTree: [function(data) {
        return new P.JsObject__convertDataTree__convert(P.HashMap_HashMap$identity(null, null)).call$1(data);
      }, "call$1", "JsObject__convertDataTree$closure", 2, 0, null, 245, []]}
  },
  JsObject__convertDataTree__convert: {
    "^": "Closure:115;_convertedObjects_0",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._convertedObjects_0;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  JsFunction: {
    "^": "JsObject;_jsObject"
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    _checkRange$2: function(start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, P.JsObject.prototype.$index.call(this, this, "length")))
        throw H.wrapException(P.RangeError$range(start, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, P.JsObject.prototype.$index.call(this, this, "length")))
        throw H.wrapException(P.RangeError$range(end, start, P.JsObject.prototype.$index.call(this, this, "length")));
    },
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          if (!(index < 0)) {
            t1 = P.JsObject.prototype.$index.call(this, this, "length");
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = index >= t1;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          if (!(index < 0)) {
            t1 = P.JsObject.prototype.$index.call(this, this, "length");
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = index >= t1;
          } else
            t1 = true;
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      return P.JsObject.prototype.$index.call(this, this, "length");
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    },
    addAll$1: function(_, iterable) {
      this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
    },
    insert$2: function(_, index, element) {
      var t1 = J.$add$ns(P.JsObject.prototype.$index.call(this, this, "length"), 1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = index >= t1;
      if (t1)
        H.throwExpression(P.RangeError$range(index, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      this.callMethod$2("splice", [index, 0, element]);
    },
    removeRange$2: function(_, start, end) {
      this._checkRange$2(start, end);
      this.callMethod$2("splice", [start, end - start]);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1, $length, args;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, P.JsObject.prototype.$index.call(this, this, "length")))
        H.throwExpression(P.RangeError$range(start, 0, P.JsObject.prototype.$index.call(this, this, "length")));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, P.JsObject.prototype.$index.call(this, this, "length")))
        H.throwExpression(P.RangeError$range(end, start, P.JsObject.prototype.$index.call(this, this, "length")));
      $length = t1.$sub(end, start);
      if (J.$eq($length, 0))
        return;
      if (skipCount < 0)
        throw H.wrapException(new P.ArgumentError(skipCount));
      args = [start, $length];
      C.JSArray_methods.addAll$1(args, J.skip$1$ax(iterable, skipCount).take$1(0, $length));
      this.callMethod$2("splice", args);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    sort$1: function(_, compare) {
      this.callMethod$2("sort", [compare]);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    }
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure:115;",
    call$1: [function(o) {
      var jsFunction = P._convertDartFunction(o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  _convertToJS_closure0: {
    "^": "Closure:115;ctor_0",
    call$1: [function(o) {
      return new this.ctor_0(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  _wrapToDart_closure: {
    "^": "Closure:115;",
    call$1: [function(o) {
      return new P.JsFunction(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  _wrapToDart_closure0: {
    "^": "Closure:115;",
    call$1: [function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  },
  _wrapToDart_closure1: {
    "^": "Closure:115;",
    call$1: [function(o) {
      return new P.JsObject(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: [function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  }, "call$2", "_JenkinsSmiHash_combine0$closure", 4, 0, null, 235, [], 30, []],
  _JenkinsSmiHash_finish: [function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  }, "call$1", "_JenkinsSmiHash_finish$closure", 2, 0, null, 235, []],
  min: [function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && C.JSDouble_methods.get$isNegative(b) || C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
  }, "call$2", "min$closure", 4, 0, null, 117, [], 196, []],
  max: [function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  }, "call$2", "max$closure", 4, 0, null, 117, [], 196, []],
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    }
  },
  _Random: {
    "^": "Object;_lo,_hi",
    _nextState$0: function() {
      var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
      t1 = this._lo;
      tmpHi = 4294901760 * t1;
      tmpHiLo = (tmpHi & 4294967295) >>> 0;
      tmpLo = 55905 * t1;
      tmpLoLo = (tmpLo & 4294967295) >>> 0;
      newLo = tmpLoLo + tmpHiLo + this._hi;
      t1 = (newLo & 4294967295) >>> 0;
      this._lo = t1;
      this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
    },
    nextInt$1: function(max) {
      var t1, rnd32, result;
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      t1 = max - 1;
      if ((max & t1) === 0) {
        this._nextState$0();
        return (this._lo & t1) >>> 0;
      }
      do {
        this._nextState$0();
        rnd32 = this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    _Random$1: function(seed) {
      var empty_seed, t1, low, high, tmplow, low0, t2, t3;
      empty_seed = J.$lt$n(seed, 0) ? -1 : 0;
      do {
        t1 = J.getInterceptor$n(seed);
        low = t1.$and(seed, 4294967295);
        seed = J.$tdiv$n(t1.$sub(seed, low), 4294967296);
        t1 = J.getInterceptor$n(seed);
        high = t1.$and(seed, 4294967295);
        seed = J.$tdiv$n(t1.$sub(seed, high), 4294967296);
        tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
        low0 = (tmplow & 4294967295) >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = (tmplow & 4294967295) >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = (tmplow & 4294967295) >>> 0;
        t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
        tmplow = this._lo * 1037;
        t2 = (tmplow & 4294967295) >>> 0;
        this._lo = t2;
        t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
        this._hi = t3;
        this._lo = (t2 ^ low0) >>> 0;
        this._hi = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
      } while (!J.$eq(seed, empty_seed));
      if (this._hi === 0 && this._lo === 0)
        this._lo = 23063;
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
      this._nextState$0();
    },
    static: {"^": "_Random__POW2_53_D,_Random__POW2_27_D,_Random__MASK32", _Random$: function(seed) {
        var t1 = new P._Random(0, 0);
        t1._Random$1(seed);
        return t1;
      }}
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      t1 = this.x;
      t2 = other.x;
      return (t1 == null ? t2 == null : t1 === t2) && J.$eq(this.y, other.y);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = new P.Point(t1 + t3, J.$add$ns(this.y, t2.get$y(other)));
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = new P.Point(t1 - t3, J.$sub$n(this.y, t2.get$y(other)));
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t1 = new P.Point(t1 * factor, J.$mul$ns(this.y, factor));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      var t1 = this.get$left(this);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + this.width;
    },
    get$bottom: function(_) {
      var t1 = this.get$top(this);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = this.get$left(this);
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t3 = this.left;
          if (typeof t3 !== "number")
            return t3.$add();
          if (t3 + this.width === t1.get$right(other)) {
            if (typeof t2 !== "number")
              return t2.$add();
            t1 = t2 + this.height === t1.get$bottom(other);
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = this.top;
      t3 = J.get$hashCode$(t2);
      t4 = this.left;
      if (typeof t4 !== "number")
        return t4.$add();
      t4 = t4 + this.width & 0x1FFFFFFF;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = t2 + this.height & 0x1FFFFFFF;
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t3), t4), t2));
    },
    get$topLeft: function(_) {
      var t1 = new P.Point(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        if (typeof width !== "number")
          return width.$ge();
        if (width >= 0)
          t1 = width;
        else
          t1 = -width * 0;
        if (typeof height !== "number")
          return height.$ge();
        if (height >= 0)
          t2 = height;
        else
          t2 = -height * 0;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.mirrors", "dart:mirrors", , P, {
  "^": "",
  reflectClass: [function(key) {
    var t1, tm;
    t1 = J.getInterceptor(key);
    if (!t1.$isType || t1.$eq(key, C.Type_e5Z))
      throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
    tm = P.reflectType(key);
    if (!J.getInterceptor(tm).$isClassMirror)
      throw H.wrapException(new P.ArgumentError(H.S(key) + " does not denote a class"));
    return tm.get$originalDeclaration();
  }, "call$1", "reflectClass$closure", 2, 0, null, 48, []],
  reflectType: [function(key) {
    if (J.$eq(key, C.Type_e5Z)) {
      $.get$currentJsMirrorSystem().toString;
      return $.get$JsMirrorSystem__dynamicType();
    }
    return H.reflectClassByMangledName(key.get$_typeName());
  }, "call$1", "reflectType$closure", 2, 0, null, 48, []],
  Mirror: {
    "^": "Object;",
    $isMirror: true
  },
  DeclarationMirror: {
    "^": "Object;",
    $isDeclarationMirror: true,
    $isMirror: true
  },
  InstanceMirror: {
    "^": "Object;",
    $isInstanceMirror: true,
    $isMirror: true
  },
  LibraryMirror: {
    "^": "Object;",
    $isLibraryMirror: true,
    $isMirror: true,
    $isDeclarationMirror: true
  },
  TypeMirror: {
    "^": "Object;",
    $isTypeMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  ClassMirror: {
    "^": "Object;",
    $isClassMirror: true,
    $isMirror: true,
    $isTypeMirror: true,
    $isDeclarationMirror: true
  },
  TypeVariableMirror: {
    "^": "TypeMirror;",
    $isTypeVariableMirror: true
  },
  MethodMirror: {
    "^": "Object;",
    $isMethodMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  VariableMirror: {
    "^": "Object;",
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  ParameterMirror: {
    "^": "Object;",
    $isParameterMirror: true,
    $isVariableMirror: true,
    $isDeclarationMirror: true,
    $isMirror: true
  },
  MirrorsUsed: {
    "^": "Object;symbols,targets,metaTargets,override"
  }
}],
["dart.pkg.collection.wrappers", "package:collection/wrappers.dart", , Q, {
  "^": "",
  UnmodifiableMapMixin__throw: [function() {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
  }, "call$0", "UnmodifiableMapMixin__throw$closure", 0, 0, null],
  UnmodifiableMapView: {
    "^": "DelegatingMap_UnmodifiableMapMixin;_base"
  },
  DelegatingMap_UnmodifiableMapMixin: {
    "^": "DelegatingMap+UnmodifiableMapMixin;",
    $isMap: true
  },
  UnmodifiableMapMixin: {
    "^": "Object;",
    $indexSet: function(_, key, value) {
      return Q.UnmodifiableMapMixin__throw();
    },
    addAll$1: function(_, other) {
      return Q.UnmodifiableMapMixin__throw();
    },
    remove$1: function(_, key) {
      Q.UnmodifiableMapMixin__throw();
    },
    clear$0: function(_) {
      return Q.UnmodifiableMapMixin__throw();
    },
    $isMap: true
  },
  DelegatingMap: {
    "^": "Object;",
    $index: function(_, key) {
      return this._base.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._base.$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      this._base.addAll$1(0, other);
    },
    clear$0: function(_) {
      this._base.clear$0(0);
    },
    containsKey$1: function(key) {
      return this._base.containsKey$1(key);
    },
    containsValue$1: function(value) {
      return this._base.containsValue$1(value);
    },
    forEach$1: function(_, f) {
      this._base.forEach$1(0, f);
    },
    get$isEmpty: function(_) {
      return this._base._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._base._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = this._base;
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._base._collection$_length;
    },
    remove$1: function(_, key) {
      return this._base.remove$1(0, key);
    },
    get$values: function(_) {
      var t1 = this._base;
      return t1.get$values(t1);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this._base);
    },
    $isMap: true
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedArray$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfDouble$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfInt$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    get$runtimeType: function(receiver) {
      return C.Type_wAg;
    },
    $isNativeByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(new P.ArgumentError("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      this._checkIndex$2(receiver, start, $length + 1);
      return $length;
    },
    $isNativeTypedData: true,
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    get$runtimeType: function(receiver) {
      return C.Type_oGP;
    },
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_Art;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isTypedData: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_ckn;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    },
    $isTypedData: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_UoK;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_dTZ;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_mp3;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_CAk;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_irB;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_QuW;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_6L0;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    },
    $isTypedData: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = J.$sub$n(end, start);
      if (skipCount < 0)
        throw H.wrapException(new P.ArgumentError(skipCount));
      sourceLength = source.length;
      if (typeof count !== "number")
        return H.iae(count);
      if (sourceLength - skipCount < count)
        throw H.wrapException(new P.StateError("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSDouble];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSInt];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: [function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }, "call$1", "printString$closure", 2, 0, null, 14, []]
}],
["error_view_element", "package:observatory/src/elements/error_view.dart", , F, {
  "^": "",
  ErrorViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier4;_error_view_element$__$error%-337,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$error: [function(receiver) {
      return receiver._error_view_element$__$error;
    }, null, null, 1, 0, 316, "error", 304, 307],
    set$error: [function(receiver, value) {
      receiver._error_view_element$__$error = this.notifyPropertyChange$3(receiver, C.Symbol_error, receiver._error_view_element$__$error, value);
    }, null, null, 3, 0, 317, 30, [], "error", 304],
    "@": function() {
      return [C.CustomTag_m1p];
    },
    static: {ErrorViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ErrorViewElement_methods.Element$created$0(receiver);
        C.ErrorViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ErrorViewElement$created"]}
  },
  "+ErrorViewElement": [390],
  ObservatoryElement_ChangeNotifier4: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["eval_box_element", "package:observatory/src/elements/eval_box.dart", , L, {
  "^": "",
  EvalBoxElement: {
    "^": ["ObservatoryElement_ChangeNotifier5;_eval_box_element$__$text%-301,_eval_box_element$__$lineMode%-301,_eval_box_element$__$callback%-391,_eval_box_element$__$results%-392,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$text: [function(receiver) {
      return receiver._eval_box_element$__$text;
    }, null, null, 1, 0, 308, "text", 304, 305],
    set$text: [function(receiver, value) {
      receiver._eval_box_element$__$text = this.notifyPropertyChange$3(receiver, C.Symbol_text, receiver._eval_box_element$__$text, value);
    }, null, null, 3, 0, 32, 30, [], "text", 304],
    get$lineMode: [function(receiver) {
      return receiver._eval_box_element$__$lineMode;
    }, null, null, 1, 0, 308, "lineMode", 304, 305],
    set$lineMode: [function(receiver, value) {
      receiver._eval_box_element$__$lineMode = this.notifyPropertyChange$3(receiver, C.Symbol_lineMode, receiver._eval_box_element$__$lineMode, value);
    }, null, null, 3, 0, 32, 30, [], "lineMode", 304],
    get$callback: [function(receiver) {
      return receiver._eval_box_element$__$callback;
    }, null, null, 1, 0, 393, "callback", 304, 307],
    callback$0: function($receiver) {
      return this.get$callback($receiver).call$0();
    },
    callback$1: function($receiver, arg0) {
      return this.get$callback($receiver).call$1(arg0);
    },
    set$callback: [function(receiver, value) {
      receiver._eval_box_element$__$callback = this.notifyPropertyChange$3(receiver, C.Symbol_callback, receiver._eval_box_element$__$callback, value);
    }, null, null, 3, 0, 394, 30, [], "callback", 304],
    get$results: [function(receiver) {
      return receiver._eval_box_element$__$results;
    }, null, null, 1, 0, 395, "results", 304, 305],
    set$results: [function(receiver, value) {
      receiver._eval_box_element$__$results = this.notifyPropertyChange$3(receiver, C.Symbol_results, receiver._eval_box_element$__$results, value);
    }, null, null, 3, 0, 396, 30, [], "results", 304],
    updateLineMode$3: [function(receiver, e, detail, target) {
      var t1 = H.interceptedTypeCast(J.get$target$x(e), "$isInputElement").value;
      t1 = this.notifyPropertyChange$3(receiver, C.Symbol_lineMode, receiver._eval_box_element$__$lineMode, t1);
      receiver._eval_box_element$__$lineMode = t1;
      if (J.$eq(t1, "1-line")) {
        t1 = J.replaceAll$2$s(receiver._eval_box_element$__$text, "\n", " ");
        receiver._eval_box_element$__$text = this.notifyPropertyChange$3(receiver, C.Symbol_text, receiver._eval_box_element$__$text, t1);
      }
    }, "call$3", "get$updateLineMode", 6, 0, 346, 21, [], 347, [], 81, [], "updateLineMode"],
    eval$3: [function(receiver, e, detail, target) {
      var expr, t1, map;
      J.preventDefault$0$x(e);
      expr = receiver._eval_box_element$__$text;
      receiver._eval_box_element$__$text = this.notifyPropertyChange$3(receiver, C.Symbol_text, expr, "");
      if (receiver._eval_box_element$__$callback != null) {
        t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        map = R._toObservableDeep(t1);
        J.$indexSet$ax(map, "expr", expr);
        J.insert$2$ax(receiver._eval_box_element$__$results, 0, map);
        this.callback$1(receiver, expr).then$1(new L.EvalBoxElement_eval_closure(map));
      }
    }, "call$3", "get$eval", 6, 0, 346, 21, [], 347, [], 81, [], "eval"],
    selectExpr$1: [function(receiver, e) {
      var t1 = J.getAttribute$1$x(J.get$target$x(e), "expr");
      receiver._eval_box_element$__$text = this.notifyPropertyChange$3(receiver, C.Symbol_text, receiver._eval_box_element$__$text, t1);
    }, "call$1", "get$selectExpr", 2, 0, 397, 21, [], "selectExpr"],
    "@": function() {
      return [C.CustomTag_if9];
    },
    static: {EvalBoxElement$created: [function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = R._toObservableDeep([]);
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t4 = J.JSString;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver._eval_box_element$__$lineMode = "1-line";
        receiver._eval_box_element$__$results = t1;
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.EvalBoxElement_methods.Element$created$0(receiver);
        C.EvalBoxElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new EvalBoxElement$created"]}
  },
  "+EvalBoxElement": [398],
  ObservatoryElement_ChangeNotifier5: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  EvalBoxElement_eval_closure: {
    "^": "Closure:115;map_0-84",
    call$1: [function(result) {
      J.$indexSet$ax(this.map_0, "value", result);
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ EvalBoxElement_eval_closure": [311]
}],
["eval_link_element", "package:observatory/src/elements/eval_link.dart", , R, {
  "^": "",
  EvalLinkElement: {
    "^": ["PolymerElement_ChangeNotifier1;_eval_link_element$__$busy%-300,_eval_link_element$__$label%-301,_eval_link_element$__$callback%-84,_eval_link_element$__$expr%-84,_eval_link_element$__$result%-337,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$busy: [function(receiver) {
      return receiver._eval_link_element$__$busy;
    }, null, null, 1, 0, 303, "busy", 304, 305],
    set$busy: [function(receiver, value) {
      receiver._eval_link_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, receiver._eval_link_element$__$busy, value);
    }, null, null, 3, 0, 306, 30, [], "busy", 304],
    get$label: [function(receiver) {
      return receiver._eval_link_element$__$label;
    }, null, null, 1, 0, 308, "label", 304, 307],
    set$label: [function(receiver, value) {
      receiver._eval_link_element$__$label = this.notifyPropertyChange$3(receiver, C.Symbol_label, receiver._eval_link_element$__$label, value);
    }, null, null, 3, 0, 32, 30, [], "label", 304],
    get$callback: [function(receiver) {
      return receiver._eval_link_element$__$callback;
    }, null, null, 1, 0, 114, "callback", 304, 307],
    callback$0: function($receiver) {
      return this.get$callback($receiver).call$0();
    },
    callback$1: function($receiver, arg0) {
      return this.get$callback($receiver).call$1(arg0);
    },
    set$callback: [function(receiver, value) {
      receiver._eval_link_element$__$callback = this.notifyPropertyChange$3(receiver, C.Symbol_callback, receiver._eval_link_element$__$callback, value);
    }, null, null, 3, 0, 115, 30, [], "callback", 304],
    get$expr: [function(receiver) {
      return receiver._eval_link_element$__$expr;
    }, null, null, 1, 0, 114, "expr", 304, 307],
    set$expr: [function(receiver, value) {
      receiver._eval_link_element$__$expr = this.notifyPropertyChange$3(receiver, C.Symbol_expr, receiver._eval_link_element$__$expr, value);
    }, null, null, 3, 0, 115, 30, [], "expr", 304],
    get$result: [function(receiver) {
      return receiver._eval_link_element$__$result;
    }, null, null, 1, 0, 316, "result", 304, 307],
    set$result: [function(receiver, value) {
      receiver._eval_link_element$__$result = this.notifyPropertyChange$3(receiver, C.Symbol_result, receiver._eval_link_element$__$result, value);
    }, null, null, 3, 0, 317, 30, [], "result", 304],
    evalNow$3: [function(receiver, a, b, c) {
      var t1 = receiver._eval_link_element$__$busy;
      if (t1 === true)
        return;
      if (receiver._eval_link_element$__$callback != null) {
        receiver._eval_link_element$__$busy = this.notifyPropertyChange$3(receiver, C.Symbol_busy, t1, true);
        receiver._eval_link_element$__$result = this.notifyPropertyChange$3(receiver, C.Symbol_result, receiver._eval_link_element$__$result, null);
        this.callback$1(receiver, receiver._eval_link_element$__$expr).then$1(new R.EvalLinkElement_evalNow_closure(receiver)).whenComplete$1(new R.EvalLinkElement_evalNow_closure0(receiver));
      }
    }, "call$3", "get$evalNow", 6, 0, 309, 117, [], 196, [], 285, [], "evalNow"],
    "@": function() {
      return [C.CustomTag_MUx];
    },
    static: {EvalLinkElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._eval_link_element$__$busy = false;
        receiver._eval_link_element$__$label = "[evaluate]";
        receiver._eval_link_element$__$callback = null;
        receiver._eval_link_element$__$expr = "";
        receiver._eval_link_element$__$result = null;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.EvalLinkElement_methods.Element$created$0(receiver);
        C.EvalLinkElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new EvalLinkElement$created"]}
  },
  "+EvalLinkElement": [399],
  PolymerElement_ChangeNotifier1: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  EvalLinkElement_evalNow_closure: {
    "^": "Closure:317;this_0-84",
    call$1: [function(obj) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_eval_link_element$__$result(t1, t2.notifyPropertyChange$3(t1, C.Symbol_result, t2.get$_eval_link_element$__$result(t1), obj));
    }, "call$1", null, 2, 0, 317, 100, [], "call"],
    $isFunction: true
  },
  "+ EvalLinkElement_evalNow_closure": [311],
  EvalLinkElement_evalNow_closure0: {
    "^": "Closure:114;this_1-84",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1;
      t2 = J.getInterceptor$x(t1);
      t2.set$_eval_link_element$__$busy(t1, t2.notifyPropertyChange$3(t1, C.Symbol_busy, t2.get$_eval_link_element$__$busy(t1), false));
    }, "call$0", null, 0, 0, 114, "call"],
    $isFunction: true
  },
  "+ EvalLinkElement_evalNow_closure0": [311]
}],
["field_ref_element", "package:observatory/src/elements/field_ref.dart", , D, {
  "^": "",
  FieldRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    "@": function() {
      return [C.CustomTag_A6W];
    },
    static: {FieldRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.FieldRefElement_methods.Element$created$0(receiver);
        C.FieldRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new FieldRefElement$created"]}
  },
  "+FieldRefElement": [338]
}],
["field_view_element", "package:observatory/src/elements/field_view.dart", , A, {
  "^": "",
  FieldViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier6;_field_view_element$__$field%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$field: [function(receiver) {
      return receiver._field_view_element$__$field;
    }, null, null, 1, 0, 333, "field", 304, 307],
    set$field: [function(receiver, value) {
      receiver._field_view_element$__$field = this.notifyPropertyChange$3(receiver, C.Symbol_field, receiver._field_view_element$__$field, value);
    }, null, null, 3, 0, 334, 30, [], "field", 304],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._field_view_element$__$field).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_sYc];
    },
    static: {FieldViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.FieldViewElement_methods.Element$created$0(receiver);
        C.FieldViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new FieldViewElement$created"]}
  },
  "+FieldViewElement": [400],
  ObservatoryElement_ChangeNotifier6: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["function_ref_element", "package:observatory/src/elements/function_ref.dart", , U, {
  "^": "",
  FunctionRefElement: {
    "^": ["ServiceRefElement_ChangeNotifier;_function_ref_element$__$qualified%-300,_function_ref_element$__$hasParent%-300,_function_ref_element$__$hasClass%-300,_function_ref_element$__$isDart%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$qualified: [function(receiver) {
      return receiver._function_ref_element$__$qualified;
    }, null, null, 1, 0, 303, "qualified", 304, 307],
    set$qualified: [function(receiver, value) {
      receiver._function_ref_element$__$qualified = this.notifyPropertyChange$3(receiver, C.Symbol_qualified, receiver._function_ref_element$__$qualified, value);
    }, null, null, 3, 0, 306, 30, [], "qualified", 304],
    refChanged$1: [function(receiver, oldValue) {
      var refMap, t1, t2;
      Q.ServiceRefElement.prototype.refChanged$1.call(this, receiver, oldValue);
      this.notifyPropertyChange$3(receiver, C.Symbol_hasParent, 0, 1);
      this.notifyPropertyChange$3(receiver, C.Symbol_hasClass, 0, 1);
      refMap = receiver._service_ref_element$__$ref;
      t1 = refMap != null;
      if (t1) {
        t2 = J.getInterceptor$asx(refMap);
        t2 = !J.$eq(t2.$index(refMap, "kind"), "Collected") && !J.$eq(t2.$index(refMap, "kind"), "Native") && !J.$eq(t2.$index(refMap, "kind"), "Tag") && !J.$eq(t2.$index(refMap, "kind"), "Reused");
      } else
        t2 = false;
      receiver._function_ref_element$__$isDart = this.notifyPropertyChange$3(receiver, C.Symbol_isDart, receiver._function_ref_element$__$isDart, t2);
      t2 = t1 && J.$index$asx(refMap, "parent") != null;
      receiver._function_ref_element$__$hasParent = this.notifyPropertyChange$3(receiver, C.Symbol_hasParent, receiver._function_ref_element$__$hasParent, t2);
      if (t1) {
        t1 = J.getInterceptor$asx(refMap);
        t1 = t1.$index(refMap, "owner") != null && J.$eq(t1.$index(refMap, "owner").get$serviceType(), "Class");
      } else
        t1 = false;
      receiver._function_ref_element$__$hasClass = this.notifyPropertyChange$3(receiver, C.Symbol_hasClass, receiver._function_ref_element$__$hasClass, t1);
    }, "call$1", "get$refChanged", 2, 0, 166, 239, [], "refChanged"],
    get$hasParent: [function(receiver) {
      return receiver._function_ref_element$__$hasParent;
    }, null, null, 1, 0, 303, "hasParent", 304, 305],
    set$hasParent: [function(receiver, value) {
      receiver._function_ref_element$__$hasParent = this.notifyPropertyChange$3(receiver, C.Symbol_hasParent, receiver._function_ref_element$__$hasParent, value);
    }, null, null, 3, 0, 306, 30, [], "hasParent", 304],
    get$hasClass: [function(receiver) {
      return receiver._function_ref_element$__$hasClass;
    }, null, null, 1, 0, 303, "hasClass", 304, 305],
    set$hasClass: [function(receiver, value) {
      receiver._function_ref_element$__$hasClass = this.notifyPropertyChange$3(receiver, C.Symbol_hasClass, receiver._function_ref_element$__$hasClass, value);
    }, null, null, 3, 0, 306, 30, [], "hasClass", 304],
    get$isDart: [function(receiver) {
      return receiver._function_ref_element$__$isDart;
    }, null, null, 1, 0, 303, "isDart", 304, 305],
    set$isDart: [function(receiver, value) {
      receiver._function_ref_element$__$isDart = this.notifyPropertyChange$3(receiver, C.Symbol_isDart, receiver._function_ref_element$__$isDart, value);
    }, null, null, 3, 0, 306, 30, [], "isDart", 304],
    "@": function() {
      return [C.CustomTag_qGx];
    },
    static: {FunctionRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._function_ref_element$__$qualified = true;
        receiver._function_ref_element$__$hasParent = false;
        receiver._function_ref_element$__$hasClass = false;
        receiver._function_ref_element$__$isDart = false;
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.FunctionRefElement_methods.Element$created$0(receiver);
        C.FunctionRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new FunctionRefElement$created"]}
  },
  "+FunctionRefElement": [401],
  ServiceRefElement_ChangeNotifier: {
    "^": "ServiceRefElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["function_view_element", "package:observatory/src/elements/function_view.dart", , N, {
  "^": "",
  FunctionViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier7;_function_view_element$__$function%-332,_function_view_element$__$qualifiedName%-301,_function_view_element$__$kind%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$$function: [function(receiver) {
      return receiver._function_view_element$__$function;
    }, null, null, 1, 0, 333, "function", 304, 307],
    set$$function: [function(receiver, value) {
      receiver._function_view_element$__$function = this.notifyPropertyChange$3(receiver, C.Symbol_function, receiver._function_view_element$__$function, value);
    }, null, null, 3, 0, 334, 30, [], "function", 304],
    get$qualifiedName: [function(receiver) {
      return receiver._function_view_element$__$qualifiedName;
    }, null, null, 1, 0, 308, "qualifiedName", 304, 307],
    set$qualifiedName: [function(receiver, value) {
      receiver._function_view_element$__$qualifiedName = this.notifyPropertyChange$3(receiver, C.Symbol_qualifiedName, receiver._function_view_element$__$qualifiedName, value);
    }, null, null, 3, 0, 32, 30, [], "qualifiedName", 304],
    get$kind: [function(receiver) {
      return receiver._function_view_element$__$kind;
    }, null, null, 1, 0, 308, "kind", 304, 307],
    set$kind: [function(receiver, value) {
      receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, receiver._function_view_element$__$kind, value);
    }, null, null, 3, 0, 32, 30, [], "kind", 304],
    _getQualifiedName$1: [function(receiver, $function) {
      var t1, $parent, cls;
      t1 = $function != null;
      $parent = t1 && J.$index$asx($function, "parent") != null ? J.$index$asx($function, "parent") : null;
      if ($parent != null)
        return this._getQualifiedName$1(receiver, $parent) + "." + H.S(J.$index$asx($function, "user_name"));
      if (t1) {
        t1 = J.getInterceptor$asx($function);
        t1 = t1.$index($function, "owner") != null && J.$eq(t1.$index($function, "owner").get$serviceType(), "Class");
      } else
        t1 = false;
      cls = t1 ? J.$index$asx($function, "owner") : null;
      if (cls != null)
        return H.S(J.$index$asx(cls, "user_name")) + "." + H.S(J.$index$asx($function, "user_name"));
      return H.S(J.$index$asx($function, "user_name"));
    }, "call$1", "get$_getQualifiedName", 2, 0, 402, 17, [], "_getQualifiedName"],
    functionChanged$1: [function(receiver, oldValue) {
      var t1, t2;
      this.notifyPropertyChange$3(receiver, C.Symbol_qualifiedName, 0, 1);
      this.notifyPropertyChange$3(receiver, C.Symbol_kind, 0, 1);
      t1 = this._getQualifiedName$1(receiver, receiver._function_view_element$__$function);
      receiver._function_view_element$__$qualifiedName = this.notifyPropertyChange$3(receiver, C.Symbol_qualifiedName, receiver._function_view_element$__$qualifiedName, t1);
      t1 = J.$index$asx(receiver._function_view_element$__$function, "kind");
      t2 = receiver._function_view_element$__$kind;
      switch (t1) {
        case "kRegularFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "function");
          break;
        case "kClosureFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "closure function");
          break;
        case "kSignatureFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "signature function");
          break;
        case "kGetterFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "getter function");
          break;
        case "kSetterFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "setter function");
          break;
        case "kConstructor":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "constructor");
          break;
        case "kImplicitGetterFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "implicit getter function");
          break;
        case "kImplicitSetterFunction":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "implicit setter function");
          break;
        case "kStaticInitializer":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "static initializer");
          break;
        case "kMethodExtractor":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "method extractor");
          break;
        case "kNoSuchMethodDispatcher":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "noSuchMethod dispatcher");
          break;
        case "kInvokeFieldDispatcher":
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "invoke field dispatcher");
          break;
        default:
          receiver._function_view_element$__$kind = this.notifyPropertyChange$3(receiver, C.Symbol_kind, t2, "UNKNOWN");
          break;
      }
    }, "call$1", "get$functionChanged", 2, 0, 166, 239, [], "functionChanged"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._function_view_element$__$function).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_I0v];
    },
    static: {FunctionViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.FunctionViewElement_methods.Element$created$0(receiver);
        C.FunctionViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new FunctionViewElement$created"]}
  },
  "+FunctionViewElement": [403],
  ObservatoryElement_ChangeNotifier7: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["heap_map_element", "package:observatory/src/elements/heap_map.dart", , O, {
  "^": "",
  PixelReference: {
    "^": "Object;_data,_dataIndex",
    next$0: [function() {
      return new O.PixelReference(this._data, J.$add$ns(this._dataIndex, 4));
    }, "call$0", "get$next", 0, 0, 404],
    get$index: function(_) {
      return J.$tdiv$n(this._dataIndex, 4);
    },
    static: {"^": "PixelReference_NUM_COLOR_COMPONENTS", PixelReference$: function(data, point) {
        var t1 = J.getInterceptor$x(point);
        return new O.PixelReference(data, J.$mul$ns(J.$add$ns(J.$mul$ns(t1.get$y(point), J.get$width$x(data)), t1.get$x(point)), 4));
      }}
  },
  ObjectInfo: {
    "^": "Object;address<,size"
  },
  HeapMapElement: {
    "^": ["ObservatoryElement_ChangeNotifier8;_fragmentationCanvas%-84,_fragmentationData%-84,_pageHeight%-84,_classIdToColor%-84,_colorToClassId%-84,_classIdToName%-84,_heap_map_element$__$status%-301,_heap_map_element$__$fragmentation%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$status: [function(receiver) {
      return receiver._heap_map_element$__$status;
    }, null, null, 1, 0, 308, "status", 304, 305],
    set$status: [function(receiver, value) {
      receiver._heap_map_element$__$status = this.notifyPropertyChange$3(receiver, C.Symbol_status, receiver._heap_map_element$__$status, value);
    }, null, null, 3, 0, 32, 30, [], "status", 304],
    get$fragmentation: [function(receiver) {
      return receiver._heap_map_element$__$fragmentation;
    }, null, null, 1, 0, 333, "fragmentation", 304, 307],
    set$fragmentation: [function(receiver, value) {
      receiver._heap_map_element$__$fragmentation = this.notifyPropertyChange$3(receiver, C.Symbol_fragmentation, receiver._heap_map_element$__$fragmentation, value);
    }, null, null, 3, 0, 334, 30, [], "fragmentation", 304],
    enteredView$0: [function(receiver) {
      var t1;
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      t1 = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#fragmentation");
      receiver._fragmentationCanvas = t1;
      J.get$onMouseMove$x(t1).listen$1(this.get$_handleMouseMove(receiver));
      J.get$onMouseDown$x(receiver._fragmentationCanvas).listen$1(this.get$_handleClick(receiver));
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    _packColor$1: [function(receiver, color) {
      var t1, packed, component;
      for (t1 = J.get$iterator$ax(color), packed = 0; t1.moveNext$0();) {
        component = t1.get$current();
        if (typeof component !== "number")
          return H.iae(component);
        packed = packed * 256 + component;
      }
      return packed;
    }, "call$1", "get$_packColor", 2, 0, 405, 406, [], "_packColor"],
    _addClass$3: [function(receiver, classId, $name, color) {
      var t1, t2;
      t1 = receiver._classIdToName;
      t2 = J.split$1$s($name, "@");
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      J.$indexSet$ax(t1, classId, t2[0]);
      J.$indexSet$ax(receiver._classIdToColor, classId, color);
      J.$indexSet$ax(receiver._colorToClassId, this._packColor$1(receiver, color), classId);
    }, "call$3", "get$_addClass", 6, 0, 407, 408, [], 12, [], 406, [], "_addClass"],
    _updateClassList$2: [function(receiver, classList, freeClassId) {
      var t1, member, t2, classId, rng, color, t3;
      for (t1 = J.get$iterator$ax(J.$index$asx(classList, "members")); t1.moveNext$0();) {
        member = t1.get$current();
        t2 = J.getInterceptor$asx(member);
        if (!J.$eq(t2.$index(member, "type"), "@Class")) {
          N.Logger_Logger("").info$1(H.S(member));
          continue;
        }
        classId = H.Primitives_parseInt(C.JSArray_methods.get$last(J.split$1$s(t2.$index(member, "id"), "/")), null, null);
        rng = classId == null ? C.C__JSRandom : P._Random$(classId);
        color = [rng.nextInt$1(128), rng.nextInt$1(128), rng.nextInt$1(128), 255];
        t2 = t2.$index(member, "name");
        t3 = receiver._classIdToName;
        t2 = J.split$1$s(t2, "@");
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        J.$indexSet$ax(t3, classId, t2[0]);
        J.$indexSet$ax(receiver._classIdToColor, classId, color);
        J.$indexSet$ax(receiver._colorToClassId, this._packColor$1(receiver, color), classId);
      }
      this._addClass$3(receiver, freeClassId, "Free", $.get$HeapMapElement__freeColor());
      this._addClass$3(receiver, 0, "", $.get$HeapMapElement__pageSeparationColor());
    }, "call$2", "get$_updateClassList", 4, 0, 409, 410, [], 411, [], "_updateClassList"],
    _classIdToRGBA$1: [function(receiver, classId) {
      var rng = classId == null ? C.C__JSRandom : P._Random$(classId);
      return [rng.nextInt$1(128), rng.nextInt$1(128), rng.nextInt$1(128), 255];
    }, "call$1", "get$_classIdToRGBA", 2, 0, 412, 408, [], "_classIdToRGBA"],
    _classNameAt$1: [function(receiver, point) {
      var t1, t2, color;
      t1 = O.PixelReference$(receiver._fragmentationData, point);
      t2 = t1._dataIndex;
      color = J.getRange$2$ax(J.get$data$x(t1._data), t2, J.$add$ns(t2, 4));
      return J.$index$asx(receiver._classIdToName, J.$index$asx(receiver._colorToClassId, this._packColor$1(receiver, color)));
    }, "call$1", "get$_classNameAt", 2, 0, 413, 414, [], "_classNameAt"],
    _objectAt$1: [function(receiver, point) {
      var pagePixels, index, t1, pageIndex, pageOffset, pages, page, objects, t2, offset, size, i, t3;
      pagePixels = J.$mul$ns(receiver._pageHeight, J.get$width$x(receiver._fragmentationData));
      index = J.$tdiv$n(O.PixelReference$(receiver._fragmentationData, point)._dataIndex, 4);
      t1 = J.getInterceptor$n(index);
      pageIndex = t1.$tdiv(index, pagePixels);
      pageOffset = t1.$mod(index, pagePixels);
      pages = J.$index$asx(receiver._heap_map_element$__$fragmentation, "pages");
      t1 = J.getInterceptor$n(pageIndex);
      if (t1.$lt(pageIndex, 0) || t1.$ge(pageIndex, J.get$length$asx(pages)))
        return;
      page = J.$index$asx(pages, pageIndex);
      t1 = J.getInterceptor$asx(page);
      objects = t1.$index(page, "objects");
      t2 = J.getInterceptor$asx(objects);
      offset = 0;
      size = 0;
      i = 0;
      while (true) {
        t3 = t2.get$length(objects);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        size = t2.$index(objects, i);
        if (typeof size !== "number")
          return H.iae(size);
        offset += size;
        if (offset > pageOffset) {
          pageOffset = offset - size;
          break;
        }
        i += 2;
      }
      t1 = H.Primitives_parseInt(t1.$index(page, "object_start"), null, null);
      t2 = J.$index$asx(receiver._heap_map_element$__$fragmentation, "unit_size_bytes");
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new O.ObjectInfo(J.$add$ns(t1, pageOffset * t2), J.$mul$ns(size, J.$index$asx(receiver._heap_map_element$__$fragmentation, "unit_size_bytes")));
    }, "call$1", "get$_objectAt", 2, 0, 415, 414, [], "_objectAt"],
    _handleMouseMove$1: [function(receiver, $event) {
      var t1, info, addressString, t2, color, className;
      t1 = J.getInterceptor$x($event);
      info = this._objectAt$1(receiver, t1.get$offset($event));
      addressString = H.S(info.size) + "B @ 0x" + J.toRadixString$1$n(info.address, 16);
      t1 = t1.get$offset($event);
      t1 = O.PixelReference$(receiver._fragmentationData, t1);
      t2 = t1._dataIndex;
      color = J.getRange$2$ax(J.get$data$x(t1._data), t2, J.$add$ns(t2, 4));
      className = J.$index$asx(receiver._classIdToName, J.$index$asx(receiver._colorToClassId, this._packColor$1(receiver, color)));
      t1 = J.$eq(className, "") ? "-" : H.S(className) + " " + addressString;
      receiver._heap_map_element$__$status = this.notifyPropertyChange$3(receiver, C.Symbol_status, receiver._heap_map_element$__$status, t1);
    }, "call$1", "get$_handleMouseMove", 2, 0, 397, 321, [], "_handleMouseMove"],
    _handleClick$1: [function(receiver, $event) {
      var address = J.toRadixString$1$n(this._objectAt$1(receiver, J.get$offset$x($event)).address, 16);
      J.set$hash$x(C.Window_methods.get$location(window), "/" + H.S(J.get$link$x(J.get$isolate$x(receiver._heap_map_element$__$fragmentation))) + "/address/" + address);
    }, "call$1", "get$_handleClick", 2, 0, 397, 321, [], "_handleClick"],
    _updateFragmentationData$0: [function(receiver) {
      var t1, pages, width, t2;
      t1 = receiver._heap_map_element$__$fragmentation;
      if (t1 == null || receiver._fragmentationCanvas == null)
        return;
      this._updateClassList$2(receiver, J.$index$asx(t1, "class_list"), J.$index$asx(receiver._heap_map_element$__$fragmentation, "free_class_id"));
      pages = J.$index$asx(receiver._heap_map_element$__$fragmentation, "pages");
      t1 = J.get$client$x(J.get$parent$x(receiver._fragmentationCanvas));
      width = t1.get$width(t1);
      t1 = J.$tdiv$n(J.$tdiv$n(J.$index$asx(receiver._heap_map_element$__$fragmentation, "page_size_bytes"), J.$index$asx(receiver._heap_map_element$__$fragmentation, "unit_size_bytes")), width);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 4 + t1;
      receiver._pageHeight = t1;
      t2 = J.get$length$asx(pages);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = P.convertNativeToDart_ImageData(J.get$context2D$x(receiver._fragmentationCanvas).createImageData(width, t1 * t2));
      receiver._fragmentationData = t2;
      J.set$width$x(receiver._fragmentationCanvas, J.get$width$x(t2));
      J.set$height$x(receiver._fragmentationCanvas, J.get$height$x(receiver._fragmentationData));
      this._renderPages$1(receiver, 0);
    }, "call$0", "get$_updateFragmentationData", 0, 0, 125, "_updateFragmentationData"],
    _renderPages$1: [function(receiver, startPage) {
      var pages, t1, t2, startY, pixel, objects, i, count, classId, color, count0, t3, t4, endY, t5, t6;
      pages = J.$index$asx(receiver._heap_map_element$__$fragmentation, "pages");
      t1 = J.getInterceptor$asx(pages);
      t2 = "Loaded " + H.S(startPage) + " of " + H.S(t1.get$length(pages)) + " pages";
      receiver._heap_map_element$__$status = this.notifyPropertyChange$3(receiver, C.Symbol_status, receiver._heap_map_element$__$status, t2);
      t2 = J.getInterceptor$n(startPage);
      if (t2.$ge(startPage, t1.get$length(pages)))
        return;
      startY = t2.$mul(startPage, receiver._pageHeight);
      pixel = O.PixelReference$(receiver._fragmentationData, H.setRuntimeTypeInfo(new P.Point(0, startY), [null]));
      objects = J.$index$asx(t1.$index(pages, startPage), "objects");
      t1 = J.getInterceptor$asx(objects);
      i = 0;
      while (true) {
        t2 = t1.get$length(objects);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        count = t1.$index(objects, i);
        classId = t1.$index(objects, i + 1);
        color = J.$index$asx(receiver._classIdToColor, classId);
        for (; t2 = J.getInterceptor$n(count), count0 = t2.$sub(count, 1), t2.$gt(count, 0); count = count0) {
          t2 = pixel._data;
          t3 = pixel._dataIndex;
          t4 = J.getInterceptor$ns(t3);
          J.setRange$3$ax(J.get$data$x(t2), t3, t4.$add(t3, 4), color);
          pixel = new O.PixelReference(t2, t4.$add(t3, 4));
        }
        i += 2;
      }
      endY = J.$add$ns(startY, receiver._pageHeight);
      while (true) {
        t1 = pixel._dataIndex;
        t2 = J.getInterceptor$n(t1);
        t3 = pixel._data;
        t4 = J.getInterceptor$x(t3);
        t5 = J.$mod$n(t2.$tdiv(t1, 4), t4.get$width(t3));
        t6 = J.$tdiv$n(t2.$tdiv(t1, 4), t4.get$width(t3));
        new P.Point(t5, t6).$builtinTypeInfo = [null];
        if (!J.$lt$n(t6, endY))
          break;
        t5 = $.get$HeapMapElement__pageSeparationColor();
        J.setRange$3$ax(t4.get$data(t3), t1, t2.$add(t1, 4), t5);
        pixel = new O.PixelReference(t3, t2.$add(t1, 4));
      }
      t1 = J.get$context2D$x(receiver._fragmentationCanvas);
      t2 = receiver._fragmentationData;
      J.putImageData$7$x(t1, t2, 0, 0, 0, startY, J.get$width$x(t2), endY);
      P.Future_Future(new O.HeapMapElement__renderPages_closure(receiver, startPage), null);
    }, "call$1", "get$_renderPages", 2, 0, 416, 417, [], "_renderPages"],
    refresh$1: [function(receiver, done) {
      var t1 = receiver._heap_map_element$__$fragmentation;
      if (t1 == null)
        return;
      J.get$isolate$x(t1).get$1("heapmap").then$1(new O.HeapMapElement_refresh_closure(receiver)).catchError$1(new O.HeapMapElement_refresh_closure0()).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    fragmentationChanged$1: [function(receiver, oldValue) {
      P.Future_Future(new O.HeapMapElement_fragmentationChanged_closure(receiver), null);
    }, "call$1", "get$fragmentationChanged", 2, 0, 166, 239, [], "fragmentationChanged"],
    "@": function() {
      return [C.CustomTag_GkA];
    },
    static: {"^": "HeapMapElement__freeColor<-84,HeapMapElement__pageSeparationColor<-84,HeapMapElement__PAGE_SEPARATION_HEIGHT<-84", HeapMapElement$created: [function(receiver) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t4 = $.get$Polymer__polymerSyntax();
        t5 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t6 = J.JSString;
        t7 = W.Element;
        t7 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t6, t7), null, null), [t6, t7]);
        receiver._classIdToColor = t1;
        receiver._colorToClassId = t2;
        receiver._classIdToName = t3;
        receiver.polymer$Polymer$syntax = t4;
        receiver.polymer$Polymer$_shadowRoots = t5;
        receiver.polymer$Polymer$$ = t7;
        C.HeapMapElement_methods.Element$created$0(receiver);
        C.HeapMapElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new HeapMapElement$created"]}
  },
  "+HeapMapElement": [418],
  ObservatoryElement_ChangeNotifier8: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  HeapMapElement__renderPages_closure: {
    "^": "Closure:114;this_0-84,startPage_1-322",
    call$0: [function() {
      J._renderPages$1$x(this.this_0, J.$add$ns(this.startPage_1, 1));
    }, "call$0", null, 0, 0, 114, "call"],
    $isFunction: true
  },
  "+ HeapMapElement__renderPages_closure": [311],
  HeapMapElement_refresh_closure: {
    "^": "Closure:334;this_0-84",
    call$1: [function(response) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_heap_map_element$__$fragmentation(t1, t2.notifyPropertyChange$3(t1, C.Symbol_fragmentation, t2.get$_heap_map_element$__$fragmentation(t1), response));
    }, "call$1", null, 2, 0, 334, 419, [], "call"],
    $isFunction: true
  },
  "+ HeapMapElement_refresh_closure": [311],
  HeapMapElement_refresh_closure0: {
    "^": "Closure:296;",
    call$2: [function(e, st) {
      N.Logger_Logger("").info$1(H.S(e) + " " + H.S(st));
    }, "call$2", null, 4, 0, 296, 21, [], 420, [], "call"],
    $isFunction: true
  },
  "+ HeapMapElement_refresh_closure0": [311],
  HeapMapElement_fragmentationChanged_closure: {
    "^": "Closure:114;this_0-84",
    call$0: [function() {
      J._updateFragmentationData$0$x(this.this_0);
    }, "call$0", null, 0, 0, 114, "call"],
    $isFunction: true
  },
  "+ HeapMapElement_fragmentationChanged_closure": [311]
}],
["heap_profile_element", "package:observatory/src/elements/heap_profile.dart", , K, {
  "^": "",
  HeapProfileElement: {
    "^": ["ObservatoryElement_ChangeNotifier9;_newPieDataTable%-84,_newPieChart%-84,_oldPieDataTable%-84,_oldPieChart%-84,_heap_profile_element$__$classTable%-421,_heap_profile_element$__$profile%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$classTable: [function(receiver) {
      return receiver._heap_profile_element$__$classTable;
    }, null, null, 1, 0, 422, "classTable", 304, 305],
    set$classTable: [function(receiver, value) {
      receiver._heap_profile_element$__$classTable = this.notifyPropertyChange$3(receiver, C.Symbol_classTable, receiver._heap_profile_element$__$classTable, value);
    }, null, null, 3, 0, 423, 30, [], "classTable", 304],
    get$profile: [function(receiver) {
      return receiver._heap_profile_element$__$profile;
    }, null, null, 1, 0, 333, "profile", 304, 307],
    set$profile: [function(receiver, value) {
      receiver._heap_profile_element$__$profile = this.notifyPropertyChange$3(receiver, C.Symbol_profile, receiver._heap_profile_element$__$profile, value);
    }, null, null, 3, 0, 334, 30, [], "profile", 304],
    enteredView$0: [function(receiver) {
      var t1, t2;
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      t1 = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#newPieChart");
      t2 = new G.Chart(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t2._chart = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "PieChart"), [t1]);
      receiver._newPieChart = t2;
      t2.options.$indexSet(0, "title", "New Space");
      t2 = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#oldPieChart");
      t1 = new G.Chart(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1._chart = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "PieChart"), [t2]);
      receiver._oldPieChart = t1;
      t1.options.$indexSet(0, "title", "Old Space");
      this._draw$0(receiver);
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    _updateChartData$0: [function(receiver) {
      var t1, cls, t2, t3, t4, t5, t6, t7, t8, t9, t10, heap;
      t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null || !J.getInterceptor(J.$index$asx(t1, "members")).$isList || J.$eq(J.get$length$asx(J.$index$asx(receiver._heap_profile_element$__$profile, "members")), 0))
        return;
      receiver._heap_profile_element$__$classTable.clearRows$0();
      for (t1 = J.get$iterator$ax(J.$index$asx(receiver._heap_profile_element$__$profile, "members")); t1.moveNext$0();) {
        cls = t1.get$current();
        if (this._classHasNoAllocations$1(receiver, cls))
          continue;
        t2 = J.$index$asx(cls, "class");
        t3 = this._combinedTableColumnValue$2(receiver, cls, 1);
        t4 = this._combinedTableColumnValue$2(receiver, cls, 2);
        t5 = this._combinedTableColumnValue$2(receiver, cls, 3);
        t6 = this._combinedTableColumnValue$2(receiver, cls, 4);
        t7 = this._combinedTableColumnValue$2(receiver, cls, 5);
        t8 = this._combinedTableColumnValue$2(receiver, cls, 6);
        t9 = this._combinedTableColumnValue$2(receiver, cls, 7);
        t10 = this._combinedTableColumnValue$2(receiver, cls, 8);
        J.addRow$1$x(receiver._heap_profile_element$__$classTable, new G.SortedTableRow([t2, t3, t4, t5, t6, t7, t8, t9, t10]));
      }
      J.sort$0$ax(receiver._heap_profile_element$__$classTable);
      receiver._newPieDataTable.clearRows$0();
      heap = J.$index$asx(J.$index$asx(receiver._heap_profile_element$__$profile, "heaps"), "new");
      t1 = J.getInterceptor$asx(heap);
      J.addRow$1$x(receiver._newPieDataTable, ["Used", t1.$index(heap, "used")]);
      J.addRow$1$x(receiver._newPieDataTable, ["Free", J.$sub$n(t1.$index(heap, "capacity"), t1.$index(heap, "used"))]);
      J.addRow$1$x(receiver._newPieDataTable, ["External", t1.$index(heap, "external")]);
      receiver._oldPieDataTable.clearRows$0();
      heap = J.$index$asx(J.$index$asx(receiver._heap_profile_element$__$profile, "heaps"), "old");
      t1 = J.getInterceptor$asx(heap);
      J.addRow$1$x(receiver._oldPieDataTable, ["Used", t1.$index(heap, "used")]);
      J.addRow$1$x(receiver._oldPieDataTable, ["Free", J.$sub$n(t1.$index(heap, "capacity"), t1.$index(heap, "used"))]);
      J.addRow$1$x(receiver._oldPieDataTable, ["External", t1.$index(heap, "external")]);
      this._draw$0(receiver);
    }, "call$0", "get$_updateChartData", 0, 0, 125, "_updateChartData"],
    _draw$0: [function(receiver) {
      var t1 = receiver._newPieChart;
      if (t1 == null)
        return;
      t1.draw$1(receiver._newPieDataTable);
      receiver._oldPieChart.draw$1(receiver._oldPieDataTable);
    }, "call$0", "get$_draw", 0, 0, 125, "_draw"],
    changeSort$3: [function(receiver, e, detail, target) {
      var t1, t2;
      if (!!J.getInterceptor(target).$isTableCellElement) {
        t1 = receiver._heap_profile_element$__$classTable.get$sortColumnIndex();
        t2 = target.cellIndex;
        if (t1 == null ? t2 != null : t1 !== t2) {
          receiver._heap_profile_element$__$classTable.set$sortColumnIndex(t2);
          J.sort$0$ax(receiver._heap_profile_element$__$classTable);
        }
      }
    }, "call$3", "get$changeSort", 6, 0, 424, 21, [], 347, [], 81, [], "changeSort", 305],
    _classHasNoAllocations$1: [function(receiver, v) {
      var t1, newSpace, oldSpace;
      t1 = J.getInterceptor$asx(v);
      newSpace = t1.$index(v, "new");
      oldSpace = t1.$index(v, "old");
      for (t1 = J.get$iterator$ax(newSpace); t1.moveNext$0();)
        if (!J.$eq(t1.get$current(), 0))
          return false;
      for (t1 = J.get$iterator$ax(oldSpace); t1.moveNext$0();)
        if (!J.$eq(t1.get$current(), 0))
          return false;
      return true;
    }, "call$1", "get$_classHasNoAllocations", 2, 0, 425, 121, [], "_classHasNoAllocations"],
    _combinedTableColumnValue$2: [function(receiver, v, index) {
      var t1;
      switch (index) {
        case 0:
          return J.$index$asx(J.$index$asx(v, "class"), "user_name");
        case 1:
          return J.$index$asx(J.$index$asx(v, "new"), 7);
        case 2:
          return J.$index$asx(J.$index$asx(v, "new"), 6);
        case 3:
          t1 = J.getInterceptor$asx(v);
          return J.$add$ns(J.$index$asx(t1.$index(v, "new"), 3), J.$index$asx(t1.$index(v, "new"), 5));
        case 4:
          t1 = J.getInterceptor$asx(v);
          return J.$add$ns(J.$index$asx(t1.$index(v, "new"), 2), J.$index$asx(t1.$index(v, "new"), 4));
        case 5:
          return J.$index$asx(J.$index$asx(v, "old"), 7);
        case 6:
          return J.$index$asx(J.$index$asx(v, "old"), 6);
        case 7:
          t1 = J.getInterceptor$asx(v);
          return J.$add$ns(J.$index$asx(t1.$index(v, "old"), 3), J.$index$asx(t1.$index(v, "old"), 5));
        case 8:
          t1 = J.getInterceptor$asx(v);
          return J.$add$ns(J.$index$asx(t1.$index(v, "old"), 2), J.$index$asx(t1.$index(v, "old"), 4));
      }
      throw H.wrapException(P.FallThroughError$());
    }, "call$2", "get$_combinedTableColumnValue", 4, 0, 426, 121, [], 15, [], "_combinedTableColumnValue"],
    refresh$1: [function(receiver, done) {
      var t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return;
      J.get$isolate$x(t1).get$1("/allocationprofile").then$1(new K.HeapProfileElement_refresh_closure(receiver)).catchError$1(new K.HeapProfileElement_refresh_closure0()).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    refreshGC$1: [function(receiver, done) {
      var t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return;
      J.get$isolate$x(t1).get$1("/allocationprofile?gc=full").then$1(new K.HeapProfileElement_refreshGC_closure(receiver)).catchError$1(new K.HeapProfileElement_refreshGC_closure0()).whenComplete$1(done);
    }, "call$1", "get$refreshGC", 2, 0, 166, 335, [], "refreshGC"],
    resetAccumulator$1: [function(receiver, done) {
      var t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return;
      J.get$isolate$x(t1).get$1("/allocationprofile?reset=true").then$1(new K.HeapProfileElement_resetAccumulator_closure(receiver)).catchError$1(new K.HeapProfileElement_resetAccumulator_closure0()).whenComplete$1(done);
    }, "call$1", "get$resetAccumulator", 2, 0, 166, 335, [], "resetAccumulator"],
    profileChanged$1: [function(receiver, oldValue) {
      var e, st, exception, t1;
      try {
        this._updateChartData$0(receiver);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        st = new H._StackTrace(exception, null);
        N.Logger_Logger("").info$1(H.S(e) + " " + H.S(st));
      }

      this.notifyPropertyChange$3(receiver, C.Symbol_formattedAverage, [], this.get$formattedAverage(receiver));
      this.notifyPropertyChange$3(receiver, C.Symbol_formattedTotalCollectionTime, [], this.get$formattedTotalCollectionTime(receiver));
      this.notifyPropertyChange$3(receiver, C.Symbol_formattedCollections, [], this.get$formattedCollections(receiver));
    }, "call$1", "get$profileChanged", 2, 0, 166, 239, [], "profileChanged"],
    formattedAverage$1: [function(receiver, newSpace) {
      var t1, space, heap;
      t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return "";
      space = newSpace === true ? "new" : "old";
      heap = J.$index$asx(J.$index$asx(t1, "heaps"), space);
      t1 = J.getInterceptor$asx(heap);
      return C.JSNumber_methods.toStringAsFixed$1(J.$div$n(J.$mul$ns(t1.$index(heap, "time"), 1000), t1.$index(heap, "collections")), 2) + " ms";
    }, "call$1", "get$formattedAverage", 2, 0, 427, 428, [], "formattedAverage", 305],
    formattedCollections$1: [function(receiver, newSpace) {
      var t1, space;
      t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return "";
      space = newSpace === true ? "new" : "old";
      return H.S(J.$index$asx(J.$index$asx(J.$index$asx(t1, "heaps"), space), "collections"));
    }, "call$1", "get$formattedCollections", 2, 0, 427, 428, [], "formattedCollections", 305],
    formattedTotalCollectionTime$1: [function(receiver, newSpace) {
      var t1, space;
      t1 = receiver._heap_profile_element$__$profile;
      if (t1 == null)
        return "";
      space = newSpace === true ? "new" : "old";
      return J.toStringAsFixed$1$n(J.$index$asx(J.$index$asx(J.$index$asx(t1, "heaps"), space), "time"), 2) + " secs";
    }, "call$1", "get$formattedTotalCollectionTime", 2, 0, 427, 428, [], "formattedTotalCollectionTime", 305],
    HeapProfileElement$created$0: [function(receiver) {
      var t1 = new G.DataTable(P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "DataTable"), null));
      receiver._newPieDataTable = t1;
      t1.addColumn$2("string", "Type");
      receiver._newPieDataTable.addColumn$2("number", "Size");
      t1 = new G.DataTable(P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "DataTable"), null));
      receiver._oldPieDataTable = t1;
      t1.addColumn$2("string", "Type");
      receiver._oldPieDataTable.addColumn$2("number", "Size");
      t1 = H.setRuntimeTypeInfo([], [G.SortedTableRow]);
      t1 = this.notifyPropertyChange$3(receiver, C.Symbol_classTable, receiver._heap_profile_element$__$classTable, new G.SortedTable([new G.SortedTableColumn("Class", G.SortedTableColumn_toStringFormatter$closure()), new G.SortedTableColumn("Accumulator Size (New)", G.Utils_formatSize$closure()), new G.SortedTableColumn("Accumulator (New)", G.Utils_formatCommaSeparated$closure()), new G.SortedTableColumn("Current Size (New)", G.Utils_formatSize$closure()), new G.SortedTableColumn("Current (New)", G.Utils_formatCommaSeparated$closure()), new G.SortedTableColumn("Accumulator Size (Old)", G.Utils_formatSize$closure()), new G.SortedTableColumn("Accumulator (Old)", G.Utils_formatCommaSeparated$closure()), new G.SortedTableColumn("Current Size (Old)", G.Utils_formatSize$closure()), new G.SortedTableColumn("Current (Old)", G.Utils_formatCommaSeparated$closure())], t1, [], 0, true, null, null));
      receiver._heap_profile_element$__$classTable = t1;
      t1.set$sortColumnIndex(1);
    }, null, null, 0, 0, 114, "created"],
    "@": function() {
      return [C.CustomTag_6nc];
    },
    static: {"^": "HeapProfileElement_ALLOCATED_BEFORE_GC<-84,HeapProfileElement_ALLOCATED_BEFORE_GC_SIZE<-84,HeapProfileElement_LIVE_AFTER_GC<-84,HeapProfileElement_LIVE_AFTER_GC_SIZE<-84,HeapProfileElement_ALLOCATED_SINCE_GC<-84,HeapProfileElement_ALLOCATED_SINCE_GC_SIZE<-84,HeapProfileElement_ACCUMULATED<-84,HeapProfileElement_ACCUMULATED_SIZE<-84", HeapProfileElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.HeapProfileElement_methods.Element$created$0(receiver);
        C.HeapProfileElement_methods.PolymerElement$created$0(receiver);
        C.HeapProfileElement_methods.HeapProfileElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new HeapProfileElement$created"]}
  },
  "+HeapProfileElement": [429],
  ObservatoryElement_ChangeNotifier9: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  HeapProfileElement_refresh_closure: {
    "^": "Closure:334;this_0-84",
    call$1: [function(response) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_heap_profile_element$__$profile(t1, t2.notifyPropertyChange$3(t1, C.Symbol_profile, t2.get$_heap_profile_element$__$profile(t1), response));
    }, "call$1", null, 2, 0, 334, 419, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_refresh_closure": [311],
  HeapProfileElement_refresh_closure0: {
    "^": "Closure:296;",
    call$2: [function(e, st) {
      N.Logger_Logger("").info$1(H.S(e) + " " + H.S(st));
    }, "call$2", null, 4, 0, 296, 21, [], 420, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_refresh_closure0": [311],
  HeapProfileElement_refreshGC_closure: {
    "^": "Closure:334;this_0-84",
    call$1: [function(response) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_heap_profile_element$__$profile(t1, t2.notifyPropertyChange$3(t1, C.Symbol_profile, t2.get$_heap_profile_element$__$profile(t1), response));
    }, "call$1", null, 2, 0, 334, 419, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_refreshGC_closure": [311],
  HeapProfileElement_refreshGC_closure0: {
    "^": "Closure:296;",
    call$2: [function(e, st) {
      N.Logger_Logger("").info$1(H.S(e) + " " + H.S(st));
    }, "call$2", null, 4, 0, 296, 21, [], 420, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_refreshGC_closure0": [311],
  HeapProfileElement_resetAccumulator_closure: {
    "^": "Closure:334;this_0-84",
    call$1: [function(response) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_heap_profile_element$__$profile(t1, t2.notifyPropertyChange$3(t1, C.Symbol_profile, t2.get$_heap_profile_element$__$profile(t1), response));
    }, "call$1", null, 2, 0, 334, 419, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_resetAccumulator_closure": [311],
  HeapProfileElement_resetAccumulator_closure0: {
    "^": "Closure:296;",
    call$2: [function(e, st) {
      N.Logger_Logger("").info$1(H.S(e) + " " + H.S(st));
    }, "call$2", null, 4, 0, 296, 21, [], 420, [], "call"],
    $isFunction: true
  },
  "+ HeapProfileElement_resetAccumulator_closure0": [311]
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  _convertDartToNative_PrepareForStructuredClone: [function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  }, "call$1", "_convertDartToNative_PrepareForStructuredClone$closure", 2, 0, null, 30, []],
  convertNativeToDart_AcceptStructuredClone: [function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  }, "call$2$mustCopy", "convertNativeToDart_AcceptStructuredClone$closure", 2, 3, null, 219, 6, [], 247, []],
  convertNativeToDart_ImageData: [function(nativeImageData) {
    var t1, data;
    t1 = J.getInterceptor(nativeImageData);
    if (!!t1.$isImageData) {
      data = t1.get$data(nativeImageData);
      if (data.constructor === Array)
        if (typeof CanvasPixelArray !== "undefined") {
          data.constructor = CanvasPixelArray;
          data.BYTES_PER_ELEMENT = 1;
        }
      return nativeImageData;
    }
    return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
  }, "call$1", "convertNativeToDart_ImageData$closure", 2, 0, null, 248, []],
  convertDartToNative_ImageData: [function(imageData) {
    if (!!J.getInterceptor(imageData).$is_TypedImageData)
      return {data: imageData.data, height: imageData.height, width: imageData.width};
    return imageData;
  }, "call$1", "convertDartToNative_ImageData$closure", 2, 0, null, 249, []],
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "^": "Closure:197;values_1,copies_2",
    call$1: [function(value) {
      var t1, $length, i;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "^": "Closure:359;copies_3",
    call$1: [function(i) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "^": "Closure:430;copies_4",
    call$2: [function(i, x) {
      var t1 = this.copies_4;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }, "call$2", null, 4, 0, null, 330, [], 28, [], "call"],
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "^": "Closure:114;",
    call$0: [function() {
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "^": "Closure:115;findSlot_5,readSlot_6,writeSlot_7",
    call$1: [function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (!!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer)
        return e;
      if (!!t2.$isNativeTypedData)
        return e;
      if (!!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (!!t2.$isList) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "^": "Closure:296;box_0,walk_8",
    call$2: [function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:197;values_0,copies_1",
    call$1: [function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:359;copies_2",
    call$1: [function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:430;copies_3",
    call$2: [function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }, "call$2", null, 4, 0, null, 330, [], 28, [], "call"],
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:115;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: [function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _TypedImageData: {
    "^": "Object;data>,height>,width>",
    $is_TypedImageData: true,
    $isImageData: true
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    toggle$2: function(value, shouldAdd) {
      var s, result;
      s = this.readClasses$0();
      if (!s.contains$1(0, value)) {
        s.add$1(0, value);
        result = true;
      } else {
        s.remove$1(0, value);
        result = false;
      }
      this.writeClasses$1(s);
      return result;
    },
    toggle$1: function(value) {
      return this.toggle$2(value, null);
    },
    get$iterator: function(_) {
      var t1 = this.readClasses$0();
      t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    join$1: function(_, separator) {
      return this.readClasses$0().join$1(0, separator);
    },
    map$1: [function(_, f) {
      var t1 = this.readClasses$0();
      return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
    }, "call$1", "get$map", 2, 0, 431, 127, []],
    where$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.WhereIterable(t1, f), [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    },
    expand$1: [function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.ExpandIterable(t1, f), [H.getRuntimeTypeArgument(t1, "IterableBase", 0), null]);
    }, "call$1", "get$expand", 2, 0, 432, 127, []],
    any$1: function(_, f) {
      return this.readClasses$0().any$1(0, f);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    contains$1: function(_, value) {
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    addAll$1: function(_, iterable) {
      this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
    },
    get$last: function(_) {
      var t1 = this.readClasses$0()._last;
      if (t1 == null)
        H.throwExpression(new P.StateError("No elements"));
      return t1.get$_collection$_element();
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    skip$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    elementAt$1: function(_, index) {
      return this.readClasses$0().elementAt$1(0, index);
    },
    clear$0: function(_) {
      this.modify$1(new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isSet: true,
    $asSet: function() {
      return [J.JSString];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [J.JSString];
    }
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:115;value_0",
    call$1: [function(s) {
      return s.add$1(0, this.value_0);
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  CssClassSetImpl_addAll_closure: {
    "^": "Closure:115;iterable_0",
    call$1: [function(s) {
      return s.addAll$1(0, this.iterable_0);
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  CssClassSetImpl_clear_closure: {
    "^": "Closure:115;",
    call$1: [function(s) {
      return s.clear$0(0);
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  FilteredElementList: {
    "^": "ListBase;_html_common$_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len, t1;
      len = this.get$_filtered().length;
      t1 = J.getInterceptor$n(newLength);
      if (t1.$ge(newLength, len))
        return;
      else if (t1.$lt(newLength, 0))
        throw H.wrapException(new P.ArgumentError("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    contains$1: function(_, needle) {
      return false;
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J.set$text$x(this._childNodes._this, "");
    },
    insert$2: function(_, index, value) {
      this._childNodes.insert$2(0, index, value);
    },
    insertAll$2: function(_, index, iterable) {
      var t1, t2;
      t1 = this._childNodes._this;
      t2 = t1.childNodes;
      if (index < 0 || index >= t2.length)
        return H.ioore(t2, index);
      J.insertAllBefore$2$x(t1, iterable, t2[index]);
    },
    remove$1: function(_, element) {
      return false;
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:115;",
    call$1: [function(n) {
      return !!J.getInterceptor(n).$isElement;
    }, "call$1", null, 2, 0, null, 207, [], "call"],
    $isFunction: true
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:115;",
    call$1: [function(el) {
      return J.remove$0$ax(el);
    }, "call$1", null, 2, 0, null, 291, [], "call"],
    $isFunction: true
  }
}],
["instance_ref_element", "package:observatory/src/elements/instance_ref.dart", , B, {
  "^": "",
  InstanceRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$hoverText: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 != null)
        if (J.$eq(t1.get$serviceType(), "Null"))
          if (J.$eq(J.get$id$x(receiver._service_ref_element$__$ref), "objects/optimized-out"))
            return "This object is no longer needed and has been removed by the optimizing compiler.";
          else if (J.$eq(J.get$id$x(receiver._service_ref_element$__$ref), "objects/collected"))
            return "This object has been reclaimed by the garbage collector.";
          else if (J.$eq(J.get$id$x(receiver._service_ref_element$__$ref), "objects/expired"))
            return "The handle to this object has expired.  Consider refreshing the page.";
          else if (J.$eq(J.get$id$x(receiver._service_ref_element$__$ref), "objects/not-initialized"))
            return "This object will be initialized once it is accessed by the program.";
          else if (J.$eq(J.get$id$x(receiver._service_ref_element$__$ref), "objects/being-initialized"))
            return "This object is currently being initialized.";
      return Q.ServiceRefElement.prototype.get$hoverText.call(this, receiver);
    }, null, null, 1, 0, 308, "hoverText"],
    expander$0: [function(receiver) {
      return this.get$expandEvent(receiver);
    }, "call$0", "get$expander", 0, 0, 114, "expander"],
    expandEvent$2: [function(receiver, expand, done) {
      var t1, t2;
      t1 = receiver._service_ref_element$__$ref;
      if (expand === true)
        J.reload$0$x(t1).then$1(new B.InstanceRefElement_expandEvent_closure(receiver)).whenComplete$1(done);
      else {
        t2 = J.getInterceptor$ax(t1);
        t2.$indexSet(t1, "fields", null);
        t2.$indexSet(t1, "elements", null);
        done.call$0();
      }
    }, "call$2", "get$expandEvent", 4, 0, 433, 434, [], 335, [], "expandEvent"],
    "@": function() {
      return [C.CustomTag_e2q];
    },
    static: {InstanceRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.InstanceRefElement_methods.Element$created$0(receiver);
        C.InstanceRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new InstanceRefElement$created"]}
  },
  "+InstanceRefElement": [338],
  InstanceRefElement_expandEvent_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(result) {
      var t1, t2;
      t1 = J.getInterceptor$asx(result);
      if (t1.$index(result, "valueAsString") != null) {
        t1.set$name(result, t1.$index(result, "valueAsString"));
        result.set$vmName(t1.$index(result, "valueAsString"));
      }
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_service_ref_element$__$ref(t1, t2.notifyPropertyChange$3(t1, C.Symbol_ref, t2.get$_service_ref_element$__$ref(t1), result));
      t2.notifyPropertyChange$3(t1, C.Symbol_ref, 0, 1);
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ InstanceRefElement_expandEvent_closure": [311]
}],
["instance_view_element", "package:observatory/src/elements/instance_view.dart", , Z, {
  "^": "",
  InstanceViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier10;_instance_view_element$__$instance%-332,_instance_view_element$__$path%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$instance: [function(receiver) {
      return receiver._instance_view_element$__$instance;
    }, null, null, 1, 0, 333, "instance", 304, 307],
    set$instance: [function(receiver, value) {
      receiver._instance_view_element$__$instance = this.notifyPropertyChange$3(receiver, C.Symbol_instance, receiver._instance_view_element$__$instance, value);
    }, null, null, 3, 0, 334, 30, [], "instance", 304],
    get$path: [function(receiver) {
      return receiver._instance_view_element$__$path;
    }, null, null, 1, 0, 333, "path", 304, 307],
    set$path: [function(receiver, value) {
      receiver._instance_view_element$__$path = this.notifyPropertyChange$3(receiver, C.Symbol_path, receiver._instance_view_element$__$path, value);
    }, null, null, 3, 0, 334, 30, [], "path", 304],
    eval$1: [function(receiver, text) {
      return J.get$isolate$x(receiver._instance_view_element$__$instance).get$1(J.$add$ns(J.get$id$x(receiver._instance_view_element$__$instance), "/eval?expr=" + P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false)));
    }, "call$1", "get$eval", 2, 0, 339, 221, [], "eval"],
    retainedSize$1: [function(receiver, dummy) {
      return J.get$isolate$x(receiver._instance_view_element$__$instance).get$1(J.$add$ns(J.get$id$x(receiver._instance_view_element$__$instance), "/retained"));
    }, "call$1", "get$retainedSize", 2, 0, 435, 340, [], "retainedSize"],
    retainingPath$1: [function(receiver, arg) {
      return J.get$isolate$x(receiver._instance_view_element$__$instance).get$1(J.$add$ns(J.get$id$x(receiver._instance_view_element$__$instance), "/retaining_path?limit=" + H.S(arg))).then$1(new Z.InstanceViewElement_retainingPath_closure(receiver));
    }, "call$1", "get$retainingPath", 2, 0, 435, 181, [], "retainingPath"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._instance_view_element$__$instance).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_yT2];
    },
    static: {InstanceViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.InstanceViewElement_methods.Element$created$0(receiver);
        C.InstanceViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new InstanceViewElement$created"]}
  },
  "+InstanceViewElement": [436],
  ObservatoryElement_ChangeNotifier10: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  InstanceViewElement_retainingPath_closure: {
    "^": "Closure:317;this_0-84",
    call$1: [function(obj) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_instance_view_element$__$path(t1, t2.notifyPropertyChange$3(t1, C.Symbol_path, t2.get$_instance_view_element$__$path(t1), obj));
    }, "call$1", null, 2, 0, 317, 100, [], "call"],
    $isFunction: true
  },
  "+ InstanceViewElement_retainingPath_closure": [311]
}],
["isolate_profile_element", "package:observatory/src/elements/isolate_profile.dart", , X, {
  "^": "",
  ProfileCodeTrieNodeTreeRow: {
    "^": ["TableTreeRow;profile>,root<-437,node<-437,tipKind@-301,tipParent@-301,tipExclusive@-301,tipTicks@-301,tipTime@-301,parent,depth-322,children-323,columns-324,_app$__$expander,_app$__$expanderStyle,_expanded,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", null, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, null, function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, null, null, null, null, null],
    get$code: [function(_) {
      return J.get$code$x(this.node);
    }, null, null, 1, 0, 342, "code", 304],
    onShow$0: function(_) {
      var t1, threshold, t2, t3, t4, t5, t6, childNode, t7;
      t1 = this.profile;
      threshold = J.$index$asx(t1, "threshold");
      t2 = this.children;
      t3 = J.getInterceptor$asx(t2);
      if (J.$gt$n(t3.get$length(t2), 0))
        return;
      for (t4 = this.node, t5 = J.get$iterator$ax(J.get$children$x(t4)), t6 = this.root; t5.moveNext$0();) {
        childNode = t5.get$current();
        t7 = J.$div$n(childNode.get$count(), t4.get$count());
        if (typeof threshold !== "number")
          return H.iae(threshold);
        if (!(t7 > threshold || J.$div$n(J.get$code$x(childNode).get$exclusiveTicks(), t6.get$count()) > threshold))
          continue;
        t3.add$1(t2, X.ProfileCodeTrieNodeTreeRow$(t1, t6, childNode, this));
      }
    },
    onHide$0: function() {
    },
    hasChildren$0: function() {
      return J.$gt$n(J.get$length$asx(J.get$children$x(this.node)), 0);
    },
    ProfileCodeTrieNodeTreeRow$4: function(profile, root, node, $parent) {
      var t1, t2;
      t1 = this.node;
      this.tipTicks = H.S(t1.get$count());
      this.tipTime = G.Utils_formatTimePrecise(J.$div$n(J.$mul$ns(J.$index$asx(this.profile, "period"), t1.get$count()), 1000000));
      t2 = J.getInterceptor$x(t1);
      if (J.$eq(J.get$kind$x(t2.get$code(t1)), C.CodeKind_Tag)) {
        this.tipKind = "Tag (category)";
        if ($parent == null)
          this.tipParent = G.Utils_formatPercent(t1.get$count(), this.root.get$count());
        else
          this.tipParent = G.Utils_formatPercent(t1.get$count(), $parent.node.get$count());
        this.tipExclusive = G.Utils_formatPercent(t1.get$count(), this.root.get$count());
      } else {
        if (J.$eq(J.get$kind$x(t2.get$code(t1)), C.CodeKind_Collected) || J.$eq(J.get$kind$x(t2.get$code(t1)), C.CodeKind_Reused))
          this.tipKind = "Garbage Collected Code";
        else
          this.tipKind = H.S(J.get$kind$x(t2.get$code(t1))) + " (Function)";
        if ($parent == null)
          this.tipParent = G.Utils_formatPercent(t1.get$count(), this.root.get$count());
        else
          this.tipParent = G.Utils_formatPercent(t1.get$count(), $parent.node.get$count());
        this.tipExclusive = G.Utils_formatPercent(t2.get$code(t1).get$exclusiveTicks(), this.root.get$count());
      }
      t1 = this.columns;
      t2 = J.getInterceptor$ax(t1);
      t2.add$1(t1, this.tipParent);
      t2.add$1(t1, this.tipExclusive);
    },
    static: {ProfileCodeTrieNodeTreeRow$: function(profile, root, node, $parent) {
        var t1, t2;
        t1 = H.setRuntimeTypeInfo([], [G.TableTreeRow]);
        t2 = $parent != null ? J.$add$ns($parent.depth, 1) : 0;
        t1 = new X.ProfileCodeTrieNodeTreeRow(profile, root, node, "", "", "", "", "", $parent, t2, t1, [], "\u2192", "cursor: pointer;", false, null, null);
        t1.TableTreeRow$1($parent);
        t1.ProfileCodeTrieNodeTreeRow$4(profile, root, node, $parent);
        return t1;
      }}
  },
  IsolateProfileElement: {
    "^": ["ObservatoryElement_ChangeNotifier11;_isolate_profile_element$__$profile%-332,_isolate_profile_element$__$hideTagsChecked%-300,_isolate_profile_element$__$sampleCount%-301,_isolate_profile_element$__$refreshTime%-301,_isolate_profile_element$__$sampleRate%-301,_isolate_profile_element$__$sampleDepth%-301,_isolate_profile_element$__$displayCutoff%-301,_isolate_profile_element$__$timeSpan%-301,displayThreshold%-438,_isolate_profile_element$__$tagSelector%-301,_isolate_profile_element$_id=-84,tree%-439,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$profile: [function(receiver) {
      return receiver._isolate_profile_element$__$profile;
    }, null, null, 1, 0, 333, "profile", 304, 307],
    set$profile: [function(receiver, value) {
      receiver._isolate_profile_element$__$profile = this.notifyPropertyChange$3(receiver, C.Symbol_profile, receiver._isolate_profile_element$__$profile, value);
    }, null, null, 3, 0, 334, 30, [], "profile", 304],
    get$hideTagsChecked: [function(receiver) {
      return receiver._isolate_profile_element$__$hideTagsChecked;
    }, null, null, 1, 0, 303, "hideTagsChecked", 304, 305],
    set$hideTagsChecked: [function(receiver, value) {
      receiver._isolate_profile_element$__$hideTagsChecked = this.notifyPropertyChange$3(receiver, C.Symbol_hideTagsChecked, receiver._isolate_profile_element$__$hideTagsChecked, value);
    }, null, null, 3, 0, 306, 30, [], "hideTagsChecked", 304],
    get$sampleCount: [function(receiver) {
      return receiver._isolate_profile_element$__$sampleCount;
    }, null, null, 1, 0, 308, "sampleCount", 304, 305],
    set$sampleCount: [function(receiver, value) {
      receiver._isolate_profile_element$__$sampleCount = this.notifyPropertyChange$3(receiver, C.Symbol_sampleCount, receiver._isolate_profile_element$__$sampleCount, value);
    }, null, null, 3, 0, 32, 30, [], "sampleCount", 304],
    get$refreshTime: [function(receiver) {
      return receiver._isolate_profile_element$__$refreshTime;
    }, null, null, 1, 0, 308, "refreshTime", 304, 305],
    set$refreshTime: [function(receiver, value) {
      receiver._isolate_profile_element$__$refreshTime = this.notifyPropertyChange$3(receiver, C.Symbol_refreshTime, receiver._isolate_profile_element$__$refreshTime, value);
    }, null, null, 3, 0, 32, 30, [], "refreshTime", 304],
    get$sampleRate: [function(receiver) {
      return receiver._isolate_profile_element$__$sampleRate;
    }, null, null, 1, 0, 308, "sampleRate", 304, 305],
    set$sampleRate: [function(receiver, value) {
      receiver._isolate_profile_element$__$sampleRate = this.notifyPropertyChange$3(receiver, C.Symbol_sampleRate, receiver._isolate_profile_element$__$sampleRate, value);
    }, null, null, 3, 0, 32, 30, [], "sampleRate", 304],
    get$sampleDepth: [function(receiver) {
      return receiver._isolate_profile_element$__$sampleDepth;
    }, null, null, 1, 0, 308, "sampleDepth", 304, 305],
    set$sampleDepth: [function(receiver, value) {
      receiver._isolate_profile_element$__$sampleDepth = this.notifyPropertyChange$3(receiver, C.Symbol_sampleDepth, receiver._isolate_profile_element$__$sampleDepth, value);
    }, null, null, 3, 0, 32, 30, [], "sampleDepth", 304],
    get$displayCutoff: [function(receiver) {
      return receiver._isolate_profile_element$__$displayCutoff;
    }, null, null, 1, 0, 308, "displayCutoff", 304, 305],
    set$displayCutoff: [function(receiver, value) {
      receiver._isolate_profile_element$__$displayCutoff = this.notifyPropertyChange$3(receiver, C.Symbol_displayCutoff, receiver._isolate_profile_element$__$displayCutoff, value);
    }, null, null, 3, 0, 32, 30, [], "displayCutoff", 304],
    get$timeSpan: [function(receiver) {
      return receiver._isolate_profile_element$__$timeSpan;
    }, null, null, 1, 0, 308, "timeSpan", 304, 305],
    set$timeSpan: [function(receiver, value) {
      receiver._isolate_profile_element$__$timeSpan = this.notifyPropertyChange$3(receiver, C.Symbol_timeSpan, receiver._isolate_profile_element$__$timeSpan, value);
    }, null, null, 3, 0, 32, 30, [], "timeSpan", 304],
    get$tagSelector: [function(receiver) {
      return receiver._isolate_profile_element$__$tagSelector;
    }, null, null, 1, 0, 308, "tagSelector", 304, 305],
    set$tagSelector: [function(receiver, value) {
      receiver._isolate_profile_element$__$tagSelector = this.notifyPropertyChange$3(receiver, C.Symbol_tagSelector, receiver._isolate_profile_element$__$tagSelector, value);
    }, null, null, 3, 0, 32, 30, [], "tagSelector", 304],
    profileChanged$1: [function(receiver, oldValue) {
      var t1, totalSamples, now, period;
      t1 = receiver._isolate_profile_element$__$profile;
      if (t1 == null)
        return;
      totalSamples = J.$index$asx(t1, "samples");
      now = new P.DateTime(Date.now(), false);
      now.DateTime$_now$0();
      t1 = J.toString$0(totalSamples);
      receiver._isolate_profile_element$__$sampleCount = this.notifyPropertyChange$3(receiver, C.Symbol_sampleCount, receiver._isolate_profile_element$__$sampleCount, t1);
      t1 = now.toString$0(0);
      receiver._isolate_profile_element$__$refreshTime = this.notifyPropertyChange$3(receiver, C.Symbol_refreshTime, receiver._isolate_profile_element$__$refreshTime, t1);
      t1 = J.toString$0(J.$index$asx(receiver._isolate_profile_element$__$profile, "depth"));
      receiver._isolate_profile_element$__$sampleDepth = this.notifyPropertyChange$3(receiver, C.Symbol_sampleDepth, receiver._isolate_profile_element$__$sampleDepth, t1);
      period = J.$index$asx(receiver._isolate_profile_element$__$profile, "period");
      if (typeof period !== "number")
        return H.iae(period);
      t1 = C.JSNumber_methods.toStringAsFixed$1(1000000 / period, 0);
      receiver._isolate_profile_element$__$sampleRate = this.notifyPropertyChange$3(receiver, C.Symbol_sampleRate, receiver._isolate_profile_element$__$sampleRate, t1);
      t1 = G.Utils_formatTime(J.$index$asx(receiver._isolate_profile_element$__$profile, "timeSpan"));
      receiver._isolate_profile_element$__$timeSpan = this.notifyPropertyChange$3(receiver, C.Symbol_timeSpan, receiver._isolate_profile_element$__$timeSpan, t1);
      t1 = J.toString$0(J.$mul$ns(receiver.displayThreshold, 100)) + "%";
      receiver._isolate_profile_element$__$displayCutoff = this.notifyPropertyChange$3(receiver, C.Symbol_displayCutoff, receiver._isolate_profile_element$__$displayCutoff, t1);
      J.get$isolate$x(receiver._isolate_profile_element$__$profile).processProfile$1(receiver._isolate_profile_element$__$profile);
      J.$indexSet$ax(receiver._isolate_profile_element$__$profile, "threshold", receiver.displayThreshold);
      this._update$0(receiver);
    }, "call$1", "get$profileChanged", 2, 0, 166, 239, [], "profileChanged"],
    enteredView$0: [function(receiver) {
      var t1 = R._toObservableDeep([]);
      receiver.tree = new G.TableTree(t1, null, null);
      this._update$0(receiver);
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    tagSelectorChanged$1: [function(receiver, oldValue) {
      this.refresh$1(receiver, null);
    }, "call$1", "get$tagSelectorChanged", 2, 0, 166, 239, [], "tagSelectorChanged"],
    refresh$1: [function(receiver, done) {
      var request = "profile?tags=" + H.S(receiver._isolate_profile_element$__$tagSelector);
      J.get$isolate$x(receiver._isolate_profile_element$__$profile).get$1(request).then$1(new X.IsolateProfileElement_refresh_closure(receiver)).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    _update$0: [function(receiver) {
      if (receiver._isolate_profile_element$__$profile == null)
        return;
      this._buildStackTree$0(receiver);
    }, "call$0", "get$_update", 0, 0, 125, "_update"],
    _buildStackTree$0: [function(receiver) {
      var root, e, stackTrace, exception, t1;
      root = J.get$isolate$x(receiver._isolate_profile_element$__$profile).get$profileTrieRoot();
      if (root == null)
        return;
      try {
        receiver.tree.initialize$1(X.ProfileCodeTrieNodeTreeRow$(receiver._isolate_profile_element$__$profile, root, root, null));
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        stackTrace = new H._StackTrace(exception, null);
        N.Logger_Logger("").warning$3("_buildStackTree", e, stackTrace);
      }

      this.notifyPropertyChange$3(receiver, C.Symbol_tree, null, receiver.tree);
    }, "call$0", "get$_buildStackTree", 0, 0, 125, "_buildStackTree"],
    _buildTree$0: [function(receiver) {
      this._buildStackTree$0(receiver);
    }, "call$0", "get$_buildTree", 0, 0, 125, "_buildTree"],
    padding$1: [function(receiver, row) {
      return "padding-left: " + H.S(J.$mul$ns(row.get$depth(), 16)) + "px;";
    }, "call$1", "get$padding", 2, 0, 440, 327, [], "padding", 305],
    coloring$1: [function(receiver, row) {
      var index = J.$mod$n(J.$sub$n(row.get$depth(), 1), 9);
      if (index >>> 0 !== index || index >= 9)
        return H.ioore(C.List_mBx, index);
      return C.List_mBx[index];
    }, "call$1", "get$coloring", 2, 0, 440, 327, [], "coloring", 305],
    toggleExpanded$3: [function(receiver, e, detail, target) {
      var row, e0, stackTrace, t1, t2, exception;
      t1 = J.getInterceptor$x(e);
      if (!J.$eq(J.get$id$x(t1.get$target(e)), "expand") && !J.$eq(t1.get$target(e), target))
        return;
      row = J.get$parent$x(target);
      if (!!J.getInterceptor(row).$isTableRowElement)
        try {
          t1 = receiver.tree;
          t2 = J.get$rowIndex$x(row);
          if (typeof t2 !== "number")
            return t2.$sub();
          t1.toggle$1(t2 - 1);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          stackTrace = new H._StackTrace(exception, null);
          N.Logger_Logger("").warning$3("toggleExpanded", e0, stackTrace);
        }

    }, "call$3", "get$toggleExpanded", 6, 0, 424, 21, [], 347, [], 81, [], "toggleExpanded", 305],
    "@": function() {
      return [C.CustomTag_IET];
    },
    static: {"^": "IsolateProfileElement_MICROSECONDS_PER_SECOND<-84", IsolateProfileElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._isolate_profile_element$__$sampleCount = "";
        receiver._isolate_profile_element$__$refreshTime = "";
        receiver._isolate_profile_element$__$sampleRate = "";
        receiver._isolate_profile_element$__$sampleDepth = "";
        receiver._isolate_profile_element$__$displayCutoff = "";
        receiver._isolate_profile_element$__$timeSpan = "";
        receiver.displayThreshold = 0.0002;
        receiver._isolate_profile_element$__$tagSelector = "uv";
        receiver._isolate_profile_element$_id = "#tableTree";
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateProfileElement_methods.Element$created$0(receiver);
        C.IsolateProfileElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateProfileElement$created"]}
  },
  "+IsolateProfileElement": [441],
  ObservatoryElement_ChangeNotifier11: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateProfileElement_refresh_closure: {
    "^": "Closure:334;this_0-84",
    call$1: [function(m) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.set$_isolate_profile_element$__$profile(t1, t2.notifyPropertyChange$3(t1, C.Symbol_profile, t2.get$_isolate_profile_element$__$profile(t1), m));
    }, "call$1", null, 2, 0, 334, 199, [], "call"],
    $isFunction: true
  },
  "+ IsolateProfileElement_refresh_closure": [311]
}],
["isolate_ref_element", "package:observatory/src/elements/isolate_ref.dart", , N, {
  "^": "",
  IsolateRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    "@": function() {
      return [C.CustomTag_oyU];
    },
    static: {IsolateRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateRefElement_methods.Element$created$0(receiver);
        C.IsolateRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateRefElement$created"]}
  },
  "+IsolateRefElement": [338]
}],
["isolate_summary_element", "package:observatory/src/elements/isolate_summary.dart", , D, {
  "^": "",
  IsolateSummaryElement: {
    "^": ["ObservatoryElement_ChangeNotifier12;_isolate_summary_element$__$isolate%-442,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$isolate: [function(receiver) {
      return receiver._isolate_summary_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._isolate_summary_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._isolate_summary_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    "@": function() {
      return [C.CustomTag_BKg];
    },
    static: {IsolateSummaryElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateSummaryElement_methods.Element$created$0(receiver);
        C.IsolateSummaryElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateSummaryElement$created"]}
  },
  "+IsolateSummaryElement": [443],
  ObservatoryElement_ChangeNotifier12: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateRunStateElement: {
    "^": ["ObservatoryElement_ChangeNotifier13;_isolate_summary_element$__$isolate%-442,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$isolate: [function(receiver) {
      return receiver._isolate_summary_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._isolate_summary_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._isolate_summary_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    pause$1: [function(receiver, _) {
      return receiver._isolate_summary_element$__$isolate.get$1("debug/pause").then$1(new D.IsolateRunStateElement_pause_closure(receiver));
    }, "call$1", "get$pause", 2, 0, 444, 116, [], "pause"],
    resume$1: [function(receiver, _) {
      return receiver._isolate_summary_element$__$isolate.get$1("debug/resume").then$1(new D.IsolateRunStateElement_resume_closure(receiver));
    }, "call$1", "get$resume", 2, 0, 444, 116, [], "resume"],
    "@": function() {
      return [C.CustomTag_omH];
    },
    static: {IsolateRunStateElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateRunStateElement_methods.Element$created$0(receiver);
        C.IsolateRunStateElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateRunStateElement$created"]}
  },
  "+IsolateRunStateElement": [445],
  ObservatoryElement_ChangeNotifier13: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateRunStateElement_pause_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(result) {
      return J.reload$0$x(J.get$_isolate_summary_element$__$isolate$x(this.this_0));
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ IsolateRunStateElement_pause_closure": [311],
  IsolateRunStateElement_resume_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(result) {
      return J.reload$0$x(J.get$_isolate_summary_element$__$isolate$x(this.this_0));
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ IsolateRunStateElement_resume_closure": [311],
  IsolateLocationElement: {
    "^": ["ObservatoryElement_ChangeNotifier14;_isolate_summary_element$__$isolate%-442,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$isolate: [function(receiver) {
      return receiver._isolate_summary_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._isolate_summary_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._isolate_summary_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    "@": function() {
      return [C.CustomTag_2tK];
    },
    static: {IsolateLocationElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateLocationElement_methods.Element$created$0(receiver);
        C.IsolateLocationElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateLocationElement$created"]}
  },
  "+IsolateLocationElement": [446],
  ObservatoryElement_ChangeNotifier14: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateSharedSummaryElement: {
    "^": ["ObservatoryElement_ChangeNotifier15;_isolate_summary_element$__$isolate%-442,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$isolate: [function(receiver) {
      return receiver._isolate_summary_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._isolate_summary_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._isolate_summary_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    "@": function() {
      return [C.CustomTag_avb];
    },
    static: {IsolateSharedSummaryElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateSharedSummaryElement_methods.Element$created$0(receiver);
        C.IsolateSharedSummaryElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateSharedSummaryElement$created"]}
  },
  "+IsolateSharedSummaryElement": [447],
  ObservatoryElement_ChangeNotifier15: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  CounterChart: {
    "^": "Object;_isolate_summary_element$_table,_isolate_summary_element$_chart",
    update$1: function(counters) {
      var t1, t2, t3, key, t4, t5;
      t1 = this._isolate_summary_element$_table._app$_table;
      if (J.$eq(t1.callMethod$1("getNumberOfColumns"), 0)) {
        t1.callMethod$2("addColumn", ["string", "Name"]);
        t1.callMethod$2("addColumn", ["number", "Value"]);
      }
      t1.callMethod$2("removeRows", [0, t1.callMethod$1("getNumberOfRows")]);
      for (t2 = J.get$iterator$ax(counters.get$keys()), t3 = J.getInterceptor$asx(counters); t2.moveNext$0();) {
        key = t2.get$current();
        t4 = J.split$1$s(t3.$index(counters, key), "%");
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t5 = [];
        C.JSArray_methods.addAll$1(t5, C.JSArray_methods.map$1([key, H.Primitives_parseDouble(t4[0], null)], P._convertToJS$closure()));
        t5 = new P.JsArray(t5);
        t5.$builtinTypeInfo = [null];
        t1.callMethod$2("addRow", [t5]);
      }
    },
    draw$1: function(element) {
      var t1 = this._isolate_summary_element$_chart;
      if (t1 == null) {
        t1 = new G.Chart(null, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1._chart = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "PieChart"), [element]);
        this._isolate_summary_element$_chart = t1;
      }
      t1.draw$1(this._isolate_summary_element$_table);
    }
  },
  IsolateCounterChartElement: {
    "^": ["ObservatoryElement_ChangeNotifier16;_isolate_summary_element$__$counters%-448,chart%-449,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$counters: [function(receiver) {
      return receiver._isolate_summary_element$__$counters;
    }, null, null, 1, 0, 450, "counters", 304, 307],
    set$counters: [function(receiver, value) {
      receiver._isolate_summary_element$__$counters = this.notifyPropertyChange$3(receiver, C.Symbol_counters, receiver._isolate_summary_element$__$counters, value);
    }, null, null, 3, 0, 451, 30, [], "counters", 304],
    countersChanged$1: [function(receiver, oldValue) {
      var t1, element;
      t1 = receiver._isolate_summary_element$__$counters;
      if (t1 == null)
        return;
      receiver.chart.update$1(t1);
      element = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#counterPieChart");
      if (element != null)
        receiver.chart.draw$1(element);
    }, "call$1", "get$countersChanged", 2, 0, 166, 239, [], "countersChanged"],
    "@": function() {
      return [C.CustomTag_8WR];
    },
    static: {IsolateCounterChartElement$created: [function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "DataTable"), null);
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t4 = J.JSString;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver.chart = new D.CounterChart(new G.DataTable(t1), null);
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.IsolateCounterChartElement_methods.Element$created$0(receiver);
        C.IsolateCounterChartElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateCounterChartElement$created"]}
  },
  "+IsolateCounterChartElement": [452],
  ObservatoryElement_ChangeNotifier16: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["isolate_view_element", "package:observatory/src/elements/isolate_view.dart", , L, {
  "^": "",
  TagProfileChart: {
    "^": "Object;_isolate_view_element$_table,_isolate_view_element$_chart",
    update$1: function(tagProfile) {
      var t1, t2, tagName, idleIndex, t, i, snapshotTime, row, sum, j;
      t1 = this._isolate_view_element$_table._app$_table;
      if (J.$eq(t1.callMethod$1("getNumberOfColumns"), 0)) {
        t1.callMethod$2("addColumn", ["string", "Time"]);
        for (t2 = tagProfile.get$names(), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0();) {
          tagName = t2._current;
          if (J.$eq(tagName, "Idle"))
            continue;
          t1.callMethod$2("addColumn", ["number", tagName]);
        }
      }
      t1.callMethod$2("removeRows", [0, t1.callMethod$1("getNumberOfRows")]);
      t2 = tagProfile.get$names();
      idleIndex = H.Lists_indexOf(t2, "Idle", 0, t2.length);
      t = tagProfile.get$updatedAtSeconds();
      for (i = 0; i < tagProfile.get$snapshots().length; ++i) {
        t2 = tagProfile.get$snapshots();
        if (i >= t2.length)
          return H.ioore(t2, i);
        snapshotTime = t2[i].get$seconds();
        row = [];
        if (snapshotTime > 0) {
          if (typeof t !== "number")
            return H.iae(t);
          row.push("t " + C.JSNumber_methods.toStringAsFixed$1(snapshotTime - t, 2));
        } else
          row.push("");
        t2 = tagProfile.get$snapshots();
        if (i >= t2.length)
          return H.ioore(t2, i);
        sum = t2[i].get$sum();
        if (sum === 0) {
          j = 0;
          while (true) {
            t2 = tagProfile.get$snapshots();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t2 = J.get$length$asx(J.get$counters$x(t2[i]));
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(j < t2))
              break;
            c$1: {
              if (j === idleIndex)
                break c$1;
              row.push(0);
            }
            ++j;
          }
        } else {
          j = 0;
          while (true) {
            t2 = tagProfile.get$snapshots();
            if (i >= t2.length)
              return H.ioore(t2, i);
            t2 = J.get$length$asx(J.get$counters$x(t2[i]));
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(j < t2))
              break;
            c$1: {
              if (j === idleIndex)
                break c$1;
              t2 = tagProfile.get$snapshots();
              if (i >= t2.length)
                return H.ioore(t2, i);
              row.push(C.JSNumber_methods.toInt$0(J.$div$n(J.$index$asx(J.get$counters$x(t2[i]), j), sum) * 100));
            }
            ++j;
          }
        }
        t2 = [];
        C.JSArray_methods.addAll$1(t2, C.JSArray_methods.map$1(row, P._convertToJS$closure()));
        t2 = new P.JsArray(t2);
        t2.$builtinTypeInfo = [null];
        t1.callMethod$2("addRow", [t2]);
      }
    },
    draw$1: function(element) {
      var t1, t2;
      if (this._isolate_view_element$_chart == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t2 = new G.Chart(null, t1);
        t2._chart = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "SteppedAreaChart"), [element]);
        this._isolate_view_element$_chart = t2;
        t1.$indexSet(0, "isStacked", true);
        this._isolate_view_element$_chart.options.$indexSet(0, "connectSteps", false);
        this._isolate_view_element$_chart.options.$indexSet(0, "vAxis", H.fillLiteralMap(["minValue", 0, "maxValue", 100], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      }
      this._isolate_view_element$_chart.draw$1(this._isolate_view_element$_table);
    }
  },
  IsolateViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier17;_isolate_view_element$__$isolate%-442,_updateTimer%-453,tagProfileChart%-454,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$isolate: [function(receiver) {
      return receiver._isolate_view_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._isolate_view_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._isolate_view_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    eval$1: [function(receiver, text) {
      var t1 = receiver._isolate_view_element$__$isolate;
      return t1.get$1(J.$add$ns(J.get$id$x(t1.get$rootLib()), "/eval?expr=" + P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false)));
    }, "call$1", "get$eval", 2, 0, 339, 221, [], "eval"],
    _updateTagProfile$0: [function(receiver) {
      receiver._isolate_view_element$__$isolate.updateTagProfile$0().then$1(new L.IsolateViewElement__updateTagProfile_closure(receiver));
    }, "call$0", "get$_updateTagProfile", 0, 0, 125, "_updateTagProfile"],
    enteredView$0: [function(receiver) {
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      receiver._updateTimer = P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), this.get$_updateTagProfile(receiver));
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    leftView$0: [function(receiver) {
      var t1;
      Z.ObservatoryElement.prototype.leftView$0.call(this, receiver);
      t1 = receiver._updateTimer;
      if (t1 != null)
        t1.cancel$0();
    }, "call$0", "get$leftView", 0, 0, 125, "leftView"],
    _drawTagProfileChart$0: [function(receiver) {
      var element = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#tagProfileChart");
      if (element != null)
        receiver.tagProfileChart.draw$1(element);
    }, "call$0", "get$_drawTagProfileChart", 0, 0, 125, "_drawTagProfileChart"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._isolate_view_element$__$isolate).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    pause$1: [function(receiver, _) {
      return receiver._isolate_view_element$__$isolate.get$1("debug/pause").then$1(new L.IsolateViewElement_pause_closure(receiver));
    }, "call$1", "get$pause", 2, 0, 444, 116, [], "pause"],
    resume$1: [function(receiver, _) {
      return receiver._isolate_view_element$__$isolate.get$1("resume").then$1(new L.IsolateViewElement_resume_closure(receiver));
    }, "call$1", "get$resume", 2, 0, 444, 116, [], "resume"],
    "@": function() {
      return [C.CustomTag_M4v];
    },
    static: {IsolateViewElement$created: [function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = P.JsObject_JsObject(J.$index$asx($.GoogleChart__api, "DataTable"), null);
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t4 = J.JSString;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver.tagProfileChart = new L.TagProfileChart(new G.DataTable(t1), null);
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.IsolateViewElement_methods.Element$created$0(receiver);
        C.IsolateViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateViewElement$created"]}
  },
  "+IsolateViewElement": [455],
  ObservatoryElement_ChangeNotifier17: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateViewElement__updateTagProfile_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(tagProfile) {
      var t1, t2, element;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      t2.get$tagProfileChart(t1).update$1(tagProfile);
      element = (t1.shadowRoot || t1.webkitShadowRoot).querySelector("#tagProfileChart");
      if (element != null)
        t2.get$tagProfileChart(t1).draw$1(element);
      t2.set$_updateTimer(t1, P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), t2.get$_updateTagProfile(t1)));
    }, "call$1", null, 2, 0, 115, 456, [], "call"],
    $isFunction: true
  },
  "+ IsolateViewElement__updateTagProfile_closure": [311],
  IsolateViewElement_pause_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(result) {
      return J.reload$0$x(J.get$_isolate_view_element$__$isolate$x(this.this_0));
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ IsolateViewElement_pause_closure": [311],
  IsolateViewElement_resume_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(result) {
      return J.reload$0$x(J.get$_isolate_view_element$__$isolate$x(this.this_0));
    }, "call$1", null, 2, 0, 115, 56, [], "call"],
    $isFunction: true
  },
  "+ IsolateViewElement_resume_closure": [311]
}],
["json_view_element", "package:observatory/src/elements/json_view.dart", , Z, {
  "^": "",
  JsonPrettyPrinter: {
    "^": "Object;_json_view_element$_buffer,_json_view_element$_seen",
    _printMap$2: function(map, depth) {
      var t1, t2, t3, t4, t5, k, v, t6, str, str0, t7;
      t1 = this._json_view_element$_seen;
      if (t1.contains$1(0, map))
        return;
      t1.add$1(0, map);
      for (t2 = J.get$iterator$ax(map.get$keys()), t3 = this._json_view_element$_buffer, t4 = J.getInterceptor$asx(map), t5 = depth + 1; t2.moveNext$0();) {
        k = t2.get$current();
        v = t4.$index(map, k);
        t6 = J.getInterceptor(v);
        if (!!t6.$isMap) {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          t6 = typeof str === "string";
          str0 = t6 ? str : H.S(str);
          t3._contents = t3._contents + str0;
          t7 = "\"" + H.S(k) + "\": {\n";
          t3._contents = t3._contents + t7;
          this._printMap$2(v, t5);
          str = t6 ? str : H.S(str);
          t6 = t3._contents + str;
          t3._contents = t6;
          t3._contents = t6 + "}\n";
        } else if (!!t6.$isList) {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          t6 = typeof str === "string";
          str0 = t6 ? str : H.S(str);
          t3._contents = t3._contents + str0;
          t7 = "\"" + H.S(k) + "\": [\n";
          t3._contents = t3._contents + t7;
          this._printList$2(v, t5);
          str = t6 ? str : H.S(str);
          t6 = t3._contents + str;
          t3._contents = t6;
          t3._contents = t6 + "]\n";
        } else {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          str = typeof str === "string" ? str : H.S(str);
          t3._contents = t3._contents + str;
          t6 = "\"" + H.S(k) + "\": " + H.S(v);
          t6 = t3._contents + t6;
          t3._contents = t6;
          t3._contents = t6 + "\n";
        }
      }
      t1.remove$1(0, map);
    },
    _printList$2: function(list, depth) {
      var t1, t2, t3, t4, v, t5, str, str0, t6;
      t1 = this._json_view_element$_seen;
      if (t1.contains$1(0, list))
        return;
      t1.add$1(0, list);
      for (t2 = J.get$iterator$ax(list), t3 = this._json_view_element$_buffer, t4 = depth + 1; t2.moveNext$0();) {
        v = t2.get$current();
        t5 = J.getInterceptor(v);
        if (!!t5.$isMap) {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          t5 = typeof str === "string";
          str0 = t5 ? str : H.S(str);
          t6 = t3._contents + str0;
          t3._contents = t6;
          t3._contents = t6 + "{\n";
          this._printMap$2(v, t4);
          str = t5 ? str : H.S(str);
          t5 = t3._contents + str;
          t3._contents = t5;
          t3._contents = t5 + "}\n";
        } else if (!!t5.$isList) {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          t5 = typeof str === "string";
          str0 = t5 ? str : H.S(str);
          t6 = t3._contents + str0;
          t3._contents = t6;
          t3._contents = t6 + "[\n";
          this._printList$2(v, t4);
          str = t5 ? str : H.S(str);
          t5 = t3._contents + str;
          t3._contents = t5;
          t3._contents = t5 + "]\n";
        } else {
          if (typeof "  " !== "number")
            return H.iae("  ");
          str = depth * "  ";
          str = typeof str === "string" ? str : H.S(str);
          t3._contents = t3._contents + str;
          str = typeof v === "string" ? v : H.S(v);
          t5 = t3._contents + str;
          t3._contents = t5;
          t3._contents = t5 + "\n";
        }
      }
      t1.remove$1(0, list);
    }
  },
  JsonViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier18;_json_view_element$__$map%-332,_json_view_element$__$mapAsString%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$map: [function(receiver) {
      return receiver._json_view_element$__$map;
    }, null, null, 1, 0, 333, "map", 304, 307],
    map$1: function($receiver, arg0) {
      return this.get$map($receiver).call$1(arg0);
    },
    set$map: [function(receiver, value) {
      receiver._json_view_element$__$map = this.notifyPropertyChange$3(receiver, C.Symbol_map, receiver._json_view_element$__$map, value);
    }, null, null, 3, 0, 334, 30, [], "map", 304],
    get$mapAsString: [function(receiver) {
      return receiver._json_view_element$__$mapAsString;
    }, null, null, 1, 0, 308, "mapAsString", 304, 305],
    set$mapAsString: [function(receiver, value) {
      receiver._json_view_element$__$mapAsString = this.notifyPropertyChange$3(receiver, C.Symbol_mapAsString, receiver._json_view_element$__$mapAsString, value);
    }, null, null, 3, 0, 32, 30, [], "mapAsString", 304],
    mapChanged$1: [function(receiver, oldValue) {
      var t1, t2, t3;
      t1 = P.StringBuffer$("");
      t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t3 = receiver._json_view_element$__$map;
      t1._contents = "";
      t1.write$1("{\n");
      new Z.JsonPrettyPrinter(t1, t2)._printMap$2(t3, 0);
      t1.write$1("}\n");
      t1 = t1._contents;
      receiver._json_view_element$__$mapAsString = this.notifyPropertyChange$3(receiver, C.Symbol_mapAsString, receiver._json_view_element$__$mapAsString, t1);
    }, "call$1", "get$mapChanged", 2, 0, 166, 239, [], "mapChanged"],
    "@": function() {
      return [C.CustomTag_oqK];
    },
    static: {JsonViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.JsonViewElement_methods.Element$created$0(receiver);
        C.JsonViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new JsonViewElement$created"]}
  },
  "+JsonViewElement": [457],
  ObservatoryElement_ChangeNotifier18: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["library_ref_element", "package:observatory/src/elements/library_ref.dart", , R, {
  "^": "",
  LibraryRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    "@": function() {
      return [C.CustomTag_sQR];
    },
    static: {LibraryRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.LibraryRefElement_methods.Element$created$0(receiver);
        C.LibraryRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new LibraryRefElement$created"]}
  },
  "+LibraryRefElement": [338]
}],
["library_view_element", "package:observatory/src/elements/library_view.dart", , M, {
  "^": "",
  LibraryViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier19;_library_view_element$__$library%-458,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$library: [function(receiver) {
      return receiver._library_view_element$__$library;
    }, null, null, 1, 0, 459, "library", 304, 307],
    set$library: [function(receiver, value) {
      receiver._library_view_element$__$library = this.notifyPropertyChange$3(receiver, C.Symbol_library, receiver._library_view_element$__$library, value);
    }, null, null, 3, 0, 460, 30, [], "library", 304],
    eval$1: [function(receiver, text) {
      return J.get$isolate$x(receiver._library_view_element$__$library).get$1(J.$add$ns(J.get$id$x(receiver._library_view_element$__$library), "/eval?expr=" + P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false)));
    }, "call$1", "get$eval", 2, 0, 339, 221, [], "eval"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._library_view_element$__$library).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_RPn];
    },
    static: {LibraryViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.LibraryViewElement_methods.Element$created$0(receiver);
        C.LibraryViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new LibraryViewElement$created"]}
  },
  "+LibraryViewElement": [461],
  ObservatoryElement_ChangeNotifier19: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["logging", "package:logging/logging.dart", , N, {
  "^": "",
  Logger: {
    "^": "Object;name>,parent>,_level,_children>,children>,_controller",
    get$fullName: function() {
      var t1, t2, t3;
      t1 = this.parent;
      t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
      t3 = this.name;
      return t2 ? t3 : t1.get$fullName() + "." + t3;
    },
    get$level: function() {
      if ($.hierarchicalLoggingEnabled) {
        var t1 = this._level;
        if (t1 != null)
          return t1;
        t1 = this.parent;
        if (t1 != null)
          return t1.get$level();
      }
      return $._rootLevel;
    },
    set$level: function(value) {
      if ($.hierarchicalLoggingEnabled && this.parent != null)
        this._level = value;
      else {
        if (this.parent != null)
          throw H.wrapException(P.UnsupportedError$("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
        $._rootLevel = value;
      }
    },
    get$onRecord: function() {
      return this._getStream$0();
    },
    isLoggable$1: function(value) {
      return value.value >= this.get$level().value;
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var t1, t2, t3, record, target;
      if (logLevel.value >= this.get$level().value) {
        t1 = this.get$fullName();
        t2 = new P.DateTime(Date.now(), false);
        t2.DateTime$_now$0();
        t3 = $.LogRecord__nextNumber;
        $.LogRecord__nextNumber = t3 + 1;
        record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
        if ($.hierarchicalLoggingEnabled)
          for (target = this; target != null;) {
            t1 = J.getInterceptor$x(target);
            t1._publish$1(target, record);
            target = t1.get$parent(target);
          }
        else
          J._publish$1$x(N.Logger_Logger(""), record);
      }
    },
    finer$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINER_400, message, error, stackTrace);
    },
    finer$1: function(message) {
      return this.finer$3(message, null, null);
    },
    fine$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINE_500, message, error, stackTrace);
    },
    fine$1: function(message) {
      return this.fine$3(message, null, null);
    },
    info$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_INFO_800, message, error, stackTrace);
    },
    info$1: function(message) {
      return this.info$3(message, null, null);
    },
    warning$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
    },
    warning$1: function(message) {
      return this.warning$3(message, null, null);
    },
    severe$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_SEVERE_1000, message, error, stackTrace);
    },
    severe$1: function(message) {
      return this.severe$3(message, null, null);
    },
    _getStream$0: function() {
      if ($.hierarchicalLoggingEnabled || this.parent == null) {
        var t1 = this._controller;
        if (t1 == null) {
          t1 = P.StreamController_StreamController$broadcast(null, null, true, N.LogRecord);
          this._controller = t1;
        }
        t1.toString;
        return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
      } else
        return N.Logger_Logger("")._getStream$0();
    },
    _publish$1: function(_, record) {
      var t1 = this._controller;
      if (t1 != null) {
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(record);
      }
    },
    Logger$_internal$3: function($name, $parent, children) {
      var t1 = this.parent;
      if (t1 != null)
        J.get$_children$x(t1).$indexSet(0, this.name, this);
    },
    $isLogger: true,
    static: {"^": "Logger__loggers", Logger_Logger: function($name) {
        return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
      }}
  },
  Logger_Logger_closure: {
    "^": "Closure:114;name_0",
    call$0: [function() {
      var thisName, dot, $parent, t1, t2;
      thisName = this.name_0;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(new P.ArgumentError("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? N.Logger_Logger("") : null;
      else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, N.Logger);
      t2 = new N.Logger(thisName, $parent, null, t1, H.setRuntimeTypeInfo(new Q.UnmodifiableMapView(t1), [null, null]), null);
      t2.Logger$_internal$3(thisName, $parent, t1);
      return t2;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Level: {
    "^": "Object;name>,value>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isLevel && this.value === other.value;
    },
    $lt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value < t1;
    },
    $le: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value <= t1;
    },
    $gt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value > t1;
    },
    $ge: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value >= t1;
    },
    compareTo$1: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value - t1;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isLevel: true,
    static: {"^": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT,Level_LEVELS"}
  },
  LogRecord: {
    "^": "Object;level<,message>,loggerName,time<,sequenceNumber,error>,stackTrace<",
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    },
    $isLogRecord: true,
    static: {"^": "LogRecord__nextNumber"}
  }
}],
["", "main.dart", , F, {
  "^": "",
  main: [function() {
    N.Logger_Logger("").set$level(C.Level_INFO_800);
    N.Logger_Logger("").get$onRecord().listen$1(new F.main_closure());
    N.Logger_Logger("").info$1("Starting Observatory");
    var c = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
    N.Logger_Logger("").info$1("Loading Google Charts API");
    J.$index$asx($.get$context(), "google").callMethod$2("load", ["visualization", "1", P.JsObject_JsObject$jsify(H.fillLiteralMap(["packages", ["corechart", "table"], "callback", new P.JsFunction(P._convertDartFunction(c.get$complete(c), true))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)))]);
    c.future.then$1(G.GoogleChart__initOnceOnComplete$closure()).then$1(new F.main_closure0());
  }, "call$0", "main$closure", 0, 0, null],
  main_closure: {
    "^": "Closure:463;",
    call$1: [function(rec) {
      var t1;
      if (J.$eq(rec.get$level(), C.Level_WARNING_900)) {
        t1 = J.getInterceptor$x(rec);
        if (J.startsWith$1$s(t1.get$message(rec), "Error evaluating expression"))
          t1 = J.contains$1$asx(t1.get$message(rec), "Can't assign to null: ") === true || J.contains$1$asx(t1.get$message(rec), "Expression is not assignable: ") === true;
        else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        return;
      P.print(rec.get$level().name + ": " + H.S(rec.get$time()) + ": " + H.S(J.get$message$x(rec)));
    }, "call$1", null, 2, 0, null, 462, [], "call"],
    $isFunction: true
  },
  main_closure0: {
    "^": "Closure:115;",
    call$1: [function(_) {
      N.Logger_Logger("").info$1("Initializing Polymer");
      A.initPolymer();
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  }
}],
["metadata", "packages/$sdk/lib/html/html_common/metadata.dart", , B, {
  "^": "",
  SupportedBrowser: {
    "^": "Object;browserName,minimumVersion",
    static: {"^": "SupportedBrowser_CHROME,SupportedBrowser_FIREFOX,SupportedBrowser_IE,SupportedBrowser_OPERA,SupportedBrowser_SAFARI"}
  },
  Experimental: {
    "^": "Object;"
  },
  DomName: {
    "^": "Object;name>"
  },
  DocsEditable: {
    "^": "Object;"
  },
  Unstable: {
    "^": "Object;"
  }
}],
["nav_bar_element", "package:observatory/src/elements/nav_bar.dart", , A, {
  "^": "",
  NavBarElement: {
    "^": ["ObservatoryElement_ChangeNotifier20;_nav_bar_element$__$pad%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$pad: [function(receiver) {
      return receiver._nav_bar_element$__$pad;
    }, null, null, 1, 0, 303, "pad", 304, 307],
    set$pad: [function(receiver, value) {
      receiver._nav_bar_element$__$pad = this.notifyPropertyChange$3(receiver, C.Symbol_pad, receiver._nav_bar_element$__$pad, value);
    }, null, null, 3, 0, 306, 30, [], "pad", 304],
    "@": function() {
      return [C.CustomTag_uwd];
    },
    static: {NavBarElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$pad = true;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.NavBarElement_methods.Element$created$0(receiver);
        C.NavBarElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new NavBarElement$created"]}
  },
  "+NavBarElement": [464],
  ObservatoryElement_ChangeNotifier20: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  NavMenuElement: {
    "^": ["ObservatoryElement_ChangeNotifier21;_nav_bar_element$__$link%-301,_nav_bar_element$__$anchor%-301,_nav_bar_element$__$last%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$link: [function(receiver) {
      return receiver._nav_bar_element$__$link;
    }, null, null, 1, 0, 308, "link", 304, 307],
    set$link: [function(receiver, value) {
      receiver._nav_bar_element$__$link = this.notifyPropertyChange$3(receiver, C.Symbol_link, receiver._nav_bar_element$__$link, value);
    }, null, null, 3, 0, 32, 30, [], "link", 304],
    get$anchor: [function(receiver) {
      return receiver._nav_bar_element$__$anchor;
    }, null, null, 1, 0, 308, "anchor", 304, 307],
    set$anchor: [function(receiver, value) {
      receiver._nav_bar_element$__$anchor = this.notifyPropertyChange$3(receiver, C.Symbol_anchor, receiver._nav_bar_element$__$anchor, value);
    }, null, null, 3, 0, 32, 30, [], "anchor", 304],
    get$last: [function(receiver) {
      return receiver._nav_bar_element$__$last;
    }, null, null, 1, 0, 303, "last", 304, 307],
    set$last: [function(receiver, value) {
      receiver._nav_bar_element$__$last = this.notifyPropertyChange$3(receiver, C.Symbol_last, receiver._nav_bar_element$__$last, value);
    }, null, null, 3, 0, 306, 30, [], "last", 304],
    "@": function() {
      return [C.CustomTag_mX6];
    },
    static: {NavMenuElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$link = "#";
        receiver._nav_bar_element$__$anchor = "---";
        receiver._nav_bar_element$__$last = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.NavMenuElement_methods.Element$created$0(receiver);
        C.NavMenuElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new NavMenuElement$created"]}
  },
  "+NavMenuElement": [465],
  ObservatoryElement_ChangeNotifier21: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  NavMenuItemElement: {
    "^": ["ObservatoryElement_ChangeNotifier22;_nav_bar_element$__$link%-301,_nav_bar_element$__$anchor%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$link: [function(receiver) {
      return receiver._nav_bar_element$__$link;
    }, null, null, 1, 0, 308, "link", 304, 307],
    set$link: [function(receiver, value) {
      receiver._nav_bar_element$__$link = this.notifyPropertyChange$3(receiver, C.Symbol_link, receiver._nav_bar_element$__$link, value);
    }, null, null, 3, 0, 32, 30, [], "link", 304],
    get$anchor: [function(receiver) {
      return receiver._nav_bar_element$__$anchor;
    }, null, null, 1, 0, 308, "anchor", 304, 307],
    set$anchor: [function(receiver, value) {
      receiver._nav_bar_element$__$anchor = this.notifyPropertyChange$3(receiver, C.Symbol_anchor, receiver._nav_bar_element$__$anchor, value);
    }, null, null, 3, 0, 32, 30, [], "anchor", 304],
    "@": function() {
      return [C.CustomTag_E1h];
    },
    static: {NavMenuItemElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$link = "#";
        receiver._nav_bar_element$__$anchor = "---";
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.NavMenuItemElement_methods.Element$created$0(receiver);
        C.NavMenuItemElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new NavMenuItemElement$created"]}
  },
  "+NavMenuItemElement": [466],
  ObservatoryElement_ChangeNotifier22: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  NavRefreshElement: {
    "^": ["ObservatoryElement_ChangeNotifier23;_nav_bar_element$__$callback%-84,_nav_bar_element$__$active%-300,_nav_bar_element$__$label%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$callback: [function(receiver) {
      return receiver._nav_bar_element$__$callback;
    }, null, null, 1, 0, 114, "callback", 304, 307],
    callback$0: function($receiver) {
      return this.get$callback($receiver).call$0();
    },
    callback$1: function($receiver, arg0) {
      return this.get$callback($receiver).call$1(arg0);
    },
    set$callback: [function(receiver, value) {
      receiver._nav_bar_element$__$callback = this.notifyPropertyChange$3(receiver, C.Symbol_callback, receiver._nav_bar_element$__$callback, value);
    }, null, null, 3, 0, 115, 30, [], "callback", 304],
    get$active: [function(receiver) {
      return receiver._nav_bar_element$__$active;
    }, null, null, 1, 0, 303, "active", 304, 307],
    set$active: [function(receiver, value) {
      receiver._nav_bar_element$__$active = this.notifyPropertyChange$3(receiver, C.Symbol_active, receiver._nav_bar_element$__$active, value);
    }, null, null, 3, 0, 306, 30, [], "active", 304],
    get$label: [function(receiver) {
      return receiver._nav_bar_element$__$label;
    }, null, null, 1, 0, 308, "label", 304, 307],
    set$label: [function(receiver, value) {
      receiver._nav_bar_element$__$label = this.notifyPropertyChange$3(receiver, C.Symbol_label, receiver._nav_bar_element$__$label, value);
    }, null, null, 3, 0, 32, 30, [], "label", 304],
    buttonClick$3: [function(receiver, e, detail, target) {
      var t1 = receiver._nav_bar_element$__$active;
      if (t1 === true)
        return;
      receiver._nav_bar_element$__$active = this.notifyPropertyChange$3(receiver, C.Symbol_active, t1, true);
      if (receiver._nav_bar_element$__$callback != null)
        this.callback$1(receiver, this.get$refreshDone(receiver));
    }, "call$3", "get$buttonClick", 6, 0, 346, 21, [], 347, [], 81, [], "buttonClick"],
    refreshDone$0: [function(receiver) {
      receiver._nav_bar_element$__$active = this.notifyPropertyChange$3(receiver, C.Symbol_active, receiver._nav_bar_element$__$active, false);
    }, "call$0", "get$refreshDone", 0, 0, 125, "refreshDone"],
    "@": function() {
      return [C.CustomTag_86y];
    },
    static: {NavRefreshElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$active = false;
        receiver._nav_bar_element$__$label = "Refresh";
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.NavRefreshElement_methods.Element$created$0(receiver);
        C.NavRefreshElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new NavRefreshElement$created"]}
  },
  "+NavRefreshElement": [467],
  ObservatoryElement_ChangeNotifier23: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  TopNavMenuElement: {
    "^": ["ObservatoryElement_ChangeNotifier24;_nav_bar_element$__$last%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$last: [function(receiver) {
      return receiver._nav_bar_element$__$last;
    }, null, null, 1, 0, 303, "last", 304, 307],
    set$last: [function(receiver, value) {
      receiver._nav_bar_element$__$last = this.notifyPropertyChange$3(receiver, C.Symbol_last, receiver._nav_bar_element$__$last, value);
    }, null, null, 3, 0, 306, 30, [], "last", 304],
    "@": function() {
      return [C.CustomTag_Ujp];
    },
    static: {TopNavMenuElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$last = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.TopNavMenuElement_methods.Element$created$0(receiver);
        C.TopNavMenuElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new TopNavMenuElement$created"]}
  },
  "+TopNavMenuElement": [468],
  ObservatoryElement_ChangeNotifier24: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  IsolateNavMenuElement: {
    "^": ["ObservatoryElement_ChangeNotifier25;_nav_bar_element$__$last%-300,_nav_bar_element$__$isolate%-442,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$last: [function(receiver) {
      return receiver._nav_bar_element$__$last;
    }, null, null, 1, 0, 303, "last", 304, 307],
    set$last: [function(receiver, value) {
      receiver._nav_bar_element$__$last = this.notifyPropertyChange$3(receiver, C.Symbol_last, receiver._nav_bar_element$__$last, value);
    }, null, null, 3, 0, 306, 30, [], "last", 304],
    get$isolate: [function(receiver) {
      return receiver._nav_bar_element$__$isolate;
    }, null, null, 1, 0, 314, "isolate", 304, 307],
    set$isolate: [function(receiver, value) {
      receiver._nav_bar_element$__$isolate = this.notifyPropertyChange$3(receiver, C.Symbol_isolate, receiver._nav_bar_element$__$isolate, value);
    }, null, null, 3, 0, 315, 30, [], "isolate", 304],
    isolateChanged$1: [function(receiver, oldValue) {
      this.notifyPropertyChange$3(receiver, C.Symbol_hashLinkWorkaround, 0, 1);
    }, "call$1", "get$isolateChanged", 2, 0, 166, 239, [], "isolateChanged"],
    get$hashLinkWorkaround: [function(receiver) {
      var t1 = receiver._nav_bar_element$__$isolate;
      if (t1 != null)
        return t1.get$hashLink();
      else
        return "";
    }, null, null, 1, 0, 308, "hashLinkWorkaround", 304],
    set$hashLinkWorkaround: [function(receiver, x) {
    }, null, null, 3, 0, 115, 28, [], "hashLinkWorkaround", 304],
    "@": function() {
      return [C.CustomTag_k6K];
    },
    static: {IsolateNavMenuElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$last = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.IsolateNavMenuElement_methods.Element$created$0(receiver);
        C.IsolateNavMenuElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new IsolateNavMenuElement$created"]}
  },
  "+IsolateNavMenuElement": [469],
  ObservatoryElement_ChangeNotifier25: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  LibraryNavMenuElement: {
    "^": ["ObservatoryElement_ChangeNotifier26;_nav_bar_element$__$library%-458,_nav_bar_element$__$last%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$library: [function(receiver) {
      return receiver._nav_bar_element$__$library;
    }, null, null, 1, 0, 459, "library", 304, 307],
    set$library: [function(receiver, value) {
      receiver._nav_bar_element$__$library = this.notifyPropertyChange$3(receiver, C.Symbol_library, receiver._nav_bar_element$__$library, value);
    }, null, null, 3, 0, 460, 30, [], "library", 304],
    get$last: [function(receiver) {
      return receiver._nav_bar_element$__$last;
    }, null, null, 1, 0, 303, "last", 304, 307],
    set$last: [function(receiver, value) {
      receiver._nav_bar_element$__$last = this.notifyPropertyChange$3(receiver, C.Symbol_last, receiver._nav_bar_element$__$last, value);
    }, null, null, 3, 0, 306, 30, [], "last", 304],
    "@": function() {
      return [C.CustomTag_ECG];
    },
    static: {LibraryNavMenuElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$last = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.LibraryNavMenuElement_methods.Element$created$0(receiver);
        C.LibraryNavMenuElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new LibraryNavMenuElement$created"]}
  },
  "+LibraryNavMenuElement": [470],
  ObservatoryElement_ChangeNotifier26: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  ClassNavMenuElement: {
    "^": ["ObservatoryElement_ChangeNotifier27;_nav_bar_element$__$cls%-332,_nav_bar_element$__$last%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$cls: [function(receiver) {
      return receiver._nav_bar_element$__$cls;
    }, null, null, 1, 0, 333, "cls", 304, 307],
    set$cls: [function(receiver, value) {
      receiver._nav_bar_element$__$cls = this.notifyPropertyChange$3(receiver, C.Symbol_cls, receiver._nav_bar_element$__$cls, value);
    }, null, null, 3, 0, 334, 30, [], "cls", 304],
    get$last: [function(receiver) {
      return receiver._nav_bar_element$__$last;
    }, null, null, 1, 0, 303, "last", 304, 307],
    set$last: [function(receiver, value) {
      receiver._nav_bar_element$__$last = this.notifyPropertyChange$3(receiver, C.Symbol_last, receiver._nav_bar_element$__$last, value);
    }, null, null, 3, 0, 306, 30, [], "last", 304],
    "@": function() {
      return [C.CustomTag_lGg];
    },
    static: {ClassNavMenuElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._nav_bar_element$__$last = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ClassNavMenuElement_methods.Element$created$0(receiver);
        C.ClassNavMenuElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ClassNavMenuElement$created"]}
  },
  "+ClassNavMenuElement": [471],
  ObservatoryElement_ChangeNotifier27: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["observatory_application_element", "package:observatory/src/elements/observatory_application.dart", , V, {
  "^": "",
  ObservatoryApplicationElement: {
    "^": ["ObservatoryElement_ChangeNotifier28;_observatory_application_element$__$devtools%-300,_observatory_application_element$__$app%-472,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$devtools: [function(receiver) {
      return receiver._observatory_application_element$__$devtools;
    }, null, null, 1, 0, 303, "devtools", 304, 307],
    set$devtools: [function(receiver, value) {
      receiver._observatory_application_element$__$devtools = this.notifyPropertyChange$3(receiver, C.Symbol_devtools, receiver._observatory_application_element$__$devtools, value);
    }, null, null, 3, 0, 306, 30, [], "devtools", 304],
    get$app: [function(receiver) {
      return receiver._observatory_application_element$__$app;
    }, null, null, 1, 0, 473, "app", 304, 305],
    set$app: [function(receiver, value) {
      receiver._observatory_application_element$__$app = this.notifyPropertyChange$3(receiver, C.Symbol_app, receiver._observatory_application_element$__$app, value);
    }, null, null, 3, 0, 474, 30, [], "app", 304],
    ObservatoryApplicationElement$created$0: [function(receiver) {
      var t1;
      if (receiver._observatory_application_element$__$devtools === true) {
        t1 = new U.DartiumVM(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), 0, "unknown", "unknown", 0, false, false, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.ServiceObject), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.Isolate), null, null, null, null, null, false, null, null, null, null, null);
        t1.VM$0();
        t1.DartiumVM$0();
        t1 = new G.ObservatoryApplication(new G.LocationManager(null, "", null, null), t1, null, null, null, null, null);
        t1.ObservatoryApplication$devtools$0();
        receiver._observatory_application_element$__$app = this.notifyPropertyChange$3(receiver, C.Symbol_app, receiver._observatory_application_element$__$app, t1);
      } else {
        t1 = new U.HttpVM(null, "unknown", "unknown", 0, false, false, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.ServiceObject), P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.Isolate), null, null, null, null, null, false, null, null, null, null, null);
        t1.VM$0();
        t1.HttpVM$0();
        t1 = new G.ObservatoryApplication(new G.LocationManager(null, "", null, null), t1, null, null, null, null, null);
        t1.ObservatoryApplication$0();
        receiver._observatory_application_element$__$app = this.notifyPropertyChange$3(receiver, C.Symbol_app, receiver._observatory_application_element$__$app, t1);
      }
    }, null, null, 0, 0, 114, "created"],
    "@": function() {
      return [C.CustomTag_i00];
    },
    static: {ObservatoryApplicationElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._observatory_application_element$__$devtools = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ObservatoryApplicationElement_methods.Element$created$0(receiver);
        C.ObservatoryApplicationElement_methods.PolymerElement$created$0(receiver);
        C.ObservatoryApplicationElement_methods.ObservatoryApplicationElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ObservatoryApplicationElement$created"]}
  },
  "+ObservatoryApplicationElement": [475],
  ObservatoryElement_ChangeNotifier28: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["observatory_element", "package:observatory/src/elements/observatory_element.dart", , Z, {
  "^": "",
  ObservatoryElement: {
    "^": ["PolymerElement;change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    enteredView$0: [function(receiver) {
      A.Polymer.prototype.enteredView$0.call(this, receiver);
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    leftView$0: [function(receiver) {
      A.Polymer.prototype.leftView$0.call(this, receiver);
    }, "call$0", "get$leftView", 0, 0, 125, "leftView"],
    attributeChanged$3: [function(receiver, $name, oldValue, newValue) {
      A.Polymer.prototype.attributeChanged$3.call(this, receiver, $name, oldValue, newValue);
    }, "call$3", "get$attributeChanged", 6, 0, 476, 12, [], 239, [], 240, [], "attributeChanged"],
    formatTimePrecise$1: [function(receiver, time) {
      return G.Utils_formatTimePrecise(time);
    }, "call$1", "get$formatTimePrecise", 2, 0, 477, 122, [], "formatTimePrecise"],
    formatTime$1: [function(receiver, time) {
      return G.Utils_formatTime(time);
    }, "call$1", "get$formatTime", 2, 0, 477, 122, [], "formatTime"],
    formatSeconds$1: [function(receiver, x) {
      return J.toStringAsFixed$1$n(x, 2);
    }, "call$1", "get$formatSeconds", 2, 0, 477, 28, [], "formatSeconds"],
    formatSize$1: [function(receiver, bytes) {
      return G.Utils_formatSize(bytes);
    }, "call$1", "get$formatSize", 2, 0, 120, 123, [], "formatSize"],
    fileAndLine$1: [function(receiver, frame) {
      var t1, file, t2;
      t1 = J.getInterceptor$asx(frame);
      file = J.$index$asx(t1.$index(frame, "script"), "user_name");
      t2 = J.getInterceptor$asx(file);
      return t2.substring$1(file, J.$add$ns(t2.lastIndexOf$1(file, "/"), 1)) + ":" + H.S(t1.$index(frame, "line"));
    }, "call$1", "get$fileAndLine", 2, 0, 478, 479, [], "fileAndLine"],
    isNull$1: [function(receiver, type) {
      return J.$eq(type, "Null");
    }, "call$1", "get$isNull", 2, 0, 480, 11, [], "isNull"],
    isError$1: [function(receiver, type) {
      return J.$eq(type, "Error");
    }, "call$1", "get$isError", 2, 0, 480, 11, [], "isError"],
    isInt$1: [function(receiver, type) {
      var t1 = J.getInterceptor(type);
      return t1.$eq(type, "Smi") || t1.$eq(type, "Mint") || t1.$eq(type, "Bigint");
    }, "call$1", "get$isInt", 2, 0, 480, 11, [], "isInt"],
    isBool$1: [function(receiver, type) {
      return J.$eq(type, "Bool");
    }, "call$1", "get$isBool", 2, 0, 480, 11, [], "isBool"],
    isString$1: [function(receiver, type) {
      return J.$eq(type, "String");
    }, "call$1", "get$isString", 2, 0, 480, 11, [], "isString"],
    isInstance$1: [function(receiver, type) {
      return J.$eq(type, "Instance");
    }, "call$1", "get$isInstance", 2, 0, 480, 11, [], "isInstance"],
    isDouble$1: [function(receiver, type) {
      return J.$eq(type, "Double");
    }, "call$1", "get$isDouble", 2, 0, 480, 11, [], "isDouble"],
    isList$1: [function(receiver, type) {
      var t1 = J.getInterceptor(type);
      return t1.$eq(type, "GrowableObjectArray") || t1.$eq(type, "Array");
    }, "call$1", "get$isList", 2, 0, 480, 11, [], "isList"],
    isType$1: [function(receiver, type) {
      return J.$eq(type, "Type");
    }, "call$1", "get$isType", 2, 0, 480, 11, [], "isType"],
    isUnexpected$1: [function(receiver, type) {
      return !C.JSArray_methods.contains$1(["Null", "Smi", "Mint", "Bigint", "Bool", "String", "Double", "Instance", "GrowableObjectArray", "Array", "Type", "Error"], type);
    }, "call$1", "get$isUnexpected", 2, 0, 480, 11, [], "isUnexpected"],
    "@": function() {
      return [C.CustomTag_6nc0];
    },
    static: {ObservatoryElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ObservatoryElement_methods.Element$created$0(receiver);
        C.ObservatoryElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ObservatoryElement$created"]}
  },
  "+ObservatoryElement": [481]
}],
["observe.src.change_notifier", "package:observe/src/change_notifier.dart", , O, {
  "^": "",
  ChangeNotifier: {
    "^": "Object;",
    get$changes: function(receiver) {
      var t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 == null) {
        t1 = this.get$observed(receiver);
        t1 = P.StreamController_StreamController$broadcast(this.get$unobserved(receiver), t1, true, null);
        receiver.change_notifier$ChangeNotifier$_changes = t1;
      }
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    observed$0: [function(receiver) {
    }, "call$0", "get$observed", 0, 0, 125],
    unobserved$0: [function(receiver) {
      receiver.change_notifier$ChangeNotifier$_changes = null;
    }, "call$0", "get$unobserved", 0, 0, 125],
    deliverChanges$0: [function(receiver) {
      var records, t1, t2;
      records = receiver.change_notifier$ChangeNotifier$_records;
      receiver.change_notifier$ChangeNotifier$_records = null;
      if (this.get$hasObservers(receiver) && records != null) {
        t1 = receiver.change_notifier$ChangeNotifier$_changes;
        t2 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(records), [T.ChangeRecord]);
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
        return true;
      }
      return false;
    }, "call$0", "get$deliverChanges", 0, 0, 303],
    get$hasObservers: function(receiver) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      return t1;
    },
    notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
      return F.notifyPropertyChangeHelper(receiver, field, oldValue, newValue);
    },
    notifyChange$1: function(receiver, record) {
      if (!this.get$hasObservers(receiver))
        return;
      if (receiver.change_notifier$ChangeNotifier$_records == null) {
        receiver.change_notifier$ChangeNotifier$_records = [];
        P.scheduleMicrotask(this.get$deliverChanges(receiver));
      }
      receiver.change_notifier$ChangeNotifier$_records.push(record);
    },
    $isObservable: true
  }
}],
["observe.src.change_record", "package:observe/src/change_record.dart", , T, {
  "^": "",
  ChangeRecord: {
    "^": "Object;",
    $isChangeRecord: true
  },
  PropertyChangeRecord: {
    "^": "ChangeRecord;object>,name>,oldValue>,newValue>",
    toString$0: function(_) {
      return "#<PropertyChangeRecord " + H.S(this.name) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isPropertyChangeRecord: true
  }
}],
["observe.src.compound_path_observer", "package:observe/src/compound_path_observer.dart", , Y, {
  "^": "",
  CompoundPathObserver: {
    "^": "ChangeNotifier;_compound_path_observer$_observers,_compound_path_observer$_subs,_compound_path_observer$_value,_compound_path_observer$_computeValue,_started,_scheduled,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    _compound_path_observer$_computeValue$1: function(arg0) {
      return this._compound_path_observer$_computeValue.call$1(arg0);
    },
    get$length: function(_) {
      return this._compound_path_observer$_observers.length;
    },
    get$value: [function(_) {
      return this._compound_path_observer$_value;
    }, null, null, 1, 0, 114, "value", 304],
    start$0: function(_) {
      var scheduleResolve, t1, t2, subscription, t3;
      if (this._started)
        return;
      this._started = true;
      scheduleResolve = this.get$_scheduleResolve();
      for (t1 = this._compound_path_observer$_observers, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._compound_path_observer$_subs; t1.moveNext$0();) {
        subscription = J.get$changes$x(t1._current)._createSubscription$1(false);
        t3 = subscription._zone;
        subscription._async$_onData = t3.registerUnaryCallback$1(scheduleResolve);
        subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure(), t3);
        subscription._onDone = t3.registerCallback$1(P._nullDoneHandler$closure());
        t2.push(subscription);
      }
      this._resolve$0();
    },
    _scheduleResolve$1: [function(_) {
      if (this._scheduled)
        return;
      this._scheduled = true;
      P.scheduleMicrotask(this.get$_resolve());
    }, "call$1", "get$_scheduleResolve", 2, 0, 166, 116, []],
    _resolve$0: [function() {
      var t1, newValue;
      this._scheduled = false;
      t1 = this._compound_path_observer$_observers;
      if (t1.length === 0)
        return;
      newValue = H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new Y.CompoundPathObserver__resolve_closure()), [null, null]).toList$0(0);
      if (this._compound_path_observer$_computeValue != null)
        newValue = this._compound_path_observer$_computeValue$1(newValue);
      this._compound_path_observer$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._compound_path_observer$_value, newValue);
    }, "call$0", "get$_resolve", 0, 0, 125],
    close$0: function(_) {
      var t1, t2;
      t1 = this._compound_path_observer$_observers;
      if (t1.length === 0)
        return;
      if (this._started)
        for (t2 = this._compound_path_observer$_subs, t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0();)
          t2._current.cancel$0();
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.set$length(this._compound_path_observer$_subs, 0);
      this._compound_path_observer$_value = null;
    },
    observed$0: [function(_) {
      return this.start$0(0);
    }, "call$0", "get$observed", 0, 0, 114],
    unobserved$0: [function(_) {
      return this.close$0(0);
    }, "call$0", "get$unobserved", 0, 0, 114],
    $isCompoundPathObserver: true
  },
  CompoundPathObserver__resolve_closure: {
    "^": "Closure:115;",
    call$1: [function(o) {
      return J.get$value$x(o);
    }, "call$1", null, 2, 0, null, 98, [], "call"],
    $isFunction: true
  }
}],
["observe.src.dirty_check", "package:observe/src/dirty_check.dart", , O, {
  "^": "",
  dirtyCheckObservables: [function() {
    var cycles, debugLoop, toCheck, t1, anyChanged, i, observer, t2, info, t3;
    if ($._delivering)
      return;
    if ($._allObservables == null)
      return;
    $._delivering = true;
    cycles = 0;
    debugLoop = null;
    do {
      ++cycles;
      if (cycles === 1000)
        debugLoop = [];
      toCheck = $._allObservables;
      t1 = [];
      t1.$builtinTypeInfo = [F.Observable];
      $._allObservables = t1;
      for (t1 = debugLoop != null, anyChanged = false, i = 0; i < toCheck.length; ++i) {
        observer = toCheck[i];
        t2 = J.getInterceptor$x(observer);
        if (t2.get$hasObservers(observer)) {
          if (t2.deliverChanges$0(observer)) {
            if (t1)
              debugLoop.push([i, observer]);
            anyChanged = true;
          }
          $._allObservables.push(observer);
        }
      }
    } while (cycles < 1000 && anyChanged);
    if (t1 && anyChanged) {
      t1 = $.get$_logger0();
      t1.warning$1("Possible loop in Observable.dirtyCheck, stopped checking.");
      for (t2 = H.setRuntimeTypeInfo(new H.ListIterator(debugLoop, debugLoop.length, 0, null), [H.getTypeArgumentByIndex(debugLoop, 0)]); t2.moveNext$0();) {
        info = t2._current;
        t3 = J.getInterceptor$asx(info);
        t1.warning$1("In last iteration Observable changed at index " + H.S(t3.$index(info, 0)) + ", object: " + H.S(t3.$index(info, 1)) + ".");
      }
    }
    $._allObservablesCount = $._allObservables.length;
    $._delivering = false;
  }, "call$0", "dirtyCheckObservables$closure", 0, 0, null],
  dirtyCheckZoneSpec: [function() {
    var t1 = {};
    t1.pending_0 = false;
    t1 = new O.dirtyCheckZoneSpec_enqueueDirtyCheck(t1);
    return new P._ZoneSpecification(null, null, null, null, new O.dirtyCheckZoneSpec_wrapCallback(t1), new O.dirtyCheckZoneSpec_wrapUnaryCallback(t1), null, null, null, null, null, null);
  }, "call$0", "dirtyCheckZoneSpec$closure", 0, 0, null],
  dirtyCheckZoneSpec_enqueueDirtyCheck: {
    "^": "Closure:482;box_0",
    call$2: [function($parent, zone) {
      var t1 = this.box_0;
      if (t1.pending_0)
        return;
      t1.pending_0 = true;
      $parent.scheduleMicrotask$2(zone, new O.dirtyCheckZoneSpec_enqueueDirtyCheck_closure(t1));
    }, "call$2", null, 4, 0, null, 178, [], 162, [], "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_enqueueDirtyCheck_closure: {
    "^": "Closure:114;box_0",
    call$0: [function() {
      this.box_0.pending_0 = false;
      O.dirtyCheckObservables();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapCallback: {
    "^": "Closure:179;enqueueDirtyCheck_1",
    call$4: [function($self, $parent, zone, f) {
      if (f == null)
        return f;
      return new O.dirtyCheckZoneSpec_wrapCallback_closure(this.enqueueDirtyCheck_1, $parent, zone, f);
    }, "call$4", null, 8, 0, null, 177, [], 178, [], 162, [], 127, [], "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapCallback_closure: {
    "^": "Closure:114;enqueueDirtyCheck_2,parent_3,zone_4,f_5",
    call$0: [function() {
      this.enqueueDirtyCheck_2.call$2(this.parent_3, this.zone_4);
      return this.f_5.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapUnaryCallback: {
    "^": "Closure:483;enqueueDirtyCheck_6",
    call$4: [function($self, $parent, zone, f) {
      if (f == null)
        return f;
      return new O.dirtyCheckZoneSpec_wrapUnaryCallback_closure(this.enqueueDirtyCheck_6, $parent, zone, f);
    }, "call$4", null, 8, 0, null, 177, [], 178, [], 162, [], 127, [], "call"],
    $isFunction: true
  },
  dirtyCheckZoneSpec_wrapUnaryCallback_closure: {
    "^": "Closure:115;enqueueDirtyCheck_7,parent_8,zone_9,f_10",
    call$1: [function(x) {
      this.enqueueDirtyCheck_7.call$2(this.parent_8, this.zone_9);
      return this.f_10.call$1(x);
    }, "call$1", null, 2, 0, null, 28, [], "call"],
    $isFunction: true
  }
}],
["observe.src.list_diff", "package:observe/src/list_diff.dart", , G, {
  "^": "",
  _calcEditDistances: [function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var rowCount, columnCount, distances, t1, i, t2, j, t3, t4, t5, t6, t7, t8, t9, north, west;
    rowCount = J.$add$ns(J.$sub$n(oldEnd, oldStart), 1);
    columnCount = J.$add$ns(J.$sub$n(currentEnd, currentStart), 1);
    if (typeof rowCount !== "number")
      return H.iae(rowCount);
    distances = Array(rowCount);
    for (t1 = distances.length, i = 0; i < rowCount; ++i) {
      if (typeof columnCount !== "number")
        return H.iae(columnCount);
      t2 = Array(columnCount);
      t2.fixed$length = init;
      if (i >= t1)
        return H.ioore(distances, i);
      distances[i] = t2;
      if (0 < 0 || 0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = i;
    }
    if (typeof columnCount !== "number")
      return H.iae(columnCount);
    j = 0;
    for (; j < columnCount; ++j) {
      if (0 >= t1)
        return H.ioore(distances, 0);
      J.$indexSet$ax(distances[0], j, j);
    }
    for (t2 = J.getInterceptor$asx(old), t3 = J.getInterceptor$ns(currentStart), t4 = J.getInterceptor$asx(current), i = 1; i < rowCount; ++i)
      for (t5 = i - 1, t6 = oldStart + i - 1, j = 1; j < columnCount; ++j) {
        t7 = J.$eq(t2.$index(old, t6), t4.$index(current, J.$sub$n(t3.$add(currentStart, j), 1)));
        t8 = j - 1;
        t9 = distances[t5];
        if (t7) {
          if (i >= t1)
            return H.ioore(distances, i);
          t7 = distances[i];
          if (t5 >= t1)
            return H.ioore(distances, t5);
          J.$indexSet$ax(t7, j, J.$index$asx(t9, t8));
        } else {
          if (t5 >= t1)
            return H.ioore(distances, t5);
          north = J.$add$ns(J.$index$asx(t9, j), 1);
          if (i >= t1)
            return H.ioore(distances, i);
          west = J.$add$ns(J.$index$asx(distances[i], t8), 1);
          J.$indexSet$ax(distances[i], j, P.min(north, west));
        }
      }
    return distances;
  }, "call$6", "_calcEditDistances$closure", 12, 0, null, 250, [], 251, [], 252, [], 253, [], 254, [], 255, []],
  _spliceOperationsFromEditDistances: [function(distances) {
    var t1, i, j, current, edits, t2, t3, northWest, west, north, min;
    t1 = distances.length;
    i = t1 - 1;
    if (0 >= t1)
      return H.ioore(distances, 0);
    j = J.$sub$n(J.get$length$asx(distances[0]), 1);
    if (i < 0)
      return H.ioore(distances, i);
    current = J.$index$asx(distances[i], j);
    edits = [];
    while (true) {
      if (!(i > 0 || J.$gt$n(j, 0)))
        break;
      c$0: {
        if (i === 0) {
          edits.push(2);
          j = J.$sub$n(j, 1);
          break c$0;
        }
        t2 = J.getInterceptor(j);
        if (t2.$eq(j, 0)) {
          edits.push(3);
          --i;
          break c$0;
        }
        t3 = i - 1;
        if (t3 < 0)
          return H.ioore(distances, t3);
        northWest = J.$index$asx(distances[t3], t2.$sub(j, 1));
        west = J.$index$asx(distances[t3], j);
        if (i < 0)
          return H.ioore(distances, i);
        north = J.$index$asx(distances[i], t2.$sub(j, 1));
        min = P.min(P.min(west, north), northWest);
        if (min === northWest) {
          if (J.$eq(northWest, current))
            edits.push(0);
          else {
            edits.push(1);
            current = northWest;
          }
          j = t2.$sub(j, 1);
          i = t3;
        } else if (min === west) {
          edits.push(3);
          current = west;
          i = t3;
        } else {
          edits.push(2);
          j = t2.$sub(j, 1);
          current = north;
        }
      }
    }
    return H.setRuntimeTypeInfo(new H.ReversedListIterable(edits), [null]).toList$0(0);
  }, "call$1", "_spliceOperationsFromEditDistances$closure", 2, 0, null, 256, []],
  _sharedPrefix: [function(arr1, arr2, searchLength) {
    var t1, t2, i;
    for (t1 = J.getInterceptor$asx(arr1), t2 = J.getInterceptor$asx(arr2), i = 0; i < searchLength; ++i)
      if (!J.$eq(t1.$index(arr1, i), t2.$index(arr2, i)))
        return i;
    return searchLength;
  }, "call$3", "_sharedPrefix$closure", 6, 0, null, 257, [], 258, [], 259, []],
  _sharedSuffix: [function(arr1, arr2, searchLength) {
    var t1, index1, t2, index2, count, t3;
    t1 = J.getInterceptor$asx(arr1);
    index1 = t1.get$length(arr1);
    t2 = J.getInterceptor$asx(arr2);
    index2 = t2.get$length(arr2);
    count = 0;
    while (true) {
      if (count < searchLength) {
        index1 = J.$sub$n(index1, 1);
        t3 = t1.$index(arr1, index1);
        index2 = J.$sub$n(index2, 1);
        t3 = J.$eq(t3, t2.$index(arr2, index2));
      } else
        t3 = false;
      if (!t3)
        break;
      ++count;
    }
    return count;
  }, "call$3", "_sharedSuffix$closure", 6, 0, null, 257, [], 258, [], 259, []],
  calcSplices: [function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var t1, t2, minLength, t3, prefixCount, suffixCount, removed, splice, oldStart0, ops, splices, oldIndex, index, i;
    t1 = J.getInterceptor$n(currentEnd);
    t2 = J.getInterceptor$n(oldEnd);
    minLength = P.min(t1.$sub(currentEnd, currentStart), t2.$sub(oldEnd, oldStart));
    t3 = J.getInterceptor(currentStart);
    prefixCount = t3.$eq(currentStart, 0) && oldStart === 0 ? G._sharedPrefix(current, old, minLength) : 0;
    suffixCount = t1.$eq(currentEnd, J.get$length$asx(current)) && t2.$eq(oldEnd, J.get$length$asx(old)) ? G._sharedSuffix(current, old, minLength - prefixCount) : 0;
    currentStart = t3.$add(currentStart, prefixCount);
    oldStart += prefixCount;
    currentEnd = t1.$sub(currentEnd, suffixCount);
    oldEnd = t2.$sub(oldEnd, suffixCount);
    t1 = J.getInterceptor$n(currentEnd);
    if (J.$eq(t1.$sub(currentEnd, currentStart), 0) && J.$eq(J.$sub$n(oldEnd, oldStart), 0))
      return C.List_empty;
    if (J.$eq(currentStart, currentEnd)) {
      removed = [];
      t1 = new P.UnmodifiableListView(removed);
      t1.$builtinTypeInfo = [null];
      splice = new G.ListChangeRecord(current, t1, removed, currentStart, 0);
      if (typeof oldEnd !== "number")
        return H.iae(oldEnd);
      t1 = J.getInterceptor$asx(old);
      for (; oldStart < oldEnd; oldStart = oldStart0) {
        oldStart0 = oldStart + 1;
        J.add$1$ax(splice._removed, t1.$index(old, oldStart));
      }
      return [splice];
    } else if (oldStart === oldEnd) {
      t1 = t1.$sub(currentEnd, currentStart);
      removed = [];
      t2 = new P.UnmodifiableListView(removed);
      t2.$builtinTypeInfo = [null];
      return [new G.ListChangeRecord(current, t2, removed, currentStart, t1)];
    }
    ops = G._spliceOperationsFromEditDistances(G._calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
    splices = [];
    splices.$builtinTypeInfo = [G.ListChangeRecord];
    for (t1 = J.getInterceptor$asx(old), oldIndex = oldStart, index = currentStart, splice = null, i = 0; i < ops.length; ++i)
      switch (ops[i]) {
        case 0:
          if (splice != null) {
            splices.push(splice);
            splice = null;
          }
          index = J.$add$ns(index, 1);
          ++oldIndex;
          break;
        case 1:
          if (splice == null) {
            removed = [];
            t2 = new P.UnmodifiableListView(removed);
            t2.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t2, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          index = J.$add$ns(index, 1);
          J.add$1$ax(splice._removed, t1.$index(old, oldIndex));
          ++oldIndex;
          break;
        case 2:
          if (splice == null) {
            removed = [];
            t2 = new P.UnmodifiableListView(removed);
            t2.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t2, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          index = J.$add$ns(index, 1);
          break;
        case 3:
          if (splice == null) {
            removed = [];
            t2 = new P.UnmodifiableListView(removed);
            t2.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t2, removed, index, 0);
          }
          J.add$1$ax(splice._removed, t1.$index(old, oldIndex));
          ++oldIndex;
          break;
      }
    if (splice != null)
      splices.push(splice);
    return splices;
  }, "call$6", "calcSplices$closure", 12, 0, null, 250, [], 251, [], 252, [], 253, [], 254, [], 255, []],
  _mergeSplice: [function(splices, record) {
    var t1, t2, t3, addedCount, t4, splice, inserted, insertionOffset, i, current, intersectCount, deleteCount, removed, offset;
    t1 = J.getInterceptor$x(record);
    t2 = t1.get$object(record);
    t1 = t1.get$index(record);
    t3 = J.toList$0$ax(record.get$_removed());
    addedCount = record.get$addedCount();
    if (addedCount == null)
      addedCount = 0;
    t4 = new P.UnmodifiableListView(t3);
    t4.$builtinTypeInfo = [null];
    splice = new G.ListChangeRecord(t2, t4, t3, t1, addedCount);
    for (inserted = false, insertionOffset = 0, i = 0; t1 = splices.length, i < t1; ++i) {
      if (i < 0)
        return H.ioore(splices, i);
      current = splices[i];
      current.set$_list_diff$_index(J.$add$ns(current.get$_list_diff$_index(), insertionOffset));
      if (inserted)
        continue;
      t1 = splice._list_diff$_index;
      t2 = J.$add$ns(t1, J.get$length$asx(splice._unmodifiableRemoved._collection$_source));
      t3 = J.getInterceptor$x(current);
      t4 = t3.get$index(current);
      intersectCount = P.min(t2, J.$add$ns(t3.get$index(current), current.get$addedCount())) - P.max(t1, t4);
      if (intersectCount >= 0) {
        C.JSArray_methods.removeAt$1(splices, i);
        --i;
        t1 = J.$sub$n(current.get$addedCount(), J.get$length$asx(current.get$removed()._collection$_source));
        if (typeof t1 !== "number")
          return H.iae(t1);
        insertionOffset -= t1;
        splice._addedCount = J.$add$ns(splice._addedCount, J.$sub$n(current.get$addedCount(), intersectCount));
        deleteCount = J.$sub$n(J.$add$ns(J.get$length$asx(splice._unmodifiableRemoved._collection$_source), J.get$length$asx(current.get$removed()._collection$_source)), intersectCount);
        if (J.$eq(splice._addedCount, 0) && J.$eq(deleteCount, 0))
          inserted = true;
        else {
          removed = current.get$_removed();
          if (J.$lt$n(splice._list_diff$_index, t3.get$index(current))) {
            t1 = splice._unmodifiableRemoved;
            t1 = t1.getRange$2(t1, 0, J.$sub$n(t3.get$index(current), splice._list_diff$_index));
            removed.toString;
            if (typeof removed !== "object" || removed === null || !!removed.fixed$length)
              H.throwExpression(P.UnsupportedError$("insertAll"));
            H.IterableMixinWorkaround_insertAllList(removed, 0, t1);
          }
          if (J.$gt$n(J.$add$ns(splice._list_diff$_index, J.get$length$asx(splice._unmodifiableRemoved._collection$_source)), J.$add$ns(t3.get$index(current), current.get$addedCount()))) {
            t1 = splice._unmodifiableRemoved;
            J.addAll$1$ax(removed, t1.getRange$2(t1, J.$sub$n(J.$add$ns(t3.get$index(current), current.get$addedCount()), splice._list_diff$_index), J.get$length$asx(splice._unmodifiableRemoved._collection$_source)));
          }
          splice._removed = removed;
          splice._unmodifiableRemoved = current.get$_unmodifiableRemoved();
          if (J.$lt$n(t3.get$index(current), splice._list_diff$_index))
            splice._list_diff$_index = t3.get$index(current);
          inserted = false;
        }
      } else if (J.$lt$n(splice._list_diff$_index, t3.get$index(current))) {
        C.JSArray_methods.insert$2(splices, i, splice);
        ++i;
        offset = J.$sub$n(splice._addedCount, J.get$length$asx(splice._unmodifiableRemoved._collection$_source));
        current.set$_list_diff$_index(J.$add$ns(current.get$_list_diff$_index(), offset));
        if (typeof offset !== "number")
          return H.iae(offset);
        insertionOffset += offset;
        inserted = true;
      } else
        inserted = false;
    }
    if (!inserted)
      splices.push(splice);
  }, "call$2", "_mergeSplice$closure", 4, 0, null, 260, [], 29, []],
  _createInitialSplices: [function(list, records) {
    var splices, t1;
    splices = H.setRuntimeTypeInfo([], [G.ListChangeRecord]);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(records, records.length, 0, null), [H.getTypeArgumentByIndex(records, 0)]); t1.moveNext$0();)
      G._mergeSplice(splices, t1._current);
    return splices;
  }, "call$2", "_createInitialSplices$closure", 4, 0, null, 75, [], 261, []],
  projectListSplices: [function(list, records) {
    var splices, t1, t2, splice, t3, t4;
    if (records.length === 1)
      return records;
    splices = [];
    for (t1 = G._createInitialSplices(list, records), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = list._list; t1.moveNext$0();) {
      splice = t1._current;
      if (J.$eq(splice.get$addedCount(), 1) && J.$eq(J.get$length$asx(splice.get$removed()._collection$_source), 1)) {
        t3 = J.elementAt$1$ax(splice.get$removed()._collection$_source, 0);
        t4 = J.get$index$x(splice);
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          return H.ioore(t2, t4);
        if (!J.$eq(t3, t2[t4]))
          splices.push(splice);
        continue;
      }
      t3 = J.getInterceptor$x(splice);
      C.JSArray_methods.addAll$1(splices, G.calcSplices(list, t3.get$index(splice), J.$add$ns(t3.get$index(splice), splice.get$addedCount()), splice.get$_removed(), 0, J.get$length$asx(splice.get$removed()._collection$_source)));
    }
    return splices;
  }, "call$2", "projectListSplices$closure", 4, 0, null, 75, [], 261, []],
  ListChangeRecord: {
    "^": "Object;object>,_unmodifiableRemoved<,_removed<,_list_diff$_index@,_addedCount",
    get$index: function(_) {
      return this._list_diff$_index;
    },
    get$removed: function() {
      return this._unmodifiableRemoved;
    },
    get$addedCount: function() {
      return this._addedCount;
    },
    indexChanged$1: function(key) {
      var t1 = this._list_diff$_index;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = key < t1;
      if (t1)
        return false;
      if (!J.$eq(this._addedCount, J.get$length$asx(this._unmodifiableRemoved._collection$_source)))
        return true;
      t1 = J.$add$ns(this._list_diff$_index, this._addedCount);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return key < t1;
    },
    toString$0: function(_) {
      return "#<ListChangeRecord index: " + H.S(this._list_diff$_index) + ", removed: " + H.S(this._unmodifiableRemoved) + ", addedCount: " + H.S(this._addedCount) + ">";
    },
    $isListChangeRecord: true,
    static: {ListChangeRecord_ListChangeRecord: function(object, index, addedCount, removed) {
        var t1;
        if (removed == null)
          removed = [];
        if (addedCount == null)
          addedCount = 0;
        t1 = new P.UnmodifiableListView(removed);
        t1.$builtinTypeInfo = [null];
        return new G.ListChangeRecord(object, t1, removed, index, addedCount);
      }}
  }
}],
["observe.src.metadata", "package:observe/src/metadata.dart", , K, {
  "^": "",
  ObservableProperty: {
    "^": "Object;"
  },
  Reflectable: {
    "^": "Object;"
  }
}],
["observe.src.observable", "package:observe/src/observable.dart", , F, {
  "^": "",
  notifyPropertyChangeHelper: [function(obj, field, oldValue, newValue) {
    var t1 = J.getInterceptor$x(obj);
    if (t1.get$hasObservers(obj) && !J.$eq(oldValue, newValue))
      t1.notifyChange$1(obj, H.setRuntimeTypeInfo(new T.PropertyChangeRecord(obj, field, oldValue, newValue), [null]));
    return newValue;
  }, "call$4", "notifyPropertyChangeHelper$closure", 8, 0, null, 100, [], 262, [], 239, [], 240, []],
  Observable: {
    "^": "Object;",
    $isObservable: true
  },
  Observable_deliverChanges_closure: {
    "^": "Closure:296;box_0,this_1",
    call$2: [function($name, oldValue) {
      var t1, newValue, t2, t3, records;
      t1 = this.this_1;
      newValue = t1._mirror.getField$1($name).get$reflectee();
      if (!J.$eq(oldValue, newValue)) {
        t2 = this.box_0;
        t3 = t2.records_0;
        if (t3 == null) {
          records = [];
          t2.records_0 = records;
          t2 = records;
        } else
          t2 = t3;
        t2.push(H.setRuntimeTypeInfo(new T.PropertyChangeRecord(t1, $name, oldValue, newValue), [null]));
        t1._observable$_values.$indexSet(0, $name, newValue);
      }
    }, "call$2", null, 4, 0, null, 12, [], 239, [], "call"],
    $isFunction: true
  }
}],
["observe.src.observable_box", "package:observe/src/observable_box.dart", , A, {
  "^": "",
  ObservableBox: {
    "^": "ChangeNotifier;_observable_box$_value,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$value: [function(_) {
      return this._observable_box$_value;
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "T_", ret: T};
      }, this.$receiver, "ObservableBox");
    }, "value", 304],
    set$value: [function(_, newValue) {
      this._observable_box$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._observable_box$_value, newValue);
    }, null, null, 3, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T0", void: true, args: [T]};
      }, this.$receiver, "ObservableBox");
    }, 240, [], "value", 304],
    toString$0: function(_) {
      return "#<" + H.S(new H.TypeImpl(H.getRuntimeTypeString(this), null)) + " value: " + H.S(this._observable_box$_value) + ">";
    }
  }
}],
["observe.src.observable_list", "package:observe/src/observable_list.dart", , Q, {
  "^": "",
  ObservableList: {
    "^": "ListBase_ChangeNotifier;_listRecords,_listChanges,_list,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$listChanges: function() {
      var t1 = this._listChanges;
      if (t1 == null) {
        t1 = P.StreamController_StreamController$broadcast(new Q.ObservableList_listChanges_closure(this), null, true, null);
        this._listChanges = t1;
      }
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: [function(_) {
      return this._list.length;
    }, null, null, 1, 0, 484, "length", 304],
    set$length: [function(_, value) {
      var t1, len, t2, t3, t4, removed;
      t1 = this._list;
      len = t1.length;
      if (len === value)
        return;
      this.notifyPropertyChange$3(this, C.Symbol_length, len, value);
      t2 = len === 0;
      t3 = J.getInterceptor(value);
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t2, t3.$eq(value, 0));
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t2, !t3.$eq(value, 0));
      t2 = this._listChanges;
      if (t2 != null) {
        t4 = t2._async$_next;
        t2 = t4 == null ? t2 != null : t4 !== t2;
      } else
        t2 = false;
      if (t2)
        if (t3.$lt(value, len)) {
          if (t3.$lt(value, 0) || t3.$gt(value, t1.length))
            H.throwExpression(P.RangeError$range(value, 0, t1.length));
          if (typeof value !== "number")
            return H.iae(value);
          if (len < value || len > t1.length)
            H.throwExpression(P.RangeError$range(len, value, t1.length));
          t2 = new H.SubListIterable(t1, value, len);
          t2.$builtinTypeInfo = [null];
          if (value < 0)
            H.throwExpression(new P.RangeError("value " + H.S(value)));
          if (len < 0)
            H.throwExpression(new P.RangeError("value " + len));
          if (value > len)
            H.throwExpression(P.RangeError$range(value, 0, len));
          t2 = t2.toList$0(0);
          t3 = new P.UnmodifiableListView(t2);
          t3.$builtinTypeInfo = [null];
          this._recordChange$1(new G.ListChangeRecord(this, t3, t2, value, 0));
        } else {
          t2 = t3.$sub(value, len);
          removed = [];
          t3 = new P.UnmodifiableListView(removed);
          t3.$builtinTypeInfo = [null];
          this._recordChange$1(new G.ListChangeRecord(this, t3, removed, len, t2));
        }
      C.JSArray_methods.set$length(t1, value);
    }, null, null, 3, 0, 359, 30, [], "length", 304],
    $index: [function(_, index) {
      var t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "E__int", ret: E, args: [J.JSInt]};
      }, this.$receiver, "ObservableList");
    }, 15, [], "[]", 304],
    $indexSet: [function(_, index, value) {
      var t1, oldValue, t2, t3;
      t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      oldValue = t1[index];
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2) {
        t2 = [oldValue];
        t3 = new P.UnmodifiableListView(t2);
        t3.$builtinTypeInfo = [null];
        this._recordChange$1(new G.ListChangeRecord(this, t3, t2, index, 1));
      }
      if (index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(E) {
        return {func: "void__int_E", void: true, args: [J.JSInt, E]};
      }, this.$receiver, "ObservableList");
    }, 15, [], 30, [], "[]=", 304],
    get$isEmpty: [function(_) {
      return P.ListMixin.prototype.get$isEmpty.call(this, this);
    }, null, null, 1, 0, 303, "isEmpty", 304],
    get$isNotEmpty: [function(_) {
      return P.ListMixin.prototype.get$isNotEmpty.call(this, this);
    }, null, null, 1, 0, 303, "isNotEmpty", 304],
    setAll$2: function(_, index, iterable) {
      var t1, len, t2;
      t1 = J.getInterceptor(iterable);
      if (!t1.$isList && !t1.$isSet)
        iterable = t1.toList$0(iterable);
      len = J.get$length$asx(iterable);
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (t1 && J.$gt$n(len, 0)) {
        t1 = this._list;
        H.IterableMixinWorkaround__rangeCheck(t1, index, len);
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, index, len, H.SubListIterable$(t1, index, len, null).toList$0(0)));
      }
      H.IterableMixinWorkaround_setAllList(this._list, index, iterable);
    },
    add$1: function(_, value) {
      var t1, len, t2, t3;
      t1 = this._list;
      len = t1.length;
      this._notifyChangeLength$2(len, len + 1);
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, len, 1, null));
      C.JSArray_methods.add$1(t1, value);
    },
    addAll$1: function(_, iterable) {
      var t1, len, added, t2;
      t1 = this._list;
      len = t1.length;
      C.JSArray_methods.addAll$1(t1, iterable);
      this._notifyChangeLength$2(len, t1.length);
      added = t1.length - len;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (t1 && added > 0)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, len, added, null));
    },
    remove$1: function(_, element) {
      var t1, i;
      for (t1 = this._list, i = 0; i < t1.length; ++i)
        if (J.$eq(t1[i], element)) {
          this.removeRange$2(0, i, i + 1);
          return true;
        }
      return false;
    },
    removeRange$2: function(_, start, end) {
      var t1, t2, rangeLength, t3, len, t4, t5;
      t1 = start >= 0;
      if (!t1 || start > this._list.length)
        H.throwExpression(P.RangeError$range(start, 0, this._list.length));
      t2 = !(end < start);
      if (!t2 || end > this._list.length)
        H.throwExpression(P.RangeError$range(end, start, this._list.length));
      rangeLength = end - start;
      t3 = this._list;
      len = t3.length;
      t4 = len - rangeLength;
      this.notifyPropertyChange$3(this, C.Symbol_length, len, t4);
      t5 = len === 0;
      t4 = t4 === 0;
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t5, t4);
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t5, !t4);
      t4 = this._listChanges;
      if (t4 != null) {
        t5 = t4._async$_next;
        t4 = t5 == null ? t4 != null : t5 !== t4;
      } else
        t4 = false;
      if (t4 && rangeLength > 0) {
        if (!t1 || start > t3.length)
          H.throwExpression(P.RangeError$range(start, 0, t3.length));
        if (!t2 || end > t3.length)
          H.throwExpression(P.RangeError$range(end, start, t3.length));
        t1 = new H.SubListIterable(t3, start, end);
        t1.$builtinTypeInfo = [null];
        if (start < 0)
          H.throwExpression(new P.RangeError("value " + start));
        if (end < 0)
          H.throwExpression(new P.RangeError("value " + H.S(end)));
        if (start > end)
          H.throwExpression(P.RangeError$range(start, 0, end));
        t1 = t1.toList$0(0);
        t2 = new P.UnmodifiableListView(t1);
        t2.$builtinTypeInfo = [null];
        this._recordChange$1(new G.ListChangeRecord(this, t2, t1, start, 0));
      }
      C.JSArray_methods.removeRange$2(t3, start, end);
    },
    insertAll$2: function(_, index, iterable) {
      var t1, insertionLength, len, t2;
      if (index < 0 || index > this._list.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._list.length));
      t1 = J.getInterceptor(iterable);
      if (!t1.$isList && !t1.$isSet)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = this._list;
      len = t1.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      C.JSArray_methods.set$length(t1, len + insertionLength);
      t2 = t1.length;
      H.IterableMixinWorkaround_setRangeList(t1, index + insertionLength, t2, this, index);
      H.IterableMixinWorkaround_setAllList(t1, index, iterable);
      this._notifyChangeLength$2(len, t1.length);
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (t1 && insertionLength > 0)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, index, insertionLength, null));
    },
    insert$2: function(_, index, element) {
      var t1, t2, t3;
      if (index > this._list.length)
        throw H.wrapException(P.RangeError$range(index, 0, this._list.length));
      t1 = this._list;
      t2 = t1.length;
      if (index === t2) {
        this.add$1(0, element);
        return;
      }
      C.JSArray_methods.set$length(t1, t2 + 1);
      t2 = t1.length;
      H.IterableMixinWorkaround_setRangeList(t1, index + 1, t2, this, index);
      t2 = t1.length;
      this._notifyChangeLength$2(t2 - 1, t2);
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, index, 1, null));
      if (index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = element;
    },
    _recordChange$1: function(record) {
      var t1, t2;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1)
        return;
      if (this._listRecords == null) {
        this._listRecords = [];
        P.scheduleMicrotask(this.get$deliverListChanges());
      }
      this._listRecords.push(record);
    },
    _notifyChangeLength$2: function(oldValue, newValue) {
      var t1, t2;
      this.notifyPropertyChange$3(this, C.Symbol_length, oldValue, newValue);
      t1 = oldValue === 0;
      t2 = J.getInterceptor(newValue);
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t1, t2.$eq(newValue, 0));
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t1, !t2.$eq(newValue, 0));
    },
    deliverListChanges$0: [function() {
      var t1, records, t2;
      t1 = this._listRecords;
      if (t1 == null)
        return false;
      records = G.projectListSplices(this, t1);
      this._listRecords = null;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t2 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t2 = false;
      if (t2) {
        t2 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(records), [G.ListChangeRecord]);
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
        return true;
      }
      return false;
    }, "call$0", "get$deliverListChanges", 0, 0, 303],
    $isObservableList: true,
    static: {ObservableList$: function($length, $E) {
        var t1 = H.setRuntimeTypeInfo([], [$E]);
        return H.setRuntimeTypeInfo(new Q.ObservableList(null, null, t1, null, null), [$E]);
      }}
  },
  ListBase_ChangeNotifier: {
    "^": "ListBase+ChangeNotifier;",
    $isObservable: true
  },
  ObservableList_listChanges_closure: {
    "^": "Closure:114;this_0",
    call$0: [function() {
      this.this_0._listChanges = null;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  }
}],
["observe.src.observable_map", "package:observe/src/observable_map.dart", , V, {
  "^": "",
  MapChangeRecord: {
    "^": "ChangeRecord;key>,oldValue>,newValue>,isInsert,isRemove",
    toString$0: function(_) {
      var kind;
      if (this.isInsert)
        kind = "insert";
      else
        kind = this.isRemove ? "remove" : "set";
      return "#<MapChangeRecord " + kind + " " + H.S(this.key) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isMapChangeRecord: true
  },
  ObservableMap: {
    "^": "ChangeNotifier;_observable_map$_map,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$keys: [function() {
      return this._observable_map$_map.get$keys();
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_", ret: [P.Iterable, K]};
      }, this.$receiver, "ObservableMap");
    }, "keys", 304],
    get$values: [function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$values(t1);
    }, null, null, 1, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "Iterable_0", ret: [P.Iterable, V]};
      }, this.$receiver, "ObservableMap");
    }, "values", 304],
    get$length: [function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1);
    }, null, null, 1, 0, 484, "length", 304],
    get$isEmpty: [function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1) === 0;
    }, null, null, 1, 0, 303, "isEmpty", 304],
    get$isNotEmpty: [function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1) !== 0;
    }, null, null, 1, 0, 303, "isNotEmpty", 304],
    containsValue$1: [function(value) {
      return this._observable_map$_map.containsValue$1(value);
    }, "call$1", "get$containsValue", 2, 0, 485, 30, [], "containsValue", 304],
    containsKey$1: [function(key) {
      return this._observable_map$_map.containsKey$1(key);
    }, "call$1", "get$containsKey", 2, 0, 485, 48, [], "containsKey", 304],
    $index: [function(_, key) {
      return this._observable_map$_map.$index(0, key);
    }, "call$1", "get$[]", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object", ret: V, args: [P.Object]};
      }, this.$receiver, "ObservableMap");
    }, 48, [], "[]", 304],
    $indexSet: [function(_, key, value) {
      var t1, len, oldValue, t2, t3;
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      oldValue = t1.$index(0, key);
      t1.$indexSet(0, key, value);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.get$length(t1);
        if (len !== t1) {
          F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1);
          this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, null, value, true, false), [null, null]));
        } else if (!J.$eq(oldValue, value))
          this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, oldValue, value, false, false), [null, null]));
      }
    }, "call$2", "get$[]=", 4, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "void__K_V", void: true, args: [K, V]};
      }, this.$receiver, "ObservableMap");
    }, 48, [], 30, [], "[]=", 304],
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new V.ObservableMap_addAll_closure(this));
    },
    remove$1: function(_, key) {
      var t1, len, result, t2, t3;
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      result = t1.remove$1(0, key);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len !== t1.get$length(t1)) {
        this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, result, null, false, true), [null, null]));
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1.get$length(t1));
      }
      return result;
    },
    clear$0: function(_) {
      var t1, len, t2, t3;
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len > 0) {
        t1.forEach$1(0, new V.ObservableMap_clear_closure(this));
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, 0);
      }
      t1.clear$0(0);
    },
    forEach$1: function(_, f) {
      return this._observable_map$_map.forEach$1(0, f);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isObservableMap: true,
    $isMap: true,
    static: {ObservableMap_ObservableMap$from: function(other, $K, $V) {
        var t1 = V.ObservableMap_ObservableMap$createFromType(other, $K, $V);
        t1.addAll$1(0, other);
        return t1;
      }, ObservableMap_ObservableMap$createFromType: function(other, $K, $V) {
        var t1, result;
        t1 = J.getInterceptor(other);
        if (!!t1.$isSplayTreeMap)
          result = H.setRuntimeTypeInfo(new V.ObservableMap(P.SplayTreeMap$(null, null, $K, $V), null, null), [$K, $V]);
        else
          result = !!t1.$isLinkedHashMap ? H.setRuntimeTypeInfo(new V.ObservableMap(P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V), null, null), [$K, $V]) : H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, $K, $V), null, null), [$K, $V]);
        return result;
      }}
  },
  ObservableMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V2", args: [K, V]};
      }, this.this_0, "ObservableMap");
    }
  },
  ObservableMap_clear_closure: {
    "^": "Closure:296;this_0",
    call$2: [function(key, value) {
      var t1 = this.this_0;
      t1.notifyChange$1(t1, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, value, null, false, true), [null, null]));
    }, "call$2", null, 4, 0, null, 48, [], 30, [], "call"],
    $isFunction: true
  }
}],
["observe.src.path_observer", "package:observe/src/path_observer.dart", , L, {
  "^": "",
  _changeRecordMatches: [function(record, key) {
    var t1 = J.getInterceptor(record);
    if (!!t1.$isPropertyChangeRecord)
      return J.$eq(record.name, key);
    if (!!t1.$isMapChangeRecord) {
      t1 = J.getInterceptor(key);
      if (!!t1.$isSymbol)
        key = t1.get$_name(key);
      return J.$eq(record.key, key);
    }
    return false;
  }, "call$2", "_changeRecordMatches$closure", 4, 0, null, 29, [], 48, []],
  _getObjectProperty: [function(object, property) {
    var mirror, type, t1, exception;
    if (object == null)
      return;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object)))
        return J.$index$asx(object, property);
    } else if (!!J.getInterceptor(property).$isSymbol) {
      mirror = H.reflect(object);
      type = H.reflectClassByMangledName(J.get$runtimeType$(mirror.get$reflectee())._typeName);
      try {
        if (L._maybeHasGetter(type, property)) {
          t1 = mirror.getField$1(property).get$reflectee();
          return t1;
        }
        if (L._hasMethod(type, C.Symbol_Qyo)) {
          t1 = J.$index$asx(object, J.get$_name$x(property));
          return t1;
        }
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          if (!L._hasMethod(type, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
    t1 = $.get$_logger();
    if (t1.isLoggable$1(C.Level_FINER_400))
      t1.finer$1("can't get " + H.S(property) + " in " + H.S(object));
    return;
  }, "call$2", "_getObjectProperty$closure", 4, 0, null, 6, [], 73, []],
  _setObjectProperty: [function(object, property, value) {
    var mirror, type, t1, exception;
    if (object == null)
      return false;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object))) {
        J.$indexSet$ax(object, property, value);
        return true;
      }
    } else if (!!J.getInterceptor(property).$isSymbol) {
      mirror = H.reflect(object);
      type = H.reflectClassByMangledName(J.get$runtimeType$(mirror.get$reflectee())._typeName);
      try {
        if (L._maybeHasSetter(type, property)) {
          mirror.setField$2(property, value);
          return true;
        }
        if (L._hasMethod(type, C.Symbol_sgp)) {
          J.$indexSet$ax(object, J.get$_name$x(property), value);
          return true;
        }
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          if (!L._hasMethod(type, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
    t1 = $.get$_logger();
    if (t1.isLoggable$1(C.Level_FINER_400))
      t1.finer$1("can't set " + H.S(property) + " in " + H.S(object));
    return false;
  }, "call$3", "_setObjectProperty$closure", 6, 0, null, 6, [], 73, [], 30, []],
  _maybeHasGetter: [function(type, $name) {
    var t1;
    for (; !J.$eq(type, $.get$objectType());) {
      t1 = type.get$declarations().__js_mirrors$_source;
      if (t1.containsKey$1($name))
        return true;
      if (t1.containsKey$1(C.Symbol_noSuchMethod))
        return true;
      type = L._safeSuperclass(type);
    }
    return false;
  }, "call$2", "_maybeHasGetter$closure", 4, 0, null, 11, [], 12, []],
  _maybeHasSetter: [function(type, $name) {
    var setterName, t1;
    setterName = new H.Symbol0(H.Symbol_validatePublicSymbol(H.S($name.get$_name($name)) + "="));
    for (; !J.$eq(type, $.get$objectType());) {
      t1 = type.get$declarations().__js_mirrors$_source;
      if (!!J.getInterceptor(t1.$index(0, $name)).$isVariableMirror)
        return true;
      if (t1.containsKey$1(setterName))
        return true;
      if (t1.containsKey$1(C.Symbol_noSuchMethod))
        return true;
      type = L._safeSuperclass(type);
    }
    return false;
  }, "call$2", "_maybeHasSetter$closure", 4, 0, null, 11, [], 12, []],
  _hasMethod: [function(type, $name) {
    var member;
    for (; !J.$eq(type, $.get$objectType());) {
      member = type.get$declarations().__js_mirrors$_source.$index(0, $name);
      if (!!J.getInterceptor(member).$isMethodMirror && member.get$isRegularMethod())
        return true;
      type = L._safeSuperclass(type);
    }
    return false;
  }, "call$2", "_hasMethod$closure", 4, 0, null, 11, [], 12, []],
  _safeSuperclass: [function(type) {
    var t1, exception;
    try {
      t1 = type.get$superclass();
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return $.get$objectType();
    }

  }, "call$1", "_safeSuperclass$closure", 2, 0, null, 11, []],
  _isPathValid: [function(s) {
    s = J.replaceAll$2$s(s, $.get$_spacesRegExp(), "");
    if (s === "")
      return true;
    if (0 >= s.length)
      return H.ioore(s, 0);
    if (s[0] === ".")
      return false;
    return $.get$_pathRegExp().hasMatch$1(s);
  }, "call$1", "_isPathValid$closure", 2, 0, null, 93, []],
  PathObserver: {
    "^": "ChangeNotifier;path>,_isValid,_segments,_values,_subs,_computeValue,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    _computeValue$1: function(arg0) {
      return this._computeValue.call$1(arg0);
    },
    get$object: function(_) {
      var t1 = this._values;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    get$value: [function(_) {
      var t1, t2;
      if (!this._isValid)
        return;
      t1 = this.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1)
        this._updateValues$0();
      return C.JSArray_methods.get$last(this._values);
    }, null, null, 1, 0, 114, "value", 304],
    set$value: [function(_, newValue) {
      var t1, len, t2, t3;
      t1 = this._segments;
      len = t1.length;
      if (len === 0)
        return;
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (!t2)
        this._updateValues$1$end(len - 1);
      t2 = this._values;
      t3 = len - 1;
      if (t3 < 0 || t3 >= t2.length)
        return H.ioore(t2, t3);
      t2 = t2[t3];
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      if (L._setObjectProperty(t2, t1[t3], newValue)) {
        t1 = this._values;
        if (len >= t1.length)
          return H.ioore(t1, len);
        t1[len] = newValue;
      }
    }, null, null, 3, 0, 486, 240, [], "value", 304],
    observed$0: [function(_) {
      O.ChangeNotifier.prototype.observed$0.call(this, this);
      this._updateValues$0();
      this._observePath$0();
    }, "call$0", "get$observed", 0, 0, 125],
    unobserved$0: [function(_) {
      var i, t1;
      for (i = 0; t1 = this._subs, i < t1.length; ++i) {
        t1 = t1[i];
        if (t1 != null) {
          t1.cancel$0();
          t1 = this._subs;
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = null;
        }
      }
      O.ChangeNotifier.prototype.unobserved$0.call(this, this);
    }, "call$0", "get$unobserved", 0, 0, 125],
    _updateValues$1$end: function(end) {
      var t1, last, t2, i, t3, newValue;
      if (end == null)
        end = this._segments.length;
      t1 = this._segments;
      last = t1.length - 1;
      if (typeof end !== "number")
        return H.iae(end);
      t2 = this._computeValue != null;
      i = 0;
      for (; i < end;) {
        t3 = this._values;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3 = t3[i];
        if (i >= t1.length)
          return H.ioore(t1, i);
        newValue = L._getObjectProperty(t3, t1[i]);
        if (i === last && t2)
          newValue = this._computeValue$1(newValue);
        t3 = this._values;
        ++i;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3[i] = newValue;
      }
    },
    _updateValues$0: function() {
      return this._updateValues$1$end(null);
    },
    _updateObservedValues$1$start: function(start) {
      var t1, last, t2, i, oldValue, newValue, t3, i0, t4;
      for (t1 = this._segments, last = t1.length - 1, t2 = this._computeValue != null, i = start, oldValue = null, newValue = null; i <= last; i = i0) {
        t3 = this._values;
        i0 = i + 1;
        t4 = t3.length;
        if (i0 >= t4)
          return H.ioore(t3, i0);
        oldValue = t3[i0];
        if (i >= t4)
          return H.ioore(t3, i);
        t3 = t3[i];
        if (i >= t1.length)
          return H.ioore(t1, i);
        newValue = L._getObjectProperty(t3, t1[i]);
        if (i === last && t2)
          newValue = this._computeValue$1(newValue);
        if (oldValue == null ? newValue == null : oldValue === newValue) {
          this._observePath$2(start, i);
          return;
        }
        t3 = this._values;
        if (i0 >= t3.length)
          return H.ioore(t3, i0);
        t3[i0] = newValue;
      }
      this._observePath$1(start);
      if (this.get$hasObservers(this) && !J.$eq(oldValue, newValue)) {
        t1 = new T.PropertyChangeRecord(this, C.Symbol_value, oldValue, newValue);
        t1.$builtinTypeInfo = [null];
        this.notifyChange$1(this, t1);
      }
    },
    _observePath$2: function(start, end) {
      var i, t1;
      if (end == null)
        end = this._segments.length;
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      for (; i < end; ++i) {
        t1 = this._subs;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        if (t1 != null)
          t1.cancel$0();
        this._observeIndex$1(i);
      }
    },
    _observePath$0: function() {
      return this._observePath$2(0, null);
    },
    _observePath$1: function(start) {
      return this._observePath$2(start, null);
    },
    _observeIndex$1: function(i) {
      var t1, object, segment, subscription, t2;
      t1 = this._values;
      if (i >= t1.length)
        return H.ioore(t1, i);
      object = t1[i];
      t1 = this._segments;
      if (i >= t1.length)
        return H.ioore(t1, i);
      segment = t1[i];
      if (typeof segment === "number" && Math.floor(segment) === segment) {
        if (!!J.getInterceptor(object).$isObservableList) {
          t1 = this._subs;
          subscription = object.get$listChanges()._createSubscription$1(false);
          t2 = subscription._zone;
          subscription._async$_onData = t2.registerUnaryCallback$1(new L.PathObserver__observeIndex_closure(this, i, segment));
          subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure(), t2);
          subscription._onDone = t2.registerCallback$1(P._nullDoneHandler$closure());
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = subscription;
        }
      } else {
        t1 = J.getInterceptor(object);
        if (!!t1.$isObservable) {
          t2 = this._subs;
          subscription = t1.get$changes(object)._createSubscription$1(false);
          t1 = subscription._zone;
          subscription._async$_onData = t1.registerUnaryCallback$1(new L.PathObserver__observeIndex_closure0(this, i, segment));
          subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure(), t1);
          subscription._onDone = t1.registerCallback$1(P._nullDoneHandler$closure());
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = subscription;
        }
      }
    },
    PathObserver$3$computeValue: function(object, path, computeValue) {
      var t1, t2, segment, index;
      if (this._isValid)
        for (t1 = J.trim$0$s(path).split("."), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._segments; t1.moveNext$0();) {
          segment = t1._current;
          if (J.$eq(segment, ""))
            continue;
          index = H.Primitives_parseInt(segment, 10, new L.PathObserver_closure());
          t2.push(index != null ? index : new H.Symbol0(H.Symbol_validatePublicSymbol(segment)));
        }
      t1 = this._segments;
      this._values = H.setRuntimeTypeInfo(Array(t1.length + 1), [P.Object]);
      if (t1.length === 0 && computeValue != null)
        object = computeValue.call$1(object);
      t2 = this._values;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = object;
      this._subs = H.setRuntimeTypeInfo(Array(t1.length), [P.StreamSubscription]);
    },
    $isPathObserver: true,
    static: {PathObserver$: function(object, path, computeValue) {
        var t1 = new L.PathObserver(path, L._isPathValid(path), H.setRuntimeTypeInfo([], [P.Object]), null, null, computeValue, null, null);
        t1.PathObserver$3$computeValue(object, path, computeValue);
        return t1;
      }}
  },
  PathObserver_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      return;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  PathObserver__observeIndex_closure: {
    "^": "Closure:487;this_0,i_1,segment_2",
    call$1: [function(records) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(records), t2 = this.segment_2; t1.moveNext$0();)
        if (t1.get$current().indexChanged$1(t2)) {
          this.this_0._updateObservedValues$1$start(this.i_1);
          return;
        }
    }, "call$1", null, 2, 0, null, 261, [], "call"],
    $isFunction: true
  },
  PathObserver__observeIndex_closure0: {
    "^": "Closure:488;this_3,i_4,segment_5",
    call$1: [function(records) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(records), t2 = this.segment_5; t1.moveNext$0();)
        if (L._changeRecordMatches(t1.get$current(), t2)) {
          this.this_3._updateObservedValues$1$start(this.i_4);
          return;
        }
    }, "call$1", null, 2, 0, null, 261, [], "call"],
    $isFunction: true
  },
  closure1: {
    "^": "Closure:114;",
    call$0: [function() {
      return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))(?:\\.(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))*$", false, true, false), null, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  }
}],
["observe.src.to_observable", "package:observe/src/to_observable.dart", , R, {
  "^": "",
  _toObservableDeep: [function(value) {
    var t1, result, t2;
    t1 = J.getInterceptor(value);
    if (!!t1.$isObservable)
      return value;
    if (!!t1.$isMap) {
      result = V.ObservableMap_ObservableMap$createFromType(value, null, null);
      t1.forEach$1(value, new R._toObservableDeep_closure(result));
      return result;
    }
    if (!!t1.$isIterable) {
      t1 = t1.map$1(value, R._toObservableDeep$closure());
      t2 = Q.ObservableList$(null, null);
      t2.addAll$1(0, t1);
      return t2;
    }
    return value;
  }, "call$1", "_toObservableDeep$closure", 2, 0, 115, 30, []],
  _toObservableDeep_closure: {
    "^": "Closure:296;result_0",
    call$2: [function(k, v) {
      this.result_0.$indexSet(0, R._toObservableDeep(k), R._toObservableDeep(v));
    }, "call$2", null, 4, 0, null, 372, [], 121, [], "call"],
    $isFunction: true
  }
}],
["polymer", "package:polymer/polymer.dart", , A, {
  "^": "",
  _preventFlashOfUnstyledContent: [function() {
    var style, head;
    style = document.createElement("style", null);
    J.set$text$x(style, ".polymer-veiled { opacity: 0; } \n.polymer-unveil{ -webkit-transition: opacity 0.3s; transition: opacity 0.3s; }\n");
    head = document.querySelector("head");
    head.insertBefore(style, head.firstChild);
    A._veilElements();
    $.get$Polymer__ready().future.then$1(new A._preventFlashOfUnstyledContent_closure());
  }, "call$0", "_preventFlashOfUnstyledContent$closure", 0, 0, null],
  _veilElements: [function() {
    var t1, selector, t2;
    for (t1 = $.get$Polymer_veiledElements(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, 1, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
      selector = t1._current;
      for (t2 = W._FrozenElementList$_wrap(document.querySelectorAll(selector), null), t2 = t2.get$iterator(t2); t2.moveNext$0();)
        J.add$1$ax(J.get$classes$x(t2._current), "polymer-veiled");
    }
  }, "call$0", "_veilElements$closure", 0, 0, null],
  _notifySuper: [function($name) {
    var waiting, t1;
    waiting = $.get$_waitSuper().remove$1(0, $name);
    if (waiting != null)
      for (t1 = J.get$iterator$ax(waiting); t1.moveNext$0();)
        J.registerWhenReady$0$x(t1.get$current());
  }, "call$1", "_notifySuper$closure", 2, 0, null, 12, []],
  _getPublishedProperties: [function(cls, props) {
    var t1, member, t2, t3;
    if (J.$eq(cls, $.get$_objectType()))
      return props;
    props = A._getPublishedProperties(cls.get$superclass(), props);
    for (t1 = cls.get$declarations().__js_mirrors$_source, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
      member = t1._current;
      if (member.get$isStatic() || member.get$isPrivate())
        continue;
      t2 = J.getInterceptor(member);
      if (!(!!t2.$isVariableMirror && !t2.get$isFinal(member)))
        t3 = !!t2.$isMethodMirror && member.get$isGetter();
      else
        t3 = true;
      if (t3)
        for (t3 = J.get$iterator$ax(member.get$metadata()); t3.moveNext$0();)
          if (!!J.getInterceptor(t3._current.get$reflectee()).$isPublishedProperty) {
            if (!t2.$isMethodMirror || A._hasSetter(cls, member)) {
              if (props == null)
                props = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
              props.$indexSet(0, member.get$simpleName(), member);
            }
            break;
          }
    }
    return props;
  }, "call$2", "_getPublishedProperties$closure", 4, 0, null, 263, [], 264, []],
  _getProperty: [function(cls, property) {
    var mirror, t1;
    do {
      mirror = cls.get$declarations().__js_mirrors$_source.$index(0, property);
      t1 = J.getInterceptor(mirror);
      if (!!t1.$isMethodMirror && mirror.get$isGetter() && A._hasSetter(cls, mirror) || !!t1.$isVariableMirror)
        return mirror;
      cls = cls.get$superclass();
    } while (!J.$eq(cls, $.get$_objectType()));
    return;
  }, "call$2", "_getProperty$closure", 4, 0, null, 263, [], 73, []],
  _hasSetter: [function(cls, getter) {
    var t1, mirror;
    t1 = H.Symbol_validatePublicSymbol(H.S(getter.get$simpleName()._name) + "=");
    mirror = cls.get$declarations().__js_mirrors$_source.$index(0, new H.Symbol0(t1));
    return !!J.getInterceptor(mirror).$isMethodMirror && mirror.get$isSetter();
  }, "call$2", "_hasSetter$closure", 4, 0, null, 263, [], 265, []],
  _shimShadowDomStyling: [function(template, $name, extendee) {
    var t1, platform, shadowCss;
    t1 = $.get$context();
    if (t1 == null || template == null)
      return;
    if (!t1.hasProperty$1("ShadowDOMPolyfill"))
      return;
    platform = J.$index$asx(t1, "Platform");
    if (platform == null)
      return;
    shadowCss = J.$index$asx(platform, "ShadowCSS");
    if (shadowCss == null)
      return;
    shadowCss.callMethod$2("shimStyling", [template, $name, extendee]);
  }, "call$3", "_shimShadowDomStyling$closure", 6, 0, null, 266, [], 12, [], 267, []],
  _cssTextFromSheet: [function(sheet) {
    var href, e, t, t1, resource, exception;
    if (sheet == null)
      return "";
    t1 = J.getInterceptor$x(sheet);
    href = t1.get$href(sheet);
    if (J.$eq(href, ""))
      href = t1.get$attributes(sheet)._element.getAttribute("href");
    t1 = $.get$context();
    if (t1 != null && t1.hasProperty$1("HTMLImports")) {
      if (typeof sheet === "number" || typeof sheet === "string" || typeof sheet === "boolean" || false)
        H.throwExpression(new P.ArgumentError("object cannot be a num, string, bool, or null"));
      resource = J.$index$asx(P._wrapToDart(P._convertToJS(sheet)), "__resource");
      if (resource != null)
        return resource;
      $.get$_sheetLog().fine$1("failed to get stylesheet text href=\"" + H.S(href) + "\"");
      return "";
    }
    try {
      t1 = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(t1, "GET", href, false);
      t1.send();
      t1 = t1.responseText;
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      if (!!J.getInterceptor(t1).$isDomException) {
        e = t1;
        t = new H._StackTrace(exception, null);
        $.get$_sheetLog().fine$1("failed to get stylesheet text href=\"" + H.S(href) + "\" error: " + H.S(e) + ", trace: " + H.S(t));
        return "";
      } else
        throw exception;
    }

  }, "call$1", "_cssTextFromSheet$closure", 2, 0, null, 268, []],
  Polymer_register: [function($name, type) {
    var waiting;
    if (type == null)
      type = C.Type_I2I;
    $.get$_typesByName().$indexSet(0, $name, type);
    waiting = $.get$_waitType().remove$1(0, $name);
    if (waiting != null)
      J.registerWhenReady$0$x(waiting);
  }, "call$2", "Polymer_register$closure", 2, 2, null, 84, 12, [], 11, []],
  Polymer__unbindNodeTree: [function(node) {
    A.Polymer__forNodeTree(node, new A.Polymer__unbindNodeTree_closure());
  }, "call$1", "Polymer__unbindNodeTree$closure", 2, 0, null, 269, []],
  Polymer__forNodeTree: [function(node, callback) {
    var child;
    if (node == null)
      return;
    callback.call$1(node);
    for (child = node.firstChild; child != null; child = child.nextSibling)
      A.Polymer__forNodeTree(child, callback);
  }, "call$2", "Polymer__forNodeTree$closure", 4, 0, null, 269, [], 164, []],
  Polymer_prepareBinding: [function(path, $name, node, originalPrepareBinding) {
    if (!J.startsWith$1$s($name, "on-"))
      return originalPrepareBinding.call$3(path, $name, node);
    return new A.Polymer_prepareBinding_closure(path, $name);
  }, "call$4", "Polymer_prepareBinding$closure", 8, 0, null, 270, [], 12, [], 269, [], 271, []],
  Polymer__findController: [function(node) {
    var t1;
    for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
      node = t1.get$parentNode(node);
    return $.get$_shadowHost().$index(0, node);
  }, "call$1", "Polymer__findController$closure", 2, 0, null, 269, []],
  Polymer__invokeMethod: [function(receiver, methodName, args) {
    var receiverMirror, method, t1;
    receiverMirror = H.reflect(receiver);
    method = A.Polymer__findMethod(H.reflectClassByMangledName(J.get$runtimeType$(receiverMirror.reflectee)._typeName), methodName);
    if (method != null) {
      t1 = method.get$parameters();
      t1 = t1.where$1(t1, new A.Polymer__invokeMethod_closure());
      C.JSArray_methods.set$length(args, t1.get$length(t1));
    }
    return receiverMirror.invoke$2(methodName, args).reflectee;
  }, "call$3", "Polymer__invokeMethod$closure", 6, 0, null, 47, [], 272, [], 19, []],
  Polymer__findMethod: [function(type, $name) {
    var member;
    do {
      member = type.get$declarations().__js_mirrors$_source.$index(0, $name);
      if (!!J.getInterceptor(member).$isMethodMirror)
        return member;
      type = type.get$superclass();
    } while (type != null);
  }, "call$2", "Polymer__findMethod$closure", 4, 0, null, 11, [], 12, []],
  Polymer_applyStyleToScope: [function(style, scope) {
    var clone, attr;
    if (style == null)
      return;
    clone = document.createElement("style", null);
    J.set$text$x(clone, J.get$text$x(style));
    attr = style.getAttribute("element");
    if (attr != null)
      clone.setAttribute("element", attr);
    scope.appendChild(clone);
  }, "call$2", "Polymer_applyStyleToScope$closure", 4, 0, null, 273, [], 274, []],
  Polymer_unveilElements: [function() {
    var t1 = window;
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new A.Polymer_unveilElements_closure()));
  }, "call$0", "Polymer_unveilElements$closure", 0, 0, null],
  _inferPropertyType: [function(value, property) {
    var t1, type, t;
    t1 = J.getInterceptor(property);
    type = !!t1.$isVariableMirror ? t1.get$type(property) : H.interceptedTypeCast(property, "$isMethodMirror").get$returnType();
    t1 = J.getInterceptor$x(type);
    if (J.$eq(t1.get$qualifiedName(type), C.Symbol_46c) || J.$eq(t1.get$qualifiedName(type), C.Symbol_dynamic))
      if (value != null) {
        t = A._getCoreType(value);
        if (t != null)
          return P.reflectClass(t);
        return H.reflectClassByMangledName(J.get$runtimeType$(H.reflect(value).reflectee)._typeName);
      }
    return type;
  }, "call$2", "_inferPropertyType$closure", 4, 0, null, 30, [], 73, []],
  _getCoreType: [function(value) {
    if (value == null)
      return C.Type_eZO;
    if (typeof value === "number" && Math.floor(value) === value)
      return C.Type_SnA;
    if (typeof value === "number")
      return C.Type_qq1;
    if (typeof value === "boolean")
      return C.Type_EsU;
    if (typeof value === "string")
      return C.Type_Ejg;
    if (!!J.getInterceptor(value).$isDateTime)
      return C.Type_dVs;
    return;
  }, "call$1", "_getCoreType$closure", 2, 0, null, 30, []],
  initPolymer: [function() {
    if ($._useDirtyChecking) {
      var t1 = $.Zone__current.fork$1$specification(O.dirtyCheckZoneSpec());
      t1.run$1(A._initPolymerOptimized$closure());
      return t1;
    }
    A._initPolymerOptimized();
    return $.Zone__current;
  }, "call$0", "initPolymer$closure", 0, 0, null],
  _initPolymerOptimized: [function() {
    var t1 = document;
    W._registerCustomElement(window, t1, "polymer-element", C.Type_YnA, null);
    A._loadLibraries();
    A._preventFlashOfUnstyledContent();
    $.get$customElementsReady().then$1(new A._initPolymerOptimized_closure());
  }, "call$0", "_initPolymerOptimized$closure", 0, 0, 125],
  _loadLibraries: [function() {
    var lib, e, s, t1, exception, t2, t3;
    for (t1 = $.get$_librariesToLoad(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
      lib = t1._current;
      try {
        A._loadLibrary(lib);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        t2 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        t2.$builtinTypeInfo = [null];
        new P._AsyncCompleter(t2).$builtinTypeInfo = [null];
        t3 = e;
        if (t3 == null)
          H.throwExpression(new P.ArgumentError("Error must not be null"));
        if (t2._state !== 0)
          H.throwExpression(new P.StateError("Future already completed"));
        t2._asyncCompleteError$2(t3, s);
      }

    }
  }, "call$0", "_loadLibraries$closure", 0, 0, null],
  _discoverScripts: [function(doc, baseUri, seen, scripts) {
    var line, t1, scriptSeen, node, t2, url;
    if (seen == null)
      seen = P.LinkedHashSet_LinkedHashSet(null, null, null, W.Document);
    if (scripts == null) {
      scripts = [];
      scripts.$builtinTypeInfo = [J.JSString];
    }
    if (doc == null) {
      line = "warning: " + H.S(baseUri) + " not found.";
      t1 = $.printToZone;
      if (t1 == null)
        H.printString(line);
      else
        t1.call$1(line);
      return scripts;
    }
    if (seen.contains$1(0, doc))
      return scripts;
    seen.add$1(seen, doc);
    for (t1 = W._FrozenElementList$_wrap(doc.querySelectorAll("script,link[rel=\"import\"]"), null), t1 = t1.get$iterator(t1), scriptSeen = false; t1.moveNext$0();) {
      node = t1._current;
      t2 = J.getInterceptor(node);
      if (!!t2.$isLinkElement)
        A._discoverScripts(node.import, node.href, seen, scripts);
      else if (!!t2.$isScriptElement && node.type === "application/dart")
        if (!scriptSeen) {
          url = t2.get$src(node);
          scripts.push(url === "" ? baseUri : url);
          scriptSeen = true;
        } else {
          line = "warning: more than one Dart script tag in " + H.S(baseUri) + ". Dartium currently only allows a single Dart script tag per document.";
          t2 = $.printToZone;
          if (t2 == null)
            H.printString(line);
          else
            t2.call$1(line);
        }
    }
    return scripts;
  }, "call$4", "_discoverScripts$closure", 4, 4, null, 84, 84, 275, [], 276, [], 277, [], 278, []],
  _loadLibrary: [function(uriString) {
    var t1, t2, targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, t3, t4, uri, lib, uriPath, canonicalLib, c, meta, t5, waiting;
    t1 = $.get$_rootUri();
    t1.toString;
    t2 = P.Uri_parse(uriString);
    targetScheme = t2.scheme;
    if (targetScheme !== "") {
      targetUserInfo = t2.userInfo;
      targetHost = t2.get$host(t2);
      targetPort = t2.get$port(t2);
      targetPath = t1._removeDotSegments$1(t2._path);
      targetQuery = t2.query;
    } else {
      if (t2.get$host(t2) !== "") {
        targetUserInfo = t2.userInfo;
        targetHost = t2.get$host(t2);
        targetPort = t2.get$port(t2);
        targetPath = t1._removeDotSegments$1(t2._path);
        targetQuery = t2.query;
      } else {
        t3 = t2._path;
        if (t3 === "") {
          targetPath = t1._path;
          targetQuery = t2.query;
          targetQuery = targetQuery !== "" ? targetQuery : t1.query;
        } else {
          t3 = J.startsWith$1$s(t3, "/");
          t4 = t2._path;
          targetPath = t3 ? t1._removeDotSegments$1(t4) : t1._removeDotSegments$1(t1._merge$2(t1._path, t4));
          targetQuery = t2.query;
        }
        targetUserInfo = t1.userInfo;
        targetHost = t1.get$host(t1);
        targetPort = t1.get$port(t1);
      }
      targetScheme = t1.scheme;
    }
    uri = P.Uri$(t2.fragment, targetHost, targetPath, null, targetPort, targetQuery, null, targetScheme, targetUserInfo);
    t2 = $.get$_libs().__js_mirrors$_source;
    lib = t2.$index(0, uri);
    uriPath = uri._path;
    if (uri.scheme === t1.scheme)
      if (uri.get$authority() === t1.get$authority())
        if (J.getInterceptor$s(uriPath).endsWith$1(uriPath, ".dart"))
          t1 = C.JSString_methods.contains$1(uriPath, "/packages/") || C.JSString_methods.startsWith$1(uriPath, "packages/");
        else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1) {
      t1 = uri._path;
      canonicalLib = t2.$index(0, P.Uri_parse("package:" + C.JSString_methods.substring$1(t1, J.getInterceptor$asx(t1).lastIndexOf$1(t1, "packages/") + 9)));
      if (canonicalLib != null)
        lib = canonicalLib;
    }
    if (lib == null) {
      $.get$_loaderLog().info$1(H.S(uri) + " library not found");
      return;
    }
    t1 = lib.get$declarations().__js_mirrors$_source;
    t1 = t1.get$values(t1);
    t2 = new A._loadLibrary_closure();
    t3 = new H.WhereIterable(t1, t2);
    t3.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "IterableBase", 0)];
    t1 = t1.get$iterator(t1);
    t2 = new H.WhereIterator(t1, t2);
    t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
    for (; t2.moveNext$0();)
      A._maybeInvoke(lib, t1.get$current());
    t1 = lib.get$declarations().__js_mirrors$_source;
    t1 = t1.get$values(t1);
    t2 = new A._loadLibrary_closure0();
    t3 = new H.WhereIterable(t1, t2);
    t3.$builtinTypeInfo = [H.getRuntimeTypeArgument(t1, "IterableBase", 0)];
    t1 = t1.get$iterator(t1);
    t2 = new H.WhereIterator(t1, t2);
    t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
    for (; t2.moveNext$0();) {
      c = t1.get$current();
      for (t3 = J.get$iterator$ax(c.get$metadata()); t3.moveNext$0();) {
        meta = t3._current.get$reflectee();
        if (!!J.getInterceptor(meta).$isCustomTag) {
          t4 = meta.tagName;
          t5 = c.get$reflectedType();
          $.get$_typesByName().$indexSet(0, t4, t5);
          waiting = $.get$_waitType().remove$1(0, t4);
          if (waiting != null)
            J.registerWhenReady$0$x(waiting);
        }
      }
    }
  }, "call$1", "_loadLibrary$closure", 2, 0, null, 279, []],
  _maybeInvoke: [function(obj, method) {
    var t1, annotationFound, line;
    for (t1 = J.get$iterator$ax(method.get$metadata()); annotationFound = false, t1.moveNext$0();)
      if (t1._current.get$reflectee() === C.C__InitMethodAnnotation) {
        annotationFound = true;
        break;
      }
    if (!annotationFound)
      return;
    if (!method.get$isStatic()) {
      line = "warning: methods marked with @initMethod should be static, " + H.S(method.get$simpleName()) + " is not.";
      t1 = $.printToZone;
      if (t1 == null)
        H.printString(line);
      else
        t1.call$1(line);
      return;
    }
    t1 = method.get$parameters();
    t1 = t1.where$1(t1, new A._maybeInvoke_closure());
    if (t1.get$iterator(t1).moveNext$0()) {
      line = "warning: methods marked with @initMethod should take no arguments, " + H.S(method.get$simpleName()) + " expects some.";
      t1 = $.printToZone;
      if (t1 == null)
        H.printString(line);
      else
        t1.call$1(line);
      return;
    }
    obj.invoke$2(method.get$simpleName(), C.List_empty);
  }, "call$2", "_maybeInvoke$closure", 4, 0, null, 100, [], 229, []],
  _preventFlashOfUnstyledContent_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      A.Polymer_unveilElements();
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration: {
    "^": "HtmlElement;_type,_supertype,_super,_polymer$_name,_polymer$_publish=,_publishLC=,_polymer$_observe=,_instanceAttributes=,_sheets,_styles,_eventDelegates=,_templateDelegates",
    get$type: function(receiver) {
      return receiver._type;
    },
    get$superDeclaration: function(receiver) {
      return receiver._super;
    },
    get$name: function(receiver) {
      return receiver._polymer$_name;
    },
    get$templateContent: function(receiver) {
      var template, t1;
      template = receiver.querySelector("template");
      if (template != null)
        t1 = J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template));
      else
        t1 = null;
      return t1;
    },
    registerWhenReady$0: function(receiver) {
      var extendee, t1, t2, cls, registered;
      if (this.waitingForType$1(receiver, receiver._polymer$_name))
        return;
      extendee = receiver.getAttribute("extends");
      if (this.waitingForExtendee$1(receiver, extendee))
        return;
      t1 = receiver._polymer$_name;
      t2 = $.get$_typesByName();
      receiver._type = t2.$index(0, t1);
      t2 = t2.$index(0, extendee);
      receiver._supertype = t2;
      if (t2 != null)
        receiver._super = $.get$_declarations().$index(0, extendee);
      cls = P.reflectClass(receiver._type);
      this.publishAttributes$2(receiver, cls, receiver._super);
      t2 = receiver._polymer$_publish;
      if (t2 != null)
        receiver._publishLC = this._lowerCaseMap$1(receiver, t2);
      this.inferObservers$1(receiver, cls);
      $.get$_declarations().$indexSet(0, t1, receiver);
      this.accumulateInstanceAttributes$0(receiver);
      this.addAttributeDelegates$1(receiver, receiver._eventDelegates);
      this.cacheSheets$0(receiver);
      this.cacheStyles$0(receiver);
      this.installLocalSheets$0(receiver);
      A.Polymer_applyStyleToScope(this.cssTextToScopeStyle$2(receiver, this.cssTextForScope$1(receiver, "global"), "global"), document.head);
      A._shimShadowDomStyling(this.get$templateContent(receiver), t1, extendee);
      cls = P.reflectClass(receiver._type);
      registered = cls.get$declarations().__js_mirrors$_source.$index(0, C.Symbol_registerCallback);
      if (registered != null && !!J.getInterceptor(registered).$isMethodMirror && registered.get$isStatic() && registered.get$isRegularMethod())
        cls.invoke$2(C.Symbol_registerCallback, [receiver]);
      this.registerType$1(receiver, t1);
      A._notifySuper(receiver._polymer$_name);
    },
    waitingForType$1: function(receiver, $name) {
      if ($.get$_typesByName().$index(0, $name) != null)
        return false;
      $.get$_waitType().$indexSet(0, $name, receiver);
      if (receiver.hasAttribute("noscript") === true)
        A.Polymer_register($name, null);
      return true;
    },
    waitingForExtendee$1: function(receiver, extendee) {
      if (extendee != null && C.JSString_methods.indexOf$1(extendee, "-") >= 0)
        if (!$.get$_declarations().containsKey$1(extendee)) {
          J.add$1$ax($.get$_waitSuper().putIfAbsent$2(extendee, new A.PolymerDeclaration_waitingForExtendee_closure()), receiver);
          return true;
        }
      return false;
    },
    registerType$1: function(receiver, $name) {
      var decl, baseTag, t1, t2;
      for (decl = receiver, baseTag = null; decl != null;) {
        t1 = J.getInterceptor$x(decl);
        baseTag = t1.get$attributes(decl)._element.getAttribute("extends");
        decl = t1.get$superDeclaration(decl);
      }
      t1 = document;
      t2 = receiver._type;
      W._registerCustomElement(window, t1, $name, t2, baseTag);
    },
    publishAttributes$2: function(receiver, cls, superDecl) {
      var t1, t2, attrs, attr, property, mirror;
      if (superDecl != null && J.get$_polymer$_publish$x(superDecl) != null) {
        t1 = J.get$_polymer$_publish$x(superDecl);
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t2.addAll$1(0, t1);
        receiver._polymer$_publish = t2;
      }
      receiver._polymer$_publish = A._getPublishedProperties(cls, receiver._polymer$_publish);
      attrs = receiver.getAttribute("attributes");
      if (attrs != null) {
        t1 = attrs.split(C.JSString_methods.contains$1(attrs, ",") ? "," : " ");
        t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
        for (; t1.moveNext$0();) {
          attr = J.trim$0$s(t1._current);
          if (attr !== "") {
            t2 = receiver._polymer$_publish;
            t2 = t2 != null && t2.containsKey$1(attr);
          } else
            t2 = false;
          if (t2)
            continue;
          property = new H.Symbol0(H.Symbol_validatePublicSymbol(attr));
          mirror = A._getProperty(cls, property);
          if (mirror == null) {
            window;
            t2 = "property for attribute " + attr + " of polymer-element name=" + H.S(receiver._polymer$_name) + " not found.";
            if (typeof console != "undefined")
              console.warn(t2);
            continue;
          }
          t2 = receiver._polymer$_publish;
          if (t2 == null) {
            t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
            receiver._polymer$_publish = t2;
          }
          t2.$indexSet(0, property, mirror);
        }
      }
    },
    accumulateInstanceAttributes$0: function(receiver) {
      var t1, t2;
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
      receiver._instanceAttributes = t1;
      t2 = receiver._super;
      if (t2 != null)
        t1.addAll$1(0, J.get$_instanceAttributes$x(t2));
      new W._ElementAttributeMap(receiver).forEach$1(0, new A.PolymerDeclaration_accumulateInstanceAttributes_closure(receiver));
    },
    addAttributeDelegates$1: function(receiver, delegates) {
      new W._ElementAttributeMap(receiver).forEach$1(0, new A.PolymerDeclaration_addAttributeDelegates_closure(delegates));
    },
    cacheSheets$0: function(receiver) {
      var t1 = this.findNodes$1(receiver, "[rel=stylesheet]");
      receiver._sheets = t1;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    },
    cacheStyles$0: function(receiver) {
      var t1 = this.findNodes$1(receiver, "style[polymer-scope]");
      receiver._styles = t1;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    },
    installLocalSheets$0: function(receiver) {
      var t1, sheets, $content, cssText, t2, str, t3;
      t1 = receiver._sheets;
      t1.toString;
      sheets = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new A.PolymerDeclaration_installLocalSheets_closure()), [null]);
      $content = this.get$templateContent(receiver);
      if ($content != null) {
        cssText = P.StringBuffer$("");
        for (t1 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(sheets._iterable), sheets._f), [H.getTypeArgumentByIndex(sheets, 0)]), t2 = t1._iterator; t1.moveNext$0();) {
          str = A._cssTextFromSheet(t2.get$current());
          str = typeof str === "string" ? str : H.S(str);
          t3 = cssText._contents + str;
          cssText._contents = t3;
          cssText._contents = t3 + "\n";
        }
        if (cssText._contents.length > 0) {
          t1 = document.createElement("style", null);
          J.set$text$x(t1, H.S(cssText));
          t2 = J.getInterceptor$x($content);
          t2.insertBefore$2($content, t1, t2.get$firstChild($content));
        }
      }
    },
    findNodes$2: function(receiver, selector, matcher) {
      var t1, nodes, $content;
      t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll(selector), null);
      nodes = t1.toList$0(t1);
      $content = this.get$templateContent(receiver);
      if ($content != null)
        C.JSArray_methods.addAll$1(nodes, J.queryAll$1$x($content, selector));
      return nodes;
    },
    findNodes$1: function($receiver, selector) {
      return this.findNodes$2($receiver, selector, null);
    },
    cssTextForScope$1: function(receiver, scopeDescriptor) {
      var cssText, t1, t2, t3, str, t4;
      cssText = P.StringBuffer$("");
      t1 = new A.PolymerDeclaration_cssTextForScope_matcher("[polymer-scope=" + scopeDescriptor + "]");
      for (t2 = receiver._sheets, t2.toString, t2 = H.setRuntimeTypeInfo(new H.WhereIterable(t2, t1), [null]), t2 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0)]), t3 = t2._iterator; t2.moveNext$0();) {
        str = A._cssTextFromSheet(t3.get$current());
        str = typeof str === "string" ? str : H.S(str);
        t4 = cssText._contents + str;
        cssText._contents = t4;
        cssText._contents = t4 + "\n\n";
      }
      for (t2 = receiver._styles, t2.toString, t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t2, t1), [null]), t1 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0)]), t2 = t1._iterator; t1.moveNext$0();) {
        t3 = t2.get$current().get$textContent();
        t3 = cssText._contents + t3;
        cssText._contents = t3;
        cssText._contents = t3 + "\n\n";
      }
      return cssText._contents;
    },
    cssTextToScopeStyle$2: function(receiver, cssText, scopeDescriptor) {
      var t1;
      if (cssText === "")
        return;
      t1 = document.createElement("style", null);
      J.set$text$x(t1, cssText);
      t1.setAttribute("element", H.S(receiver._polymer$_name) + "-" + scopeDescriptor);
      return t1;
    },
    inferObservers$1: function(receiver, cls) {
      var t1, method, $name, t2;
      if (J.$eq(cls, $.get$_objectType()))
        return;
      this.inferObservers$1(receiver, cls.get$superclass());
      for (t1 = cls.get$declarations().__js_mirrors$_source, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
        method = t1._current;
        if (!J.getInterceptor(method).$isMethodMirror || method.get$isStatic() || !method.get$isRegularMethod())
          continue;
        $name = method.get$simpleName()._name;
        t2 = J.getInterceptor$s($name);
        if (t2.endsWith$1($name, "Changed") && !t2.$eq($name, "attributeChanged")) {
          if (receiver._polymer$_observe == null)
            receiver._polymer$_observe = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          $name = t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 7));
          receiver._polymer$_observe.$indexSet(0, new H.Symbol0(H.Symbol_validatePublicSymbol($name)), method.get$simpleName());
        }
      }
    },
    _lowerCaseMap$1: function(receiver, properties) {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, null);
      properties.forEach$1(0, new A.PolymerDeclaration__lowerCaseMap_closure(map));
      return map;
    },
    PolymerDeclaration$created$0: function(receiver) {
      receiver._polymer$_name = receiver.getAttribute("name");
      this.registerWhenReady$0(receiver);
    },
    $isPolymerDeclaration: true,
    static: {"^": "PolymerDeclaration__TAG", PolymerDeclaration$created: function(receiver) {
        receiver._eventDelegates = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        C.PolymerDeclaration_methods.Element$created$0(receiver);
        C.PolymerDeclaration_methods.PolymerDeclaration$created$0(receiver);
        return receiver;
      }}
  },
  PolymerDeclaration_waitingForExtendee_closure: {
    "^": "Closure:114;",
    call$0: [function() {
      return [];
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  PolymerDeclaration_accumulateInstanceAttributes_closure: {
    "^": "Closure:296;this_0",
    call$2: [function($name, value) {
      if (C.Map_c94aj.containsKey$1($name) !== true && !J.startsWith$1$s($name, "on-"))
        this.this_0._instanceAttributes.$indexSet(0, $name, value);
    }, "call$2", null, 4, 0, null, 12, [], 30, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_addAttributeDelegates_closure: {
    "^": "Closure:296;delegates_0",
    call$2: [function($name, value) {
      var t1, start, end;
      t1 = J.getInterceptor$s($name);
      if (t1.startsWith$1($name, "on-")) {
        start = J.getInterceptor$asx(value).indexOf$1(value, "{{");
        end = C.JSString_methods.lastIndexOf$1(value, "}}");
        if (start >= 0 && end >= 0)
          this.delegates_0.$indexSet(0, t1.substring$1($name, 3), C.JSString_methods.trim$0(C.JSString_methods.substring$2(value, start + 2, end)));
      }
    }, "call$2", null, 4, 0, null, 12, [], 30, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_installLocalSheets_closure: {
    "^": "Closure:115;",
    call$1: [function(s) {
      return J.get$attributes$x(s)._element.hasAttribute("polymer-scope") !== true;
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration_cssTextForScope_matcher: {
    "^": "Closure:115;selector_0",
    call$1: [function(s) {
      return J.matches$1$x(s, this.selector_0);
    }, "call$1", null, 2, 0, null, 93, [], "call"],
    $isFunction: true
  },
  PolymerDeclaration__lowerCaseMap_closure: {
    "^": "Closure:296;map_0",
    call$2: [function($name, value) {
      this.map_0.$indexSet(0, J.toLowerCase$0$s(J.get$_name$x($name)), value);
    }, "call$2", null, 4, 0, null, 12, [], 30, [], "call"],
    $isFunction: true
  },
  closure20: {
    "^": "Closure:114;",
    call$0: [function() {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSString);
      C.Map_484CA.forEach$1(0, new A._closure7(map));
      return map;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _closure7: {
    "^": "Closure:296;map_0",
    call$2: [function(onName, eventType) {
      this.map_0.$indexSet(0, eventType, onName);
    }, "call$2", null, 4, 0, null, 489, [], 490, [], "call"],
    $isFunction: true
  },
  PublishedProperty: {
    "^": "ObservableProperty;",
    $isPublishedProperty: true
  },
  Polymer: {
    "^": ["Object;$$:polymer$Polymer$$=-302", function() {
      return [C.C_Reflectable];
    }],
    polymerCreated$0: function(receiver) {
      var t1;
      if (W._convertNativeToDart_Window(this.get$ownerDocument(receiver).defaultView) == null)
        t1 = $.Polymer__preparingElements > 0;
      else
        t1 = true;
      if (t1)
        this.prepareElement$0(receiver);
    },
    prepareElement$0: function(receiver) {
      var isAttr, t1;
      isAttr = this.get$attributes(receiver)._element.getAttribute("is");
      t1 = isAttr == null || isAttr === "" ? this.get$localName(receiver) : isAttr;
      receiver.polymer$Polymer$_declaration = $.get$_declarations().$index(0, t1);
      this.observeProperties$0(receiver);
      this.copyInstanceAttributes$0(receiver);
      this.takeAttributes$0(receiver);
      this.addHostListeners$0(receiver);
      $.Polymer__preparingElements = $.Polymer__preparingElements + 1;
      this.parseDeclarations$1(receiver, receiver.polymer$Polymer$_declaration);
      $.Polymer__preparingElements = $.Polymer__preparingElements - 1;
    },
    enteredView$0: function(receiver) {
      if (receiver.polymer$Polymer$_declaration == null)
        this.prepareElement$0(receiver);
      this.cancelUnbindAll$1$preventCascade(receiver, true);
    },
    leftView$0: function(receiver) {
      this.asyncUnbindAll$0(receiver);
    },
    parseDeclarations$1: function(receiver, declaration) {
      if (declaration != null) {
        this.parseDeclarations$1(receiver, J.get$superDeclaration$x(declaration));
        this.parseDeclaration$1(receiver, declaration);
      }
    },
    parseDeclaration$1: function(receiver, elementElement) {
      var t1, template, root, $name;
      t1 = J.getInterceptor$x(elementElement);
      template = t1.query$1(elementElement, "template");
      if (template != null)
        if (J.get$attributes$x(receiver.polymer$Polymer$_declaration)._element.hasAttribute("lightdom") === true) {
          this.lightFromTemplate$1(receiver, template);
          root = null;
        } else
          root = this.shadowFromTemplate$1(receiver, template);
      else
        root = null;
      if (!J.getInterceptor(root).$isShadowRoot)
        return;
      $name = t1.get$attributes(elementElement)._element.getAttribute("name");
      if ($name == null)
        return;
      receiver.polymer$Polymer$_shadowRoots.$indexSet(0, $name, root);
    },
    lightFromTemplate$1: function(receiver, template) {
      var t1, dom;
      if (template == null)
        return;
      t1 = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
      dom = t1.createInstance$2(receiver, receiver.polymer$Polymer$syntax);
      this.append$1(receiver, dom);
      this.marshalNodeReferences$1(receiver, receiver);
      return dom;
    },
    shadowFromTemplate$1: function(receiver, template) {
      var root, t1;
      if (template == null)
        return;
      this.get$shadowRoot(receiver);
      root = this.createShadowRoot$0(receiver);
      $.get$_shadowHost().$indexSet(0, root, receiver);
      root.applyAuthorStyles = false;
      root.resetStyleInheritance = false;
      t1 = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
      root.appendChild(t1.createInstance$2(receiver, receiver.polymer$Polymer$syntax));
      this.marshalNodeReferences$1(receiver, root);
      return root;
    },
    marshalNodeReferences$1: function(receiver, root) {
      var t1, t2, t3, n;
      for (t1 = J.queryAll$1$x(root, "[id]"), t1 = t1.get$iterator(t1), t2 = receiver.polymer$Polymer$$, t3 = J.getInterceptor$ax(t2); t1.moveNext$0();) {
        n = t1._current;
        t3.$indexSet(t2, J.get$id$x(n), n);
      }
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
      var t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "class") && !t1.$eq($name, "style"))
        this.attributeToProperty$2(receiver, $name, newValue);
    },
    copyInstanceAttributes$0: function(receiver) {
      J.get$_instanceAttributes$x(receiver.polymer$Polymer$_declaration).forEach$1(0, new A.Polymer_copyInstanceAttributes_closure(receiver));
    },
    takeAttributes$0: function(receiver) {
      if (J.get$_publishLC$x(receiver.polymer$Polymer$_declaration) == null)
        return;
      this.get$attributes(receiver).forEach$1(0, this.get$attributeToProperty(receiver));
    },
    attributeToProperty$2: [function(receiver, $name, value) {
      var property, $self, currentValue, newValue;
      property = this.propertyForAttribute$1(receiver, $name);
      if (property == null)
        return;
      if (value == null || J.contains$1$asx(value, $.get$Polymer_bindPattern()) === true)
        return;
      $self = H.reflect(receiver);
      currentValue = $self.getField$1(property.get$simpleName()).get$reflectee();
      newValue = Z.deserializeValue(value, currentValue, A._inferPropertyType(currentValue, property));
      if (newValue == null ? currentValue != null : newValue !== currentValue)
        $self.setField$2(property.get$simpleName(), newValue);
    }, "call$2", "get$attributeToProperty", 4, 0, 491, 12, [], 30, []],
    propertyForAttribute$1: function(receiver, $name) {
      var publishLC = J.get$_publishLC$x(receiver.polymer$Polymer$_declaration);
      if (publishLC == null)
        return;
      return publishLC.$index(0, $name);
    },
    serializeValue$1: function(receiver, value) {
      if (value == null)
        return;
      if (typeof value === "boolean")
        return value ? "" : null;
      else if (typeof value === "string" || typeof value === "number" && Math.floor(value) === value || typeof value === "number")
        return H.S(value);
      return;
    },
    reflectPropertyToAttribute$1: function(receiver, $name) {
      var propValue, serializedValue;
      propValue = H.reflect(receiver).getField$1($name).get$reflectee();
      serializedValue = this.serializeValue$1(receiver, propValue);
      if (serializedValue != null)
        this.get$attributes(receiver)._element.setAttribute(J.get$_name$x($name), serializedValue);
      else if (typeof propValue === "boolean")
        this.get$attributes(receiver).remove$1(0, J.get$_name$x($name));
    },
    bind$3: function(receiver, $name, model, path) {
      var property, t1, t2, path0, t3, t4, observer;
      if (receiver.polymer$Polymer$_declaration == null)
        this.prepareElement$0(receiver);
      property = this.propertyForAttribute$1(receiver, $name);
      if (property == null)
        return J.bind$3$x(M.nodeBindFallback(receiver), $name, model, path);
      else {
        J.unbind$1$x(M.nodeBindFallback(receiver), $name);
        t1 = property.get$simpleName();
        t2 = $.get$_bindLog();
        if (t2.isLoggable$1(C.Level_FINE_500))
          t2.fine$1("[" + H.S(model) + "]: bindProperties: [" + H.S(path) + "] to [" + H.S(this.get$localName(receiver)) + "].[" + H.S(t1) + "]");
        path0 = L.PathObserver$(model, path, null);
        if (path0.get$value(path0) == null)
          path0.set$value(0, H.reflect(receiver).getField$1(t1).get$reflectee());
        t2 = H.reflect(receiver);
        t3 = t1._name;
        t4 = path != null ? path : "";
        observer = new A._PolymerBinding(t2, t1, null, null, receiver, model, null, null, t3, t4);
        observer.NodeBinding$4(receiver, t3, model, path);
        observer._PolymerBinding$4(receiver, t1, model, path);
        this.reflectPropertyToAttribute$1(receiver, property.get$simpleName());
        J.$indexSet$ax(J.get$bindings$x(M.nodeBindFallback(receiver)), $name, observer);
        return observer;
      }
    },
    get$bindings: function(receiver) {
      return J.get$bindings$x(M.nodeBindFallback(receiver));
    },
    unbind$1: function(receiver, $name) {
      return J.unbind$1$x(M.nodeBindFallback(receiver), $name);
    },
    asyncUnbindAll$0: function(receiver) {
      var job, t1;
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      $.get$_unbindLog().fine$1("[" + H.S(this.get$localName(receiver)) + "] asyncUnbindAll");
      job = receiver.polymer$Polymer$_unbindAllJob;
      t1 = this.get$unbindAll(receiver);
      if (job != null)
        job.stop$0(0);
      else
        job = new A._Job(null, null);
      job._callback = t1;
      job._timer = P.Timer_Timer(C.Duration_0, job.get$complete(job));
      receiver.polymer$Polymer$_unbindAllJob = job;
    },
    unbindAll$0: [function(receiver) {
      var t1, root;
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      t1 = receiver.polymer$Polymer$_propertyObserver;
      if (t1 != null) {
        t1.cancel$0();
        receiver.polymer$Polymer$_propertyObserver = null;
      }
      this.unregisterObservers$0(receiver);
      J.unbindAll$0$x(M.nodeBindFallback(receiver));
      root = this.get$shadowRoot(receiver);
      for (; root != null;) {
        A.Polymer__unbindNodeTree(root);
        root = root.olderShadowRoot;
      }
      receiver.polymer$Polymer$_unbound = true;
    }, "call$0", "get$unbindAll", 0, 0, 125],
    cancelUnbindAll$1$preventCascade: function(receiver, preventCascade) {
      var t1;
      if (receiver.polymer$Polymer$_unbound === true) {
        $.get$_unbindLog().warning$1("[" + H.S(this.get$localName(receiver)) + "] already unbound, cannot cancel unbindAll");
        return;
      }
      $.get$_unbindLog().fine$1("[" + H.S(this.get$localName(receiver)) + "] cancelUnbindAll");
      t1 = receiver.polymer$Polymer$_unbindAllJob;
      if (t1 != null) {
        t1.stop$0(0);
        receiver.polymer$Polymer$_unbindAllJob = null;
      }
      if (preventCascade === true)
        return;
      A.Polymer__forNodeTree(this.get$shadowRoot(receiver), new A.Polymer_cancelUnbindAll_closure());
    },
    cancelUnbindAll$0: function($receiver) {
      return this.cancelUnbindAll$1$preventCascade($receiver, null);
    },
    observeProperties$0: function(receiver) {
      var observe, publish, t1, t2, $name;
      observe = J.get$_polymer$_observe$x(receiver.polymer$Polymer$_declaration);
      publish = J.get$_polymer$_publish$x(receiver.polymer$Polymer$_declaration);
      if (observe != null)
        for (t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(observe), [H.getTypeArgumentByIndex(observe, 0)]), t2 = t1._map, t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), [H.getTypeArgumentByIndex(t1, 0)]), t1._cell = t1._map._first; t1.moveNext$0();) {
          $name = t1._collection$_current;
          this.observeArrayValue$3(receiver, $name, H.reflect(receiver).getField$1($name), null);
        }
      if (observe != null || publish != null)
        receiver.polymer$Polymer$_propertyObserver = this.get$changes(receiver).listen$1(this.get$notifyPropertyChanges(receiver));
    },
    notifyPropertyChanges$1: [function(receiver, changes) {
      var observe, publish, valuePairs, t1, c;
      observe = J.get$_polymer$_observe$x(receiver.polymer$Polymer$_declaration);
      publish = J.get$_polymer$_publish$x(receiver.polymer$Polymer$_declaration);
      valuePairs = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, A._PropertyValue);
      for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();) {
        c = t1.get$current();
        if (!J.getInterceptor(c).$isPropertyChangeRecord)
          continue;
        J.set$newValue$x(valuePairs.putIfAbsent$2(c.name, new A.Polymer_notifyPropertyChanges_closure(c)), c.newValue);
      }
      valuePairs.forEach$1(0, new A.Polymer_notifyPropertyChanges_closure0(receiver, changes, observe, publish));
    }, "call$1", "get$notifyPropertyChanges", 2, 0, 492, 493, []],
    observeArrayValue$3: function(receiver, $name, value, old) {
      var observe, callbackName, t1, subscription, t2;
      observe = J.get$_polymer$_observe$x(receiver.polymer$Polymer$_declaration);
      if (observe == null)
        return;
      callbackName = observe.$index(0, $name);
      if (callbackName == null)
        return;
      if (!!J.getInterceptor(old).$isObservableList) {
        t1 = $.get$_observeLog();
        if (t1.isLoggable$1(C.Level_FINE_500))
          t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] observeArrayValue: unregister observer " + H.S($name));
        this.unregisterObserver$1(receiver, H.S(J.get$_name$x($name)) + "__array");
      }
      if (!!J.getInterceptor(value).$isObservableList) {
        t1 = $.get$_observeLog();
        if (t1.isLoggable$1(C.Level_FINE_500))
          t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] observeArrayValue: register observer " + H.S($name));
        subscription = value.get$listChanges()._createSubscription$1(false);
        t1 = subscription._zone;
        subscription._async$_onData = t1.registerUnaryCallback$1(new A.Polymer_observeArrayValue_closure(receiver, old, callbackName));
        subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure(), t1);
        subscription._onDone = t1.registerCallback$1(P._nullDoneHandler$closure());
        t1 = H.S(J.get$_name$x($name)) + "__array";
        t2 = receiver.polymer$Polymer$_observers;
        if (t2 == null) {
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.StreamSubscription);
          receiver.polymer$Polymer$_observers = t2;
        }
        t2.$indexSet(0, t1, subscription);
      }
    },
    unregisterObserver$1: function(receiver, $name) {
      var sub = receiver.polymer$Polymer$_observers.remove$1(0, $name);
      if (sub == null)
        return false;
      sub.cancel$0();
      return true;
    },
    unregisterObservers$0: function(receiver) {
      var t1 = receiver.polymer$Polymer$_observers;
      if (t1 == null)
        return;
      for (t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        t1._current.cancel$0();
      receiver.polymer$Polymer$_observers.clear$0(0);
      receiver.polymer$Polymer$_observers = null;
    },
    addHostListeners$0: function(receiver) {
      var events, t1;
      events = J.get$_eventDelegates$x(receiver.polymer$Polymer$_declaration);
      if (events.get$isEmpty(events))
        return;
      t1 = $.get$_eventsLog();
      if (t1.isLoggable$1(C.Level_FINE_500))
        t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] addHostListeners: " + H.S(events));
      this.addNodeListeners$3(receiver, receiver, events.get$keys(), this.get$hostEventListener(receiver));
    },
    addNodeListeners$3: function(receiver, node, events, listener) {
      var t1, t2, $name, t3, t4, t5, t6;
      for (t1 = events._map, t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), [H.getTypeArgumentByIndex(events, 0)]), t1._cell = t1._map._first, t2 = J.getInterceptor$x(node); t1.moveNext$0();) {
        $name = t1._collection$_current;
        t3 = t2.get$on(node).$index(0, $name);
        t4 = t3._eventType;
        t5 = t3._useCapture;
        t6 = new W._EventStreamSubscription(0, t3._html$_target, t4, W._wrapZone(listener), t5);
        t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t3 = t6._onData;
        if (t3 != null && t6._pauseCount <= 0)
          J.addEventListener$3$x(t6._html$_target, t4, t3, t5);
      }
    },
    hostEventListener$1: [function(receiver, $event) {
      var t1, t2, log, t3, t4, result, h;
      t1 = J.getInterceptor$x($event);
      if (t1.get$bubbles($event) !== true)
        return;
      t2 = $.get$_eventsLog();
      log = t2.isLoggable$1(C.Level_FINE_500);
      if (log)
        t2.fine$1(">>> [" + H.S(this.get$localName(receiver)) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
      t3 = J.get$_eventDelegates$x(receiver.polymer$Polymer$_declaration);
      t4 = t1.get$type($event);
      result = J.$index$asx($.get$_reverseEventTranslations(), t4);
      h = t3.$index(0, result != null ? result : t4);
      if (h != null) {
        if (log)
          t2.fine$1("[" + H.S(this.get$localName(receiver)) + "] found host handler name [" + h + "]");
        this.dispatchMethod$3(receiver, receiver, h, [$event, !!t1.$isCustomEvent ? t1.get$detail($event) : null, receiver]);
      }
      if (log)
        t2.fine$1("<<< [" + H.S(this.get$localName(receiver)) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
    }, "call$1", "get$hostEventListener", 2, 0, 494, 321, []],
    dispatchMethod$3: function(receiver, object, callbackOrMethod, args) {
      var t1, log;
      t1 = $.get$_eventsLog();
      log = t1.isLoggable$1(C.Level_FINE_500);
      if (log)
        t1.fine$1(">>> [" + H.S(this.get$localName(receiver)) + "]: dispatch " + H.S(callbackOrMethod));
      if (!!J.getInterceptor(callbackOrMethod).$isFunction)
        H.Primitives_applyFunction(callbackOrMethod, args, P.Function__toMangledNames(null));
      else if (typeof callbackOrMethod === "string")
        A.Polymer__invokeMethod(object, new H.Symbol0(H.Symbol_validatePublicSymbol(callbackOrMethod)), args);
      else
        t1.warning$1("invalid callback");
      if (log)
        t1.info$1("<<< [" + H.S(this.get$localName(receiver)) + "]: dispatch " + H.S(callbackOrMethod));
    },
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  Polymer_copyInstanceAttributes_closure: {
    "^": "Closure:296;this_0",
    call$2: [function($name, value) {
      var t1 = J.get$attributes$x(this.this_0);
      if (t1.containsKey$1($name) !== true)
        t1.$indexSet(0, $name, new A.Polymer_copyInstanceAttributes__closure(value).call$0());
      t1.$index(0, $name);
    }, "call$2", null, 4, 0, null, 12, [], 30, [], "call"],
    $isFunction: true
  },
  Polymer_copyInstanceAttributes__closure: {
    "^": "Closure:114;value_1",
    call$0: [function() {
      return this.value_1;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_cancelUnbindAll_closure: {
    "^": "Closure:115;",
    call$1: [function(n) {
      var t1 = J.getInterceptor(n);
      if (!!t1.$isPolymer)
        t1.cancelUnbindAll$0(n);
    }, "call$1", null, 2, 0, null, 207, [], "call"],
    $isFunction: true
  },
  Polymer__unbindNodeTree_closure: {
    "^": "Closure:115;",
    call$1: [function(node) {
      return J.unbindAll$0$x(!!J.getInterceptor(node).$isNodeBindExtension ? node : M.nodeBindFallback(node));
    }, "call$1", null, 2, 0, null, 269, [], "call"],
    $isFunction: true
  },
  Polymer_notifyPropertyChanges_closure: {
    "^": "Closure:114;c_0",
    call$0: [function() {
      return new A._PropertyValue(this.c_0.oldValue, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Polymer_notifyPropertyChanges_closure0: {
    "^": "Closure:296;this_1,changes_2,observe_3,publish_4",
    call$2: [function($name, pair) {
      var t1, method, t2;
      t1 = this.publish_4;
      if (t1 != null && t1.containsKey$1($name))
        J.reflectPropertyToAttribute$1$x(this.this_1, $name);
      t1 = this.observe_3;
      if (t1 == null)
        return;
      method = t1.$index(0, $name);
      if (method != null) {
        t1 = this.this_1;
        t2 = J.getInterceptor$x(pair);
        J.observeArrayValue$3$x(t1, $name, t2.get$newValue(pair), t2.get$oldValue(pair));
        A.Polymer__invokeMethod(t1, method, [t2.get$oldValue(pair), t2.get$newValue(pair), this.changes_2]);
      }
    }, "call$2", null, 4, 0, null, 12, [], 495, [], "call"],
    $isFunction: true
  },
  Polymer_observeArrayValue_closure: {
    "^": "Closure:115;this_0,old_1,callbackName_2",
    call$1: [function(changes) {
      A.Polymer__invokeMethod(this.this_0, this.callbackName_2, [this.old_1]);
    }, "call$1", null, 2, 0, null, 493, [], "call"],
    $isFunction: true
  },
  Polymer_prepareBinding_closure: {
    "^": "Closure:296;path_0,name_1",
    call$2: [function(model, node) {
      var t1, eventName, translated;
      t1 = $.get$_eventsLog();
      if (t1.isLoggable$1(C.Level_FINE_500))
        t1.fine$1("event: [" + H.S(node) + "]." + H.S(this.name_1) + " => [" + H.S(model) + "]." + this.path_0 + "())");
      eventName = J.substring$1$s(this.name_1, 3);
      translated = C.Map_484CA.$index(0, eventName);
      if (translated != null)
        eventName = translated;
      t1 = J.get$on$x(node).$index(0, eventName);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new A.Polymer_prepareBinding__closure(this.path_0, model, node)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return H.setRuntimeTypeInfo(new A.ObservableBox(null, null, null), [null]);
    }, "call$2", null, 4, 0, null, 288, [], 269, [], "call"],
    $isFunction: true
  },
  Polymer_prepareBinding__closure: {
    "^": "Closure:115;path_2,model_3,node_4",
    call$1: [function($event) {
      var t1, ctrlr, t2, method, obj, t3;
      t1 = this.node_4;
      ctrlr = A.Polymer__findController(t1);
      t2 = J.getInterceptor(ctrlr);
      if (!t2.$isPolymer)
        return;
      method = this.path_2;
      if (0 >= method.length)
        return H.ioore(method, 0);
      if (method[0] === "@") {
        obj = this.model_3;
        t3 = L.PathObserver$(obj, C.JSString_methods.substring$1(method, 1), null);
        method = t3.get$value(t3);
      } else
        obj = ctrlr;
      t3 = J.getInterceptor($event);
      t2.dispatchMethod$3(ctrlr, obj, method, [$event, !!t3.$isCustomEvent ? t3.get$detail($event) : null, t1]);
    }, "call$1", null, 2, 0, null, 321, [], "call"],
    $isFunction: true
  },
  Polymer__invokeMethod_closure: {
    "^": "Closure:115;",
    call$1: [function(p) {
      return !p.get$isOptional();
    }, "call$1", null, 2, 0, null, 496, [], "call"],
    $isFunction: true
  },
  Polymer_unveilElements_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      var nodes, t1, t2, t3;
      nodes = W._FrozenElementList$_wrap(document.querySelectorAll(".polymer-veiled"), null);
      for (t1 = nodes.get$iterator(nodes); t1.moveNext$0();) {
        t2 = J.get$classes$x(t1._current);
        t3 = J.getInterceptor$ax(t2);
        t3.add$1(t2, "polymer-unveil");
        t3.remove$1(t2, "polymer-veiled");
      }
      if (nodes.get$isNotEmpty(nodes)) {
        t1 = C._CustomEventStreamProvider__determineTransitionEventType.forTarget$1(window);
        t1.get$first(t1).then$1(new A.Polymer_unveilElements__closure(nodes));
      }
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  Polymer_unveilElements__closure: {
    "^": "Closure:115;nodes_0",
    call$1: [function(_) {
      var t1;
      for (t1 = this.nodes_0, t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.remove$1$ax(J.get$classes$x(t1._current), "polymer-unveil");
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  _PolymerBinding: {
    "^": "NodeBinding;_polymer$_target,_property,_sub,_lastValue,_node_binding$_node,_model,_observer,_pathSub,property,path",
    close$0: function(_) {
      if (this._node_binding$_node == null)
        return;
      this._sub.cancel$0();
      X.NodeBinding.prototype.close$0.call(this, this);
    },
    valueChanged$1: function(newValue) {
      this._lastValue = newValue;
      this._polymer$_target.setField$2(this._property, newValue);
    },
    _propertyValueChanged$1: [function(records) {
      var t1, t2, record, newValue;
      for (t1 = J.get$iterator$ax(records), t2 = this._property; t1.moveNext$0();) {
        record = t1.get$current();
        if (!!J.getInterceptor(record).$isPropertyChangeRecord && J.$eq(record.name, t2)) {
          newValue = this._polymer$_target.getField$1(t2).get$reflectee();
          t1 = this._lastValue;
          if (t1 == null ? newValue != null : t1 !== newValue)
            J.set$value$x(this._observer, newValue);
          return;
        }
      }
    }, "call$1", "get$_propertyValueChanged", 2, 0, 497, 261, []],
    _PolymerBinding$4: function(node, property, model, path) {
      this._sub = J.get$changes$x(node).listen$1(this.get$_propertyValueChanged());
    }
  },
  PolymerElement: {
    "^": ["HtmlElement_Polymer_ChangeNotifier;change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    PolymerElement$created$0: function(receiver) {
      this.polymerCreated$0(receiver);
    },
    static: {PolymerElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.PolymerElement_methods.Element$created$0(receiver);
        C.PolymerElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_Polymer: {
    "^": ["HtmlElement+Polymer;$$:polymer$Polymer$$=-302", function() {
      return [C.C_Reflectable];
    }],
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  HtmlElement_Polymer_ChangeNotifier: {
    "^": "HtmlElement_Polymer+ChangeNotifier;",
    $isObservable: true
  },
  _PropertyValue: {
    "^": "Object;oldValue>,newValue*",
    $is_PropertyValue: true
  },
  _PolymerExpressionsWithEventDelegate: {
    "^": "PolymerExpressions;globals"
  },
  _Job: {
    "^": "Object;_callback,_timer",
    _callback$0: function() {
      return this._callback.call$0();
    },
    stop$0: function(_) {
      var t1 = this._timer;
      if (t1 != null) {
        t1.cancel$0();
        this._timer = null;
      }
    },
    complete$0: [function(_) {
      if (this._timer != null) {
        this.stop$0(0);
        this._callback$0();
      }
    }, "call$0", "get$complete", 0, 0, 125]
  },
  CustomTag: {
    "^": "Object;tagName",
    $isCustomTag: true
  },
  _initPolymerOptimized_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      var t1 = $.get$Polymer__ready().future;
      if (t1._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      t1._asyncComplete$1(null);
      return;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  _loadLibrary_closure: {
    "^": "Closure:115;",
    call$1: [function(d) {
      return !!J.getInterceptor(d).$isMethodMirror;
    }, "call$1", null, 2, 0, null, 498, [], "call"],
    $isFunction: true
  },
  _loadLibrary_closure0: {
    "^": "Closure:115;",
    call$1: [function(d) {
      return !!J.getInterceptor(d).$isClassMirror;
    }, "call$1", null, 2, 0, null, 498, [], "call"],
    $isFunction: true
  },
  _maybeInvoke_closure: {
    "^": "Closure:115;",
    call$1: [function(p) {
      return !p.get$isOptional();
    }, "call$1", null, 2, 0, null, 496, [], "call"],
    $isFunction: true
  },
  _InitMethodAnnotation: {
    "^": "Object;"
  }
}],
["polymer.deserialize", "package:polymer/deserialize.dart", , Z, {
  "^": "",
  deserializeValue: [function(value, currentValue, type) {
    var handler, t1, exception;
    handler = J.$index$asx($.get$_typeHandlers(), J.get$qualifiedName$x(type));
    if (handler != null)
      return handler.call$2(value, currentValue);
    try {
      t1 = C.JsonCodec_null_null.decode$1(J.replaceAll$2$s(value, "'", "\""));
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return value;
    }

  }, "call$3", "deserializeValue$closure", 6, 0, null, 30, [], 280, [], 11, []],
  closure0: {
    "^": "Closure:114;",
    call$0: [function() {
      var m = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      m.$indexSet(0, C.Symbol_iC9, new Z._closure());
      m.$indexSet(0, C.Symbol_s2s, new Z._closure0());
      m.$indexSet(0, C.Symbol_4YB, new Z._closure1());
      m.$indexSet(0, C.Symbol_6TA, new Z._closure2());
      m.$indexSet(0, C.Symbol_mdn, new Z._closure3());
      m.$indexSet(0, C.Symbol_sMO, new Z._closure4());
      return m;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _closure: {
    "^": "Closure:296;",
    call$2: [function(x, _) {
      return x;
    }, "call$2", null, 4, 0, null, 28, [], 116, [], "call"],
    $isFunction: true
  },
  _closure0: {
    "^": "Closure:296;",
    call$2: [function(x, _) {
      return x;
    }, "call$2", null, 4, 0, null, 28, [], 116, [], "call"],
    $isFunction: true
  },
  _closure1: {
    "^": "Closure:296;",
    call$2: [function(x, def) {
      var t1, exception;
      try {
        t1 = P.DateTime_parse(x);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return def;
      }

    }, "call$2", null, 4, 0, null, 28, [], 499, [], "call"],
    $isFunction: true
  },
  _closure2: {
    "^": "Closure:296;",
    call$2: [function(x, _) {
      return !J.$eq(x, "false");
    }, "call$2", null, 4, 0, null, 28, [], 116, [], "call"],
    $isFunction: true
  },
  _closure3: {
    "^": "Closure:296;",
    call$2: [function(x, def) {
      return H.Primitives_parseInt(x, null, new Z.__closure0(def));
    }, "call$2", null, 4, 0, null, 28, [], 499, [], "call"],
    $isFunction: true
  },
  __closure0: {
    "^": "Closure:115;def_0",
    call$1: [function(_) {
      return this.def_0;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  _closure4: {
    "^": "Closure:296;",
    call$2: [function(x, def) {
      return H.Primitives_parseDouble(x, new Z.__closure(def));
    }, "call$2", null, 4, 0, null, 28, [], 499, [], "call"],
    $isFunction: true
  },
  __closure: {
    "^": "Closure:115;def_1",
    call$1: [function(_) {
      return this.def_1;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  }
}],
["polymer_expressions", "package:polymer_expressions/polymer_expressions.dart", , T, {
  "^": "",
  _classAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.where$1$ax(v.get$keys(), new T._classAttributeConverter_closure(v)).join$1(0, " ");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, " ") : v;
    return t1;
  }, "call$1", "_classAttributeConverter$closure", 2, 0, 203, 121, []],
  _styleAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.map$1$ax(v.get$keys(), new T._styleAttributeConverter_closure(v)).join$1(0, ";");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, ";") : v;
    return t1;
  }, "call$1", "_styleAttributeConverter$closure", 2, 0, 203, 121, []],
  _classAttributeConverter_closure: {
    "^": "Closure:115;v_0",
    call$1: [function(k) {
      return J.$eq(this.v_0.$index(0, k), true);
    }, "call$1", null, 2, 0, null, 372, [], "call"],
    $isFunction: true
  },
  _styleAttributeConverter_closure: {
    "^": "Closure:115;v_0",
    call$1: [function(k) {
      return H.S(k) + ": " + H.S(this.v_0.$index(0, k));
    }, "call$1", null, 2, 0, null, 372, [], "call"],
    $isFunction: true
  },
  PolymerExpressions: {
    "^": "BindingDelegate;",
    prepareBinding$3: [function(path, $name, node) {
      var t1, t2, expr;
      if (path == null)
        return;
      t1 = new Y.Tokenizer(H.setRuntimeTypeInfo([], [Y.Token]), P.StringBuffer$(""), new P.RuneIterator(path, 0, 0, null), null);
      t2 = new U.AstFactory();
      t2 = new T.Parser(t2, t1, null, null);
      t1 = t1.tokenize$0();
      t2._tokens = t1;
      t2._parser$_iterator = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
      t2._advance$0();
      expr = t2._parseExpression$0();
      if (M.isSemanticTemplate(node)) {
        t1 = J.getInterceptor($name);
        t1 = (t1.$eq($name, "bind") || t1.$eq($name, "repeat")) && !!J.getInterceptor(expr).$isEmptyExpression;
      } else
        t1 = false;
      if (t1)
        return;
      return new T.PolymerExpressions_prepareBinding_closure(this, $name, expr);
    }, "call$3", "get$prepareBinding", 6, 0, 500, 270, [], 12, [], 269, []],
    prepareInstanceModel$1: function(template) {
      return new T.PolymerExpressions_prepareInstanceModel_closure(this);
    }
  },
  PolymerExpressions_prepareBinding_closure: {
    "^": "Closure:296;this_0,name_1,expr_2",
    call$2: [function(model, node) {
      var t1;
      if (!J.getInterceptor(model).$isScope) {
        t1 = this.this_0.globals;
        model = new K.Scope(null, model, V.ObservableMap_ObservableMap$from(t1 == null ? H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)) : t1, null, null), null);
      }
      t1 = !!J.getInterceptor(node).$isElement;
      if (t1 && J.$eq(this.name_1, "class"))
        return T._Binding$(this.expr_2, model, T._classAttributeConverter$closure());
      if (t1 && J.$eq(this.name_1, "style"))
        return T._Binding$(this.expr_2, model, T._styleAttributeConverter$closure());
      return T._Binding$(this.expr_2, model, null);
    }, "call$2", null, 4, 0, null, 288, [], 269, [], "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareInstanceModel_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(model) {
      var t1;
      if (!!J.getInterceptor(model).$isScope)
        t1 = model;
      else {
        t1 = this.this_0.globals;
        t1 = new K.Scope(null, model, V.ObservableMap_ObservableMap$from(t1 == null ? H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)) : t1, null, null), null);
      }
      return t1;
    }, "call$1", null, 2, 0, null, 288, [], "call"],
    $isFunction: true
  },
  _Binding: {
    "^": "ChangeNotifier;_scope,_polymer_expressions$_expr,_converter,_polymer_expressions$_value,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    _converter$1: function(arg0) {
      return this._converter.call$1(arg0);
    },
    _polymer_expressions$_setValue$1: [function(v) {
      var oldValue, t1;
      oldValue = this._polymer_expressions$_value;
      if (!!J.getInterceptor(v).$isComprehension) {
        t1 = J.toList$1$growable$ax(J.map$1$ax(v.iterable, new T._Binding__setValue_closure(this, v)), false);
        this._polymer_expressions$_value = t1;
      } else {
        t1 = this._converter == null ? v : this._converter$1(v);
        this._polymer_expressions$_value = t1;
      }
      F.notifyPropertyChangeHelper(this, C.Symbol_value, oldValue, t1);
    }, "call$1", "get$_polymer_expressions$_setValue", 2, 0, 115, 121, []],
    get$value: [function(_) {
      return this._polymer_expressions$_value;
    }, null, null, 1, 0, 114, "value", 304],
    set$value: [function(_, v) {
      var e, exception, t1;
      try {
        K.assign(this._polymer_expressions$_expr, v, this._scope);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (!!J.getInterceptor(t1).$isEvalException) {
          e = t1;
          $.get$_logger1().warning$1("Error evaluating expression '" + H.S(this._polymer_expressions$_expr) + "': " + J.get$message$x(e));
        } else
          throw exception;
      }

    }, null, null, 3, 0, 115, 121, [], "value", 304],
    _Binding$3: function(expr, scope, _converter) {
      var e, t1, exception, t2;
      t1 = this._polymer_expressions$_expr;
      t1.get$onUpdate().listen$1(this.get$_polymer_expressions$_setValue()).onError$1(0, new T._Binding_closure(this));
      try {
        J.accept$1$x(t1, new K.Updater(this._scope));
        t1.get$currentValue();
        this._polymer_expressions$_setValue$1(t1.get$currentValue());
      } catch (exception) {
        t2 = H.unwrapException(exception);
        if (!!J.getInterceptor(t2).$isEvalException) {
          e = t2;
          $.get$_logger1().warning$1("Error evaluating expression '" + H.S(t1) + "': " + J.get$message$x(e));
        } else
          throw exception;
      }

    },
    static: {_Binding$: function(expr, scope, _converter) {
        var t1 = new T._Binding(scope, expr.accept$1(0, new K.ObserverBuilder(scope, P.ListQueue$(null, null))), _converter, null, null, null);
        t1._Binding$3(expr, scope, _converter);
        return t1;
      }}
  },
  _Binding_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(e) {
      $.get$_logger1().warning$1("Error evaluating expression '" + H.S(this.this_0._polymer_expressions$_expr) + "': " + H.S(J.get$message$x(e)));
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _Binding__setValue_closure: {
    "^": "Closure:115;this_0,v_1",
    call$1: [function(i) {
      var vars = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      vars.$indexSet(0, this.v_1.identifier, i);
      return new K.Scope(this.this_0._scope, null, V.ObservableMap_ObservableMap$from(vars, null, null), null);
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true
  }
}],
["polymer_expressions.async", "package:polymer_expressions/async.dart", , B, {
  "^": "",
  StreamBinding: {
    "^": "ObservableBox;stream,_observable_box$_value,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    StreamBinding$1: function(stream, $T) {
      this.stream.listen$1(new B.StreamBinding_closure($T, this));
    },
    $asObservableBox: function($T) {
      return [null];
    },
    static: {StreamBinding$: function(stream, $T) {
        var t1 = H.setRuntimeTypeInfo(new B.StreamBinding(stream, null, null, null), [$T]);
        t1.StreamBinding$1(stream, $T);
        return t1;
      }}
  },
  StreamBinding_closure: {
    "^": "Closure;T_0,this_1",
    call$1: [function(i) {
      var t1 = this.this_1;
      t1._observable_box$_value = F.notifyPropertyChangeHelper(t1, C.Symbol_value, t1._observable_box$_value, i);
    }, "call$1", null, 2, 0, null, 330, [], "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.this_1, "StreamBinding");
    }
  }
}],
["polymer_expressions.eval", "package:polymer_expressions/eval.dart", , K, {
  "^": "",
  eval0: [function(expr, scope) {
    var observer = J.accept$1$x(expr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
    J.accept$1$x(observer, new K.Updater(scope));
    return observer.get$_eval$_value();
  }, "call$2", "eval0$closure", 4, 0, null, 281, [], 274, []],
  assign: [function(expr, value, scope) {
    var t1, t2, filters, t3, t4, property, expression, isIndex, filterExpr, observer, o;
    t1 = {};
    t1.expr_0 = expr;
    t2 = new K.assign_notAssignable(t1);
    filters = H.setRuntimeTypeInfo([], [U.Expression]);
    for (; t3 = t1.expr_0, t4 = J.getInterceptor(t3), !!t4.$isBinaryOperator;) {
      if (!J.$eq(t4.get$operator(t3), "|"))
        break;
      filters.push(t4.get$right(t3));
      t1.expr_0 = t4.get$left(t3);
    }
    t3 = t1.expr_0;
    t4 = J.getInterceptor(t3);
    if (!!t4.$isIdentifier) {
      property = t4.get$value(t3);
      expression = C.C_EmptyExpression;
      isIndex = false;
    } else if (!!t4.$isIndex) {
      if (!J.getInterceptor(t3.get$argument()).$isLiteral)
        t2.call$0();
      expression = t1.expr_0.get$receiver();
      property = J.get$value$x(t1.expr_0.get$argument());
      isIndex = true;
    } else {
      if (!!t4.$isGetter) {
        expression = t3.get$receiver();
        property = J.get$name$x(t1.expr_0);
      } else if (!!t4.$isInvoke) {
        expression = t3.get$receiver();
        if (J.get$method$x(t1.expr_0) != null) {
          if (t1.expr_0.get$arguments() != null)
            t2.call$0();
          property = J.get$method$x(t1.expr_0);
        } else {
          t2.call$0();
          property = null;
        }
      } else {
        t2.call$0();
        expression = null;
        property = null;
      }
      isIndex = false;
    }
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(filters, filters.length, 0, null), [H.getTypeArgumentByIndex(filters, 0)]); t1.moveNext$0();) {
      filterExpr = t1._current;
      observer = J.accept$1$x(filterExpr, new K.ObserverBuilder(scope, P.ListQueue$(null, null)));
      J.accept$1$x(observer, new K.Updater(scope));
      observer.get$_eval$_value();
      throw H.wrapException(K.EvalException$("filter must implement Transformer: " + H.S(filterExpr)));
    }
    o = K.eval0(expression, scope);
    if (o == null)
      throw H.wrapException(K.EvalException$("Can't assign to null: " + H.S(expression)));
    if (isIndex)
      J.$indexSet$ax(o, property, value);
    else
      H.reflect(o).setField$2(new H.Symbol0(H.Symbol_validatePublicSymbol(property)), value);
  }, "call$3", "assign$closure", 6, 0, null, 281, [], 30, [], 274, []],
  _convert: [function(v) {
    if (!!J.getInterceptor(v).$isStream)
      return B.StreamBinding$(v, null);
    return v;
  }, "call$1", "_convert$closure", 2, 0, null, 121, []],
  closure4: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$add$ns(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure5: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$sub$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure6: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$mul$ns(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure7: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$div$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure8: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$eq(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure9: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return !J.$eq(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure10: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$gt$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure11: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$ge$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure12: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$lt$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure13: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$le$n(a, b);
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure14: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return a === true || b === true;
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure15: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return a === true && b === true;
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  closure16: {
    "^": "Closure:296;",
    call$2: [function(a, f) {
      var t1 = H.buildInterfaceType(P.Object);
      t1 = H.buildFunctionType(t1, [t1])._isTest$1(f);
      if (t1)
        return f.call$1(a);
      throw H.wrapException(K.EvalException$("Filters must be a one-argument function."));
    }, "call$2", null, 4, 0, null, 117, [], 127, [], "call"],
    $isFunction: true
  },
  closure17: {
    "^": "Closure:115;",
    call$1: [function(a) {
      return a;
    }, "call$1", null, 2, 0, null, 117, [], "call"],
    $isFunction: true
  },
  closure18: {
    "^": "Closure:115;",
    call$1: [function(a) {
      return J.$negate$n(a);
    }, "call$1", null, 2, 0, null, 117, [], "call"],
    $isFunction: true
  },
  closure19: {
    "^": "Closure:115;",
    call$1: [function(a) {
      return a !== true;
    }, "call$1", null, 2, 0, null, 117, [], "call"],
    $isFunction: true
  },
  assign_notAssignable: {
    "^": "Closure:114;box_0",
    call$0: [function() {
      return H.throwExpression(K.EvalException$("Expression is not assignable: " + H.S(this.box_0.expr_0)));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Scope: {
    "^": "Object;parent>,model<,_variables,__modelMirror",
    get$_modelMirror: function() {
      var t1 = this.__modelMirror;
      if (t1 != null)
        return t1;
      t1 = H.reflect(this.model);
      this.__modelMirror = t1;
      return t1;
    },
    $index: function(_, $name) {
      var t1, symbol, memberMirror, t2;
      if (J.$eq($name, "this"))
        return this.model;
      else {
        t1 = this._variables._observable_map$_map;
        if (t1.containsKey$1($name))
          return K._convert(t1.$index(0, $name));
        else if (this.model != null) {
          symbol = new H.Symbol0(H.Symbol_validatePublicSymbol($name));
          memberMirror = Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), symbol);
          t1 = J.getInterceptor(memberMirror);
          if (!t1.$isVariableMirror)
            t2 = !!t1.$isMethodMirror && memberMirror.get$isGetter();
          else
            t2 = true;
          if (t2)
            return K._convert(this.get$_modelMirror().getField$1(symbol).get$reflectee());
          else if (!!t1.$isMethodMirror)
            return new K.Method(this.get$_modelMirror(), symbol);
        }
      }
      t1 = this.parent;
      if (t1 != null)
        return K._convert(t1.$index(0, $name));
      else
        throw H.wrapException(K.EvalException$("variable '" + H.S($name) + "' not found"));
    },
    ownerOf$1: function($name) {
      var t1;
      if (J.$eq($name, "this"))
        return;
      else {
        t1 = this._variables;
        if (t1._observable_map$_map.containsKey$1($name))
          return t1;
        else {
          t1 = H.Symbol_validatePublicSymbol($name);
          if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
            return this.model;
        }
      }
      t1 = this.parent;
      if (t1 != null)
        return t1.ownerOf$1($name);
    },
    contains$1: function(_, $name) {
      var t1;
      if (this._variables._observable_map$_map.containsKey$1($name))
        return true;
      else {
        t1 = H.Symbol_validatePublicSymbol($name);
        if (Z.getMemberMirror(H.reflectClassByMangledName(J.get$runtimeType$(this.get$_modelMirror().reflectee)._typeName), new H.Symbol0(t1)) != null)
          return true;
      }
      t1 = this.parent;
      if (t1 != null)
        return t1.contains$1(0, $name);
      return false;
    },
    $isScope: true
  },
  ExpressionObserver: {
    "^": "Object;_parent?,_eval$_value<",
    get$onUpdate: function() {
      var t1 = this._eval$_controller;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$currentValue: function() {
      return this._eval$_value;
    },
    update$1: function(scope) {
      return this._updateSelf$1(scope);
    },
    _updateSelf$1: function(scope) {
    },
    _invalidate$1: function(scope) {
      var t1;
      this._observe$1(0, scope);
      t1 = this._parent;
      if (t1 != null)
        t1._invalidate$1(scope);
    },
    _observe$1: function(_, scope) {
      var t1, _oldValue, t2;
      t1 = this._eval$_subscription;
      if (t1 != null) {
        t1.cancel$0();
        this._eval$_subscription = null;
      }
      _oldValue = this._eval$_value;
      this._updateSelf$1(scope);
      t1 = this._eval$_value;
      if (t1 == null ? _oldValue != null : t1 !== _oldValue) {
        t2 = this._eval$_controller;
        if (t2._state >= 4)
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
      }
    },
    toString$0: function(_) {
      return this._eval$_expr.toString$0(0);
    },
    $isExpression: true
  },
  Updater: {
    "^": "RecursiveVisitor;scope",
    visitExpression$1: function(e) {
      e._observe$1(0, this.scope);
    },
    visitInExpression$1: function(c) {
      J.accept$1$x(c.get$right(c), this);
      c._observe$1(0, this.scope);
    }
  },
  ObserverBuilder: {
    "^": "Visitor;scope,parents",
    visitEmptyExpression$1: function(e) {
      return new K.EmptyObserver(e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitParenthesizedExpression$1: function(e) {
      return e.child.accept$1(0, this);
    },
    visitGetter$1: function(g) {
      var receiver, getter;
      receiver = J.accept$1$x(g.get$receiver(), this);
      getter = new K.GetterObserver(receiver, g, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(getter);
      return getter;
    },
    visitIndex$1: function(i) {
      var receiver, arg, index;
      receiver = J.accept$1$x(i.get$receiver(), this);
      arg = J.accept$1$x(i.get$argument(), this);
      index = new K.IndexObserver(receiver, arg, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(index);
      arg.set$_parent(index);
      return index;
    },
    visitInvoke$1: function(i) {
      var receiver, t1, args, t2, invoke;
      receiver = J.accept$1$x(i.get$receiver(), this);
      t1 = i.get$arguments();
      if (t1 == null)
        args = null;
      else {
        t2 = this.get$visit();
        t1.toString;
        args = H.setRuntimeTypeInfo(new H.MappedListIterable(t1, t2), [null, null]).toList$1$growable(0, false);
      }
      invoke = new K.InvokeObserver(receiver, args, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(invoke);
      if (args != null)
        H.IterableMixinWorkaround_forEach(args, new K.ObserverBuilder_visitInvoke_closure(invoke));
      return invoke;
    },
    visitLiteral$1: function(l) {
      return new K.LiteralObserver(l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitMapLiteral$1: function(l) {
      var entries, map;
      entries = H.setRuntimeTypeInfo(new H.MappedListIterable(l.get$entries(l), this.get$visit()), [null, null]).toList$1$growable(0, false);
      map = new K.MapLiteralObserver(entries, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      H.IterableMixinWorkaround_forEach(entries, new K.ObserverBuilder_visitMapLiteral_closure(map));
      return map;
    },
    visitMapLiteralEntry$1: function(e) {
      var key, value, entry;
      key = J.accept$1$x(e.get$key(e), this);
      value = J.accept$1$x(e.get$entryValue(), this);
      entry = new K.MapLiteralEntryObserver(key, value, e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      key.set$_parent(entry);
      value.set$_parent(entry);
      return entry;
    },
    visitIdentifier$1: function(i) {
      return new K.IdentifierObserver(i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitBinaryOperator$1: function(o) {
      var left, right, binary;
      left = J.accept$1$x(o.get$left(o), this);
      right = J.accept$1$x(o.get$right(o), this);
      binary = new K.BinaryObserver(left, right, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      left.set$_parent(binary);
      right.set$_parent(binary);
      return binary;
    },
    visitUnaryOperator$1: function(o) {
      var expr, unary;
      expr = J.accept$1$x(o.get$child(), this);
      unary = new K.UnaryObserver(expr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      expr.set$_parent(unary);
      return unary;
    },
    visitInExpression$1: function(i) {
      var left, right, inexpr;
      left = J.accept$1$x(i.get$left(i), this);
      right = J.accept$1$x(i.get$right(i), this);
      inexpr = new K.InObserver(left, right, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      right.set$_parent(inexpr);
      return inexpr;
    }
  },
  ObserverBuilder_visitInvoke_closure: {
    "^": "Closure:115;invoke_0",
    call$1: [function(a) {
      var t1 = this.invoke_0;
      a.set$_parent(t1);
      return t1;
    }, "call$1", null, 2, 0, null, 117, [], "call"],
    $isFunction: true
  },
  ObserverBuilder_visitMapLiteral_closure: {
    "^": "Closure:115;map_0",
    call$1: [function(e) {
      var t1 = this.map_0;
      e.set$_parent(t1);
      return t1;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  EmptyObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = scope.get$model();
    },
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $asExpressionObserver: function() {
      return [U.EmptyExpression];
    },
    $isEmptyExpression: true,
    $isExpression: true
  },
  LiteralObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1 = this._eval$_expr;
      this._eval$_value = t1.get$value(t1);
    },
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Literal];
    },
    $asLiteral: function() {
      return [null];
    },
    $isLiteral: true,
    $isExpression: true
  },
  MapLiteralObserver: {
    "^": "ExpressionObserver;entries>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = H.IterableMixinWorkaround_fold(this.entries, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), new K.MapLiteralObserver__updateSelf_closure());
    },
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteral];
    },
    $isMapLiteral: true,
    $isExpression: true
  },
  MapLiteralObserver__updateSelf_closure: {
    "^": "Closure:296;",
    call$2: [function(m, e) {
      J.$indexSet$ax(m, J.get$key$x(e).get$_eval$_value(), e.get$entryValue().get$_eval$_value());
      return m;
    }, "call$2", null, 4, 0, null, 199, [], 21, [], "call"],
    $isFunction: true
  },
  MapLiteralEntryObserver: {
    "^": "ExpressionObserver;key>,entryValue<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteralEntry];
    },
    $isMapLiteralEntry: true,
    $isExpression: true
  },
  IdentifierObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, owner, t2;
      t1 = this._eval$_expr;
      this._eval$_value = J.$index$asx(scope, t1.get$value(t1));
      owner = scope.ownerOf$1(t1.get$value(t1));
      t2 = J.getInterceptor(owner);
      if (!!t2.$isObservable) {
        t1 = H.Symbol_validatePublicSymbol(t1.get$value(t1));
        this._eval$_subscription = t2.get$changes(owner).listen$1(new K.IdentifierObserver__updateSelf_closure(this, scope, new H.Symbol0(t1)));
      }
    },
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Identifier];
    },
    $isIdentifier: true,
    $isExpression: true
  },
  IdentifierObserver__updateSelf_closure: {
    "^": "Closure:115;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IdentifierObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 493, [], "call"],
    $isFunction: true
  },
  IdentifierObserver__updateSelf__closure: {
    "^": "Closure:115;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 285, [], "call"],
    $isFunction: true
  },
  UnaryObserver: {
    "^": "ExpressionObserver;child<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f;
      t1 = this._eval$_expr;
      f = $.get$_UNARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "!")) {
        t1 = this.child.get$_eval$_value();
        this._eval$_value = f.call$1(t1 == null ? false : t1);
      } else {
        t1 = this.child;
        this._eval$_value = t1.get$_eval$_value() == null ? null : f.call$1(t1.get$_eval$_value());
      }
    },
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.UnaryOperator];
    },
    $isUnaryOperator: true,
    $isExpression: true
  },
  BinaryObserver: {
    "^": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f, t2;
      t1 = this._eval$_expr;
      f = $.get$_BINARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "&&") || J.$eq(t1.get$operator(t1), "||")) {
        t1 = this.left.get$_eval$_value();
        if (t1 == null)
          t1 = false;
        t2 = this.right.get$_eval$_value();
        this._eval$_value = f.call$2(t1, t2 == null ? false : t2);
      } else if (J.$eq(t1.get$operator(t1), "==") || J.$eq(t1.get$operator(t1), "!="))
        this._eval$_value = f.call$2(this.left.get$_eval$_value(), this.right.get$_eval$_value());
      else {
        t2 = this.left;
        if (t2.get$_eval$_value() == null || this.right.get$_eval$_value() == null)
          this._eval$_value = null;
        else {
          if (J.$eq(t1.get$operator(t1), "|") && !!J.getInterceptor(t2.get$_eval$_value()).$isObservableList)
            this._eval$_subscription = H.interceptedTypeCast(t2.get$_eval$_value(), "$isObservableList").get$listChanges().listen$1(new K.BinaryObserver__updateSelf_closure(this, scope));
          this._eval$_value = f.call$2(t2.get$_eval$_value(), this.right.get$_eval$_value());
        }
      }
    },
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.BinaryOperator];
    },
    $isBinaryOperator: true,
    $isExpression: true
  },
  BinaryObserver__updateSelf_closure: {
    "^": "Closure:115;this_0,scope_1",
    call$1: [function(_) {
      return this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  GetterObserver: {
    "^": "ExpressionObserver;receiver<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$name: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$name(t1);
    },
    _updateSelf$1: function(scope) {
      var receiverValue, mirror, t1, symbol;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      mirror = H.reflect(receiverValue);
      t1 = this._eval$_expr;
      symbol = new H.Symbol0(H.Symbol_validatePublicSymbol(t1.get$name(t1)));
      this._eval$_value = mirror.getField$1(symbol).get$reflectee();
      t1 = J.getInterceptor(receiverValue);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.GetterObserver__updateSelf_closure(this, scope, symbol));
    },
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Getter];
    },
    $isGetter: true,
    $isExpression: true
  },
  GetterObserver__updateSelf_closure: {
    "^": "Closure:115;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.GetterObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 493, [], "call"],
    $isFunction: true
  },
  GetterObserver__updateSelf__closure: {
    "^": "Closure:115;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 285, [], "call"],
    $isFunction: true
  },
  IndexObserver: {
    "^": "ExpressionObserver;receiver<,argument<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var receiverValue, key, t1;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      key = this.argument.get$_eval$_value();
      t1 = J.getInterceptor$asx(receiverValue);
      this._eval$_value = t1.$index(receiverValue, key);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.IndexObserver__updateSelf_closure(this, scope, key));
    },
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Index];
    },
    $isIndex: true,
    $isExpression: true
  },
  IndexObserver__updateSelf_closure: {
    "^": "Closure:115;this_0,scope_1,key_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IndexObserver__updateSelf__closure(this.key_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 493, [], "call"],
    $isFunction: true
  },
  IndexObserver__updateSelf__closure: {
    "^": "Closure:115;key_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isMapChangeRecord && J.$eq(c.key, this.key_3);
    }, "call$1", null, 2, 0, null, 285, [], "call"],
    $isFunction: true
  },
  InvokeObserver: {
    "^": "ExpressionObserver;receiver<,arguments<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$method: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$method(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, args, receiverValue, mirror, symbol;
      t1 = this.arguments;
      t1.toString;
      args = H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new K.InvokeObserver__updateSelf_closure()), [null, null]).toList$0(0);
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      t1 = this._eval$_expr;
      if (t1.get$method(t1) == null)
        this._eval$_value = K._convert(!!J.getInterceptor(receiverValue).$isMethod ? receiverValue.mirror.invoke$3(receiverValue.symbol, args, null).reflectee : H.Primitives_applyFunction(receiverValue, args, P.Function__toMangledNames(null)));
      else {
        mirror = H.reflect(receiverValue);
        symbol = new H.Symbol0(H.Symbol_validatePublicSymbol(t1.get$method(t1)));
        this._eval$_value = mirror.invoke$3(symbol, args, null).reflectee;
        t1 = J.getInterceptor(receiverValue);
        if (!!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure0(this, scope, symbol));
      }
    },
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Invoke];
    },
    $isInvoke: true,
    $isExpression: true
  },
  InvokeObserver__updateSelf_closure: {
    "^": "Closure:115;",
    call$1: [function(a) {
      return a.get$_eval$_value();
    }, "call$1", null, 2, 0, null, 117, [], "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf_closure0: {
    "^": "Closure:488;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 493, [], "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf__closure: {
    "^": "Closure:115;symbol_3",
    call$1: [function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    }, "call$1", null, 2, 0, null, 285, [], "call"],
    $isFunction: true
  },
  InObserver: {
    "^": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var identifier, iterable, t1, t2;
      identifier = this.left;
      iterable = this.right.get$_eval$_value();
      t1 = J.getInterceptor(iterable);
      if (!t1.$isIterable && iterable != null)
        throw H.wrapException(K.EvalException$("right side of 'in' is not an iterator"));
      if (!!t1.$isObservableList)
        this._eval$_subscription = iterable.get$listChanges().listen$1(new K.InObserver__updateSelf_closure(this, scope));
      t1 = J.get$value$x(identifier);
      t2 = iterable != null ? iterable : C.List_empty;
      this._eval$_value = new K.Comprehension(t1, t2);
    },
    accept$1: function(_, v) {
      return v.visitInExpression$1(this);
    },
    $asExpressionObserver: function() {
      return [U.InExpression];
    },
    $isInExpression: true,
    $isExpression: true
  },
  InObserver__updateSelf_closure: {
    "^": "Closure:115;this_0,scope_1",
    call$1: [function(_) {
      return this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  Comprehension: {
    "^": "Object;identifier,iterable",
    $isComprehension: true
  },
  Method: {
    "^": "Object:115;mirror,symbol",
    call$1: [function(arg0) {
      return this.mirror.invoke$3(this.symbol, [arg0], null).reflectee;
    }, "call$1", "get$$call", 2, 0, null, 501, []],
    $isMethod: true,
    $isFunction: true
  },
  EvalException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "EvalException: " + this.message;
    },
    $isEvalException: true,
    static: {EvalException$: function(message) {
        return new K.EvalException(message);
      }}
  }
}],
["polymer_expressions.expression", "package:polymer_expressions/expression.dart", , U, {
  "^": "",
  _listEquals: [function(a, b) {
    var i, t1;
    if (a == null ? b == null : a === b)
      return true;
    if (a == null || b == null)
      return false;
    if (a.length !== b.length)
      return false;
    for (i = 0; i < a.length; ++i) {
      t1 = a[i];
      if (i >= b.length)
        return H.ioore(b, i);
      if (!J.$eq(t1, b[i]))
        return false;
    }
    return true;
  }, "call$2", "_listEquals$closure", 4, 0, null, 117, [], 196, []],
  _hashList: [function(l) {
    l.toString;
    return U._JenkinsSmiHash_finish0(H.IterableMixinWorkaround_fold(l, 0, new U._hashList_closure()));
  }, "call$1", "_hashList$closure", 2, 0, null, 282, []],
  _JenkinsSmiHash_combine1: [function(hash, value) {
    var t1 = J.$add$ns(hash, value);
    if (typeof t1 !== "number")
      return H.iae(t1);
    hash = 536870911 & t1;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  }, "call$2", "_JenkinsSmiHash_combine1$closure", 4, 0, null, 235, [], 30, []],
  _JenkinsSmiHash_finish0: [function(hash) {
    if (typeof hash !== "number")
      return H.iae(hash);
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash = (hash ^ hash >>> 11) >>> 0;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  }, "call$1", "_JenkinsSmiHash_finish0$closure", 2, 0, null, 235, []],
  AstFactory: {
    "^": "Object;",
    index$2: [function(_, e, a) {
      return new U.Index(e, a);
    }, "call$2", "get$index", 4, 0, 502, 21, [], 117, []],
    invoke$3: function(e, m, a) {
      return new U.Invoke(e, m, a);
    }
  },
  Expression: {
    "^": "Object;",
    $isExpression: true
  },
  EmptyExpression: {
    "^": "Expression;",
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $isEmptyExpression: true
  },
  Literal: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    toString$0: function(_) {
      var t1 = this.value;
      return typeof t1 === "string" ? "\"" + H.S(t1) + "\"" : H.S(t1);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = H.checkSubtype(o, "$isLiteral", [H.getTypeArgumentByIndex(this, 0)], "$asLiteral");
      return t1 && J.$eq(J.get$value$x(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isLiteral: true
  },
  MapLiteral: {
    "^": "Expression;entries>",
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    toString$0: function(_) {
      return "{" + H.S(this.entries) + "}";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteral && U._listEquals(t1.get$entries(o), this.entries);
    },
    get$hashCode: function(_) {
      return U._hashList(this.entries);
    },
    $isMapLiteral: true
  },
  MapLiteralEntry: {
    "^": "Expression;key>,entryValue<",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    toString$0: function(_) {
      return H.S(this.key) + ": " + H.S(this.entryValue);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteralEntry && J.$eq(t1.get$key(o), this.key) && J.$eq(o.get$entryValue(), this.entryValue);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.key.value);
      t2 = J.get$hashCode$(this.entryValue);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isMapLiteralEntry: true
  },
  ParenthesizedExpression: {
    "^": "Expression;child",
    accept$1: function(_, v) {
      return v.visitParenthesizedExpression$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.child) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isParenthesizedExpression && J.$eq(o.child, this.child);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.child);
    },
    $isParenthesizedExpression: true
  },
  Identifier: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    toString$0: function(_) {
      return this.value;
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isIdentifier && J.$eq(t1.get$value(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isIdentifier: true
  },
  UnaryOperator: {
    "^": "Expression;operator>,child<",
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    toString$0: function(_) {
      return H.S(this.operator) + " " + H.S(this.child);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isUnaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(o.get$child(), this.child);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.child);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isUnaryOperator: true
  },
  BinaryOperator: {
    "^": "Expression;operator>,left>,right>",
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " " + H.S(this.operator) + " " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isBinaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.left);
      t3 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isBinaryOperator: true
  },
  InExpression: {
    "^": "Expression;left>,right>",
    accept$1: function(_, v) {
      return v.visitInExpression$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " in " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isInExpression && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = this.left;
      t1 = t1.get$hashCode(t1);
      t2 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isInExpression: true
  },
  Index: {
    "^": "Expression;receiver<,argument<",
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "[" + H.S(this.argument) + "]";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndex && J.$eq(o.get$receiver(), this.receiver) && J.$eq(o.get$argument(), this.argument);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.argument);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isIndex: true
  },
  Getter: {
    "^": "Expression;receiver<,name>",
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.name);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isGetter && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$name(o), this.name);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.name);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isGetter: true
  },
  Invoke: {
    "^": "Expression;receiver<,method>,arguments<",
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.method) + "(" + H.S(this.arguments) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isInvoke && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$method(o), this.method) && U._listEquals(o.get$arguments(), this.arguments);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.method);
      t3 = U._hashList(this.arguments);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isInvoke: true
  },
  _hashList_closure: {
    "^": "Closure:296;",
    call$2: [function(h, item) {
      return U._JenkinsSmiHash_combine1(h, J.get$hashCode$(item));
    }, "call$2", null, 4, 0, null, 503, [], 504, [], "call"],
    $isFunction: true
  }
}],
["polymer_expressions.parser", "package:polymer_expressions/parser.dart", , T, {
  "^": "",
  Parser: {
    "^": "Object;_astFactory,_tokenizer,_tokens,_parser$_iterator",
    _advance$2: function(kind, value) {
      var t1;
      if (!(kind != null && !J.$eq(J.get$kind$x(this._parser$_iterator._current), kind)))
        t1 = value != null && !J.$eq(J.get$value$x(this._parser$_iterator._current), value);
      else
        t1 = true;
      if (t1)
        throw H.wrapException(Y.ParseException$("Expected " + H.S(value) + ": " + H.S(this._parser$_iterator._current)));
      this._parser$_iterator.moveNext$0();
    },
    _advance$0: function() {
      return this._advance$2(null, null);
    },
    _parseExpression$0: function() {
      if (this._parser$_iterator._current == null) {
        this._astFactory.toString;
        return C.C_EmptyExpression;
      }
      var expr = this._parseUnary$0();
      return expr == null ? null : this._parsePrecedence$2(expr, 0);
    },
    _parsePrecedence$2: function(left, precedence) {
      var t1, args, indexExpr, right;
      for (; t1 = this._parser$_iterator._current, t1 != null;)
        if (J.$eq(J.get$kind$x(t1), 9))
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            args = this._parseArguments$0();
            this._astFactory.toString;
            left = new U.Invoke(left, null, args);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
            indexExpr = this._parseIndex$0();
            this._astFactory.toString;
            left = new U.Index(left, indexExpr);
          } else
            break;
        else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 3)) {
          this._advance$0();
          left = this._makeInvokeOrGetter$2(left, this._parseUnary$0());
        } else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 10) && J.$eq(J.get$value$x(this._parser$_iterator._current), "in")) {
          if (!J.getInterceptor(left).$isIdentifier)
            H.throwExpression(Y.ParseException$("in... statements must start with an identifier"));
          this._advance$0();
          right = this._parseExpression$0();
          this._astFactory.toString;
          left = new U.InExpression(left, right);
        } else if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 8) && J.$ge$n(this._parser$_iterator._current.get$precedence(), precedence))
          left = this._parseBinary$1(left);
        else
          break;
      return left;
    },
    _makeInvokeOrGetter$2: function(left, right) {
      var t1, t2;
      t1 = J.getInterceptor(right);
      if (!!t1.$isIdentifier) {
        t1 = t1.get$value(right);
        this._astFactory.toString;
        return new U.Getter(left, t1);
      } else if (!!t1.$isInvoke && !!J.getInterceptor(right.get$receiver()).$isIdentifier) {
        t1 = J.get$value$x(right.get$receiver());
        t2 = right.get$arguments();
        this._astFactory.toString;
        return new U.Invoke(left, t1, t2);
      } else
        throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(right)));
    },
    _parseBinary$1: function(left) {
      var op, right, t1;
      op = this._parser$_iterator._current;
      this._advance$0();
      right = this._parseUnary$0();
      while (true) {
        t1 = this._parser$_iterator._current;
        if (t1 != null)
          t1 = (J.$eq(J.get$kind$x(t1), 8) || J.$eq(J.get$kind$x(this._parser$_iterator._current), 3) || J.$eq(J.get$kind$x(this._parser$_iterator._current), 9)) && J.$gt$n(this._parser$_iterator._current.get$precedence(), op.get$precedence());
        else
          t1 = false;
        if (!t1)
          break;
        right = this._parsePrecedence$2(right, this._parser$_iterator._current.get$precedence());
      }
      t1 = J.get$value$x(op);
      this._astFactory.toString;
      return new U.BinaryOperator(t1, left, right);
    },
    _parseUnary$0: function() {
      var value, t1, t2, expr;
      if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 8)) {
        value = J.get$value$x(this._parser$_iterator._current);
        t1 = J.getInterceptor(value);
        if (t1.$eq(value, "+") || t1.$eq(value, "-")) {
          this._advance$0();
          if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 6)) {
            t1 = H.Primitives_parseInt(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
            this._astFactory.toString;
            value = new U.Literal(t1);
            value.$builtinTypeInfo = [null];
            this._advance$0();
            return value;
          } else {
            t1 = this._astFactory;
            if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 7)) {
              t2 = H.Primitives_parseDouble(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
              t1.toString;
              value = new U.Literal(t2);
              value.$builtinTypeInfo = [null];
              this._advance$0();
              return value;
            } else {
              expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
              t1.toString;
              return new U.UnaryOperator(value, expr);
            }
          }
        } else if (t1.$eq(value, "!")) {
          this._advance$0();
          expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
          this._astFactory.toString;
          return new U.UnaryOperator(value, expr);
        }
      }
      return this._parsePrimary$0();
    },
    _parsePrimary$0: function() {
      var keyword, t1, expr;
      switch (J.get$kind$x(this._parser$_iterator._current)) {
        case 10:
          keyword = J.get$value$x(this._parser$_iterator._current);
          t1 = J.getInterceptor(keyword);
          if (t1.$eq(keyword, "this")) {
            this._advance$0();
            this._astFactory.toString;
            return new U.Identifier("this");
          } else if (t1.$eq(keyword, "in"))
            return;
          throw H.wrapException(new P.ArgumentError("unrecognized keyword: " + H.S(keyword)));
        case 2:
          return this._parseInvokeOrIdentifier$0();
        case 1:
          return this._parseString$0();
        case 6:
          return this._parseInteger$0();
        case 7:
          return this._parseDecimal$0();
        case 9:
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            this._advance$0();
            expr = this._parseExpression$0();
            this._advance$2(9, ")");
            this._astFactory.toString;
            return new U.ParenthesizedExpression(expr);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "{"))
            return this._parseMapLiteral$0();
          return;
        default:
          return;
      }
    },
    _parseMapLiteral$0: function() {
      var entries, t1, value;
      entries = [];
      do {
        this._advance$0();
        if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "}"))
          break;
        t1 = J.get$value$x(this._parser$_iterator._current);
        this._astFactory.toString;
        value = new U.Literal(t1);
        value.$builtinTypeInfo = [null];
        this._advance$0();
        this._advance$2(5, ":");
        entries.push(new U.MapLiteralEntry(value, this._parseExpression$0()));
        t1 = this._parser$_iterator._current;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, "}");
      return new U.MapLiteral(entries);
    },
    _parseInvokeOrIdentifier$0: function() {
      var value, identifier, args;
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "true")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(true), [null]);
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "false")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(false), [null]);
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "null")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(null), [null]);
      }
      if (!J.$eq(J.get$kind$x(this._parser$_iterator._current), 2))
        H.throwExpression(Y.ParseException$("expected identifier: " + H.S(this._parser$_iterator._current) + ".value"));
      value = J.get$value$x(this._parser$_iterator._current);
      this._advance$0();
      this._astFactory.toString;
      identifier = new U.Identifier(value);
      args = this._parseArguments$0();
      if (args == null)
        return identifier;
      else
        return new U.Invoke(identifier, null, args);
    },
    _parseArguments$0: function() {
      var t1, args;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.$eq(J.get$kind$x(t1), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
        args = [];
        do {
          this._advance$0();
          if (J.$eq(J.get$kind$x(this._parser$_iterator._current), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), ")"))
            break;
          args.push(this._parseExpression$0());
          t1 = this._parser$_iterator._current;
        } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
        this._advance$2(9, ")");
        return args;
      }
      return;
    },
    _parseIndex$0: function() {
      var t1, expr;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.$eq(J.get$kind$x(t1), 9) && J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
        this._advance$0();
        expr = this._parseExpression$0();
        this._advance$2(9, "]");
        return expr;
      }
      return;
    },
    _parseString$0: function() {
      var t1, value;
      t1 = J.get$value$x(this._parser$_iterator._current);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseInteger$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseInt(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseInteger$0: function() {
      return this._parseInteger$1("");
    },
    _parseDecimal$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseDouble(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseDecimal$0: function() {
      return this._parseDecimal$1("");
    }
  }
}],
["polymer_expressions.src.globals", "package:polymer_expressions/src/globals.dart", , K, {
  "^": "",
  enumerate: [function(iterable) {
    return H.setRuntimeTypeInfo(new K.EnumerateIterable(iterable), [null]);
  }, "call$1", "enumerate$closure", 2, 0, 283, 126, []],
  IndexedValue: {
    "^": "Object;index>-322,value>-505",
    $eq: [function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndexedValue && J.$eq(o.index, this.index) && J.$eq(o.value, this.value);
    }, "call$1", "get$==", 2, 0, 115, 98, [], "=="],
    get$hashCode: [function(_) {
      return J.get$hashCode$(this.value);
    }, null, null, 1, 0, 484, "hashCode"],
    toString$0: [function(_) {
      return "(" + H.S(this.index) + ", " + H.S(this.value) + ")";
    }, "call$0", "get$toString", 0, 0, 308, "toString"],
    $isIndexedValue: true,
    "@": function() {
      return [C.C_Reflectable];
    },
    "<>": [3],
    static: {IndexedValue$: [function(index, value, $V) {
        return H.setRuntimeTypeInfo(new K.IndexedValue(index, value), [$V]);
      }, null, null, 4, 0, function() {
        return H.computeSignature(function(V) {
          return {func: "dynamic__int_V", args: [J.JSInt, V]};
        }, this.$receiver, "IndexedValue");
      }, 15, [], 30, [], "new IndexedValue"]}
  },
  "+IndexedValue": [0],
  EnumerateIterable: {
    "^": "IterableBase;_globals$_iterable",
    get$iterator: function(_) {
      var t1 = new K.EnumerateIterator(J.get$iterator$ax(this._globals$_iterable), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._globals$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._globals$_iterable);
    },
    get$last: function(_) {
      var t1, t2;
      t1 = this._globals$_iterable;
      t2 = J.getInterceptor$asx(t1);
      t1 = new K.IndexedValue(J.$sub$n(t2.get$length(t1), 1), t2.get$last(t1));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    elementAt$1: function(_, index) {
      var t1 = new K.IndexedValue(index, J.elementAt$1$ax(this._globals$_iterable, index));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($V) {
      return [[K.IndexedValue, $V]];
    },
    $asIterable: function($V) {
      return [[K.IndexedValue, $V]];
    }
  },
  EnumerateIterator: {
    "^": "Iterator;_globals$_iterator,_globals$_index,_globals$_current",
    get$current: function() {
      return this._globals$_current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._globals$_iterator;
      if (t1.moveNext$0()) {
        t2 = this._globals$_index;
        this._globals$_index = t2 + 1;
        this._globals$_current = H.setRuntimeTypeInfo(new K.IndexedValue(t2, t1.get$current()), [null]);
        return true;
      }
      this._globals$_current = null;
      return false;
    },
    $asIterator: function($V) {
      return [[K.IndexedValue, $V]];
    }
  }
}],
["polymer_expressions.src.mirrors", "package:polymer_expressions/src/mirrors.dart", , Z, {
  "^": "",
  getMemberMirror: [function(classMirror, $name) {
    var superclass, mirror, t1;
    if (classMirror.get$declarations().__js_mirrors$_source.containsKey$1($name))
      return classMirror.get$declarations().__js_mirrors$_source.$index(0, $name);
    superclass = classMirror.get$superclass();
    if (superclass != null && !J.$eq(J.get$qualifiedName$x(superclass), C.Symbol_46c)) {
      mirror = Z.getMemberMirror(classMirror.get$superclass(), $name);
      if (mirror != null)
        return mirror;
    }
    for (t1 = J.get$iterator$ax(classMirror.get$superinterfaces()); t1.moveNext$0();) {
      mirror = Z.getMemberMirror(t1._current, $name);
      if (mirror != null)
        return mirror;
    }
    return;
  }, "call$2", "getMemberMirror$closure", 4, 0, null, 284, [], 12, []]
}],
["polymer_expressions.tokenizer", "package:polymer_expressions/tokenizer.dart", , Y, {
  "^": "",
  escape: [function(c) {
    switch (c) {
      case 102:
        return 12;
      case 110:
        return 10;
      case 114:
        return 13;
      case 116:
        return 9;
      case 118:
        return 11;
      default:
        return c;
    }
  }, "call$1", "escape$closure", 2, 0, null, 285, []],
  Token: {
    "^": "Object;kind>,value>,precedence<",
    toString$0: function(_) {
      return "(" + this.kind + ", '" + this.value + "')";
    },
    $isToken: true
  },
  Tokenizer: {
    "^": "Object;_tokenizer$_tokens,_sb,_tokenizer$_iterator,_tokenizer$_next",
    tokenize$0: function() {
      var t1, t2, t3, t4, startChar, op2, op, charCodes, value;
      t1 = this._tokenizer$_iterator;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      for (t2 = this._tokenizer$_tokens; t3 = this._tokenizer$_next, t3 != null;)
        if (t3 === 32 || t3 === 9 || t3 === 160)
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        else if (t3 === 34 || t3 === 39)
          this.tokenizeString$0();
        else {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(97 <= t3 && t3 <= 122))
            t4 = 65 <= t3 && t3 <= 90 || t3 === 95 || t3 === 36 || t3 > 127;
          else
            t4 = true;
          if (t4)
            this.tokenizeIdentifierOrKeyword$0();
          else if (48 <= t3 && t3 <= 57)
            this.tokenizeNumber$0();
          else if (t3 === 46) {
            t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
            this._tokenizer$_next = t3;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (48 <= t3 && t3 <= 57)
              this.tokenizeFraction$0();
            else
              t2.push(new Y.Token(3, ".", 11));
          } else if (t3 === 44) {
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
            t2.push(new Y.Token(4, ",", 0));
          } else if (t3 === 58) {
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
            t2.push(new Y.Token(5, ":", 0));
          } else if (C.JSArray_methods.contains$1(C.List_UiL, t3)) {
            startChar = this._tokenizer$_next;
            t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
            this._tokenizer$_next = t3;
            if (C.JSArray_methods.contains$1(C.List_UiL, t3)) {
              t3 = this._tokenizer$_next;
              op2 = H.Primitives_stringFromCharCodes([startChar, t3]);
              if (C.JSArray_methods.contains$1(C.List_Ynd, op2)) {
                this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
                op = op2;
              } else {
                charCodes = P.List_List$filled(1, startChar, J.JSInt);
                op = H.Primitives_stringFromCharCodes(charCodes);
              }
            } else {
              charCodes = P.List_List$filled(1, startChar, J.JSInt);
              op = H.Primitives_stringFromCharCodes(charCodes);
            }
            t2.push(new Y.Token(8, op, C.Map_FKtZ4.$index(0, op)));
          } else if (C.JSArray_methods.contains$1(C.List_ww8, this._tokenizer$_next)) {
            charCodes = P.List_List$filled(1, this._tokenizer$_next, J.JSInt);
            value = H.Primitives_stringFromCharCodes(charCodes);
            t2.push(new Y.Token(9, value, C.Map_FKtZ4.$index(0, value)));
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          } else
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        }
      return t2;
    },
    tokenizeString$0: function() {
      var quoteChar, t1, t2, t3, charCodes;
      quoteChar = this._tokenizer$_next;
      t1 = this._tokenizer$_iterator;
      t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
      this._tokenizer$_next = t2;
      for (t3 = this._sb; t2 == null ? quoteChar != null : t2 !== quoteChar;) {
        if (t2 == null)
          throw H.wrapException(Y.ParseException$("unterminated string"));
        if (t2 === 92) {
          t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
          this._tokenizer$_next = t2;
          if (t2 == null)
            throw H.wrapException(Y.ParseException$("unterminated string"));
          charCodes = P.List_List$filled(1, Y.escape(t2), J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t3._contents = t3._contents + t2;
        } else {
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t3._contents = t3._contents + t2;
        }
        t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t2;
      }
      this._tokenizer$_tokens.push(new Y.Token(1, t3._contents, 0));
      t3._contents = "";
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    },
    tokenizeIdentifierOrKeyword$0: function() {
      var t1, t2, t3, t4, charCodes, value;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(97 <= t3 && t3 <= 122))
            if (!(65 <= t3 && t3 <= 90))
              t4 = 48 <= t3 && t3 <= 57 || t3 === 95 || t3 === 36 || t3 > 127;
            else
              t4 = true;
          else
            t4 = true;
        } else
          t4 = false;
        if (!t4)
          break;
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      value = t2._contents;
      t1 = this._tokenizer$_tokens;
      if (C.JSArray_methods.contains$1(C.List_in_this, value))
        t1.push(new Y.Token(10, value, 0));
      else
        t1.push(new Y.Token(2, value, 0));
      t2._contents = "";
    },
    tokenizeNumber$0: function() {
      var t1, t2, t3, t4, charCodes;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t2._contents = t2._contents + t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      if (t3 === 46) {
        t1 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t1;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (48 <= t1 && t1 <= 57)
          this.tokenizeFraction$0();
        else
          this._tokenizer$_tokens.push(new Y.Token(3, ".", 11));
      } else {
        this._tokenizer$_tokens.push(new Y.Token(6, t2._contents, 0));
        t2._contents = "";
      }
    },
    tokenizeFraction$0: function() {
      var t1, t2, t3, t4, charCodes;
      t1 = this._sb;
      t1.write$1(P.String_String$fromCharCode(46));
      t2 = this._tokenizer$_iterator;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        charCodes = P.List_List$filled(1, t3, J.JSInt);
        t3 = H.Primitives_stringFromCharCodes(charCodes);
        t1._contents = t1._contents + t3;
        this._tokenizer$_next = t2.moveNext$0() ? t2._currentCodePoint : null;
      }
      this._tokenizer$_tokens.push(new Y.Token(7, t1._contents, 0));
      t1._contents = "";
    }
  },
  ParseException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "ParseException: " + this.message;
    },
    static: {ParseException$: function(message) {
        return new Y.ParseException(message);
      }}
  }
}],
["polymer_expressions.visitor", "package:polymer_expressions/visitor.dart", , S, {
  "^": "",
  Visitor: {
    "^": "Object;",
    visit$1: [function(s) {
      return J.accept$1$x(s, this);
    }, "call$1", "get$visit", 2, 0, 506, 93, []]
  },
  RecursiveVisitor: {
    "^": "Visitor;",
    visitEmptyExpression$1: function(e) {
      return this.visitExpression$1(e);
    },
    visitParenthesizedExpression$1: function(e) {
      e.child.accept$1(0, this);
      this.visitExpression$1(e);
    },
    visitGetter$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      this.visitExpression$1(i);
    },
    visitIndex$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      J.accept$1$x(i.get$argument(), this);
      this.visitExpression$1(i);
    },
    visitInvoke$1: function(i) {
      var t1;
      J.accept$1$x(i.get$receiver(), this);
      t1 = i.get$arguments();
      if (t1 != null)
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.accept$1$x(t1._current, this);
      this.visitExpression$1(i);
    },
    visitLiteral$1: function(l) {
      return this.visitExpression$1(l);
    },
    visitMapLiteral$1: function(l) {
      var t1;
      for (t1 = l.get$entries(l), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.accept$1$x(t1._current, this);
      this.visitExpression$1(l);
    },
    visitMapLiteralEntry$1: function(e) {
      J.accept$1$x(e.get$key(e), this);
      J.accept$1$x(e.get$entryValue(), this);
      this.visitExpression$1(e);
    },
    visitIdentifier$1: function(i) {
      return this.visitExpression$1(i);
    },
    visitBinaryOperator$1: function(o) {
      J.accept$1$x(o.get$left(o), this);
      J.accept$1$x(o.get$right(o), this);
      this.visitExpression$1(o);
    },
    visitUnaryOperator$1: function(o) {
      J.accept$1$x(o.get$child(), this);
      this.visitExpression$1(o);
    },
    visitInExpression$1: function(c) {
      J.accept$1$x(c.get$left(c), this);
      J.accept$1$x(c.get$right(c), this);
      this.visitExpression$1(c);
    }
  }
}],
["response_viewer_element", "package:observatory/src/elements/response_viewer.dart", , Q, {
  "^": "",
  ResponseViewerElement: {
    "^": ["ObservatoryElement_ChangeNotifier29;_response_viewer_element$__$app%-472,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$app: [function(receiver) {
      return receiver._response_viewer_element$__$app;
    }, null, null, 1, 0, 473, "app", 304, 307],
    set$app: [function(receiver, value) {
      receiver._response_viewer_element$__$app = this.notifyPropertyChange$3(receiver, C.Symbol_app, receiver._response_viewer_element$__$app, value);
    }, null, null, 3, 0, 474, 30, [], "app", 304],
    "@": function() {
      return [C.CustomTag_CNd];
    },
    static: {ResponseViewerElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ResponseViewerElement_methods.Element$created$0(receiver);
        C.ResponseViewerElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ResponseViewerElement$created"]}
  },
  "+ResponseViewerElement": [507],
  ObservatoryElement_ChangeNotifier29: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["script_inset_element", "package:observatory/src/elements/script_inset.dart", , T, {
  "^": "",
  ScriptInsetElement: {
    "^": ["ObservatoryElement_ChangeNotifier30;_script_inset_element$__$script%-508,_script_inset_element$__$pos%-322,_script_inset_element$__$endPos%-322,_script_inset_element$__$coverage%-300,_script_inset_element$__$lines%-509,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$script: [function(receiver) {
      return receiver._script_inset_element$__$script;
    }, null, null, 1, 0, 510, "script", 304, 307],
    set$script: [function(receiver, value) {
      receiver._script_inset_element$__$script = this.notifyPropertyChange$3(receiver, C.Symbol_script, receiver._script_inset_element$__$script, value);
    }, null, null, 3, 0, 511, 30, [], "script", 304],
    get$pos: [function(receiver) {
      return receiver._script_inset_element$__$pos;
    }, null, null, 1, 0, 484, "pos", 304, 307],
    set$pos: [function(receiver, value) {
      receiver._script_inset_element$__$pos = this.notifyPropertyChange$3(receiver, C.Symbol_pos, receiver._script_inset_element$__$pos, value);
    }, null, null, 3, 0, 359, 30, [], "pos", 304],
    get$endPos: [function(receiver) {
      return receiver._script_inset_element$__$endPos;
    }, null, null, 1, 0, 484, "endPos", 304, 307],
    set$endPos: [function(receiver, value) {
      receiver._script_inset_element$__$endPos = this.notifyPropertyChange$3(receiver, C.Symbol_endPos, receiver._script_inset_element$__$endPos, value);
    }, null, null, 3, 0, 359, 30, [], "endPos", 304],
    get$coverage: [function(receiver) {
      return receiver._script_inset_element$__$coverage;
    }, null, null, 1, 0, 303, "coverage", 304, 307],
    set$coverage: [function(receiver, value) {
      receiver._script_inset_element$__$coverage = this.notifyPropertyChange$3(receiver, C.Symbol_coverage, receiver._script_inset_element$__$coverage, value);
    }, null, null, 3, 0, 306, 30, [], "coverage", 304],
    get$lines: [function(receiver) {
      return receiver._script_inset_element$__$lines;
    }, null, null, 1, 0, 512, "lines", 304, 305],
    set$lines: [function(receiver, value) {
      receiver._script_inset_element$__$lines = this.notifyPropertyChange$3(receiver, C.Symbol_lines, receiver._script_inset_element$__$lines, value);
    }, null, null, 3, 0, 513, 30, [], "lines", 304],
    scriptChanged$1: [function(receiver, oldValue) {
      this._script_inset_element$_updateProperties$0(receiver);
      this.notifyPropertyChange$3(receiver, C.Symbol_hitStyle, 0, 1);
    }, "call$1", "get$scriptChanged", 2, 0, 166, 239, [], "scriptChanged"],
    posChanged$1: [function(receiver, oldValue) {
      this._script_inset_element$_updateProperties$0(receiver);
    }, "call$1", "get$posChanged", 2, 0, 166, 239, [], "posChanged"],
    coverageChanged$1: [function(receiver, oldValue) {
      this.notifyPropertyChange$3(receiver, C.Symbol_lines, 0, 1);
      this.notifyPropertyChange$3(receiver, C.Symbol_hitStyle, 0, 1);
    }, "call$1", "get$coverageChanged", 2, 0, 115, 239, [], "coverageChanged"],
    hitStyle$1: [function(receiver, line) {
      var t1, hit;
      t1 = receiver._script_inset_element$__$script;
      if (t1 == null || receiver._script_inset_element$__$coverage !== true)
        return "min-width:32px;";
      hit = J.$index$asx(t1.get$hits(), line.get$line());
      if (hit == null)
        return "min-width:32px;";
      if (J.$eq(hit, 0))
        return "min-width:32px;background-color:red";
      return "min-width:32px;background-color:green";
    }, "call$1", "get$hitStyle", 2, 0, 514, 189, [], "hitStyle", 305],
    _script_inset_element$_updateProperties$0: [function(receiver) {
      var startLineNumber, t1, t2, endLineNumber, i;
      if (J.get$loaded$x(receiver._script_inset_element$__$script) !== true) {
        J.load$0$x(receiver._script_inset_element$__$script).then$1(new T.ScriptInsetElement__updateProperties_closure(receiver));
        return;
      }
      this.notifyPropertyChange$3(receiver, C.Symbol_lines, 0, 1);
      J.clear$0$ax(receiver._script_inset_element$__$lines);
      startLineNumber = receiver._script_inset_element$__$script.tokenToLine$1(receiver._script_inset_element$__$pos);
      if (startLineNumber != null) {
        t1 = receiver._script_inset_element$__$endPos;
        t2 = receiver._script_inset_element$__$script;
        if (t1 == null)
          J.add$1$ax(receiver._script_inset_element$__$lines, J.$index$asx(J.get$lines$x(t2), J.$sub$n(startLineNumber, 1)));
        else {
          endLineNumber = t2.tokenToLine$1(t1);
          for (i = startLineNumber; t1 = J.getInterceptor$n(i), t1.$le(i, endLineNumber); i = t1.$add(i, 1))
            J.add$1$ax(receiver._script_inset_element$__$lines, J.$index$asx(J.get$lines$x(receiver._script_inset_element$__$script), t1.$sub(i, 1)));
        }
      }
    }, "call$0", "get$_script_inset_element$_updateProperties", 0, 0, 125, "_updateProperties"],
    "@": function() {
      return [C.CustomTag_Cjg];
    },
    static: {"^": "ScriptInsetElement_hitStyleNone<-84,ScriptInsetElement_hitStyleExecuted<-84,ScriptInsetElement_hitStyleNotExecuted<-84", ScriptInsetElement$created: [function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = R._toObservableDeep([]);
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t4 = J.JSString;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver._script_inset_element$__$coverage = false;
        receiver._script_inset_element$__$lines = t1;
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.ScriptInsetElement_methods.Element$created$0(receiver);
        C.ScriptInsetElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ScriptInsetElement$created"]}
  },
  "+ScriptInsetElement": [515],
  ObservatoryElement_ChangeNotifier30: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  },
  ScriptInsetElement__updateProperties_closure: {
    "^": "Closure:115;this_0-84",
    call$1: [function(_) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.getInterceptor$x(t1);
      if (J.get$loaded$x(t2.get$_script_inset_element$__$script(t1)) === true)
        t2._script_inset_element$_updateProperties$0(t1);
    }, "call$1", null, 2, 0, 115, 116, [], "call"],
    $isFunction: true
  },
  "+ ScriptInsetElement__updateProperties_closure": [311]
}],
["script_ref_element", "package:observatory/src/elements/script_ref.dart", , A, {
  "^": "",
  ScriptRefElement: {
    "^": ["ServiceRefElement_ChangeNotifier0;_script_ref_element$__$pos%-322,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$pos: [function(receiver) {
      return receiver._script_ref_element$__$pos;
    }, null, null, 1, 0, 484, "pos", 304, 307],
    set$pos: [function(receiver, value) {
      receiver._script_ref_element$__$pos = this.notifyPropertyChange$3(receiver, C.Symbol_pos, receiver._script_ref_element$__$pos, value);
    }, null, null, 3, 0, 359, 30, [], "pos", 304],
    get$hoverText: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 == null)
        return Q.ServiceRefElement.prototype.get$hoverText.call(this, receiver);
      return t1.get$vmName();
    }, null, null, 1, 0, 308, "hoverText"],
    posChanged$1: [function(receiver, oldValue) {
      this._updateProperties$1(receiver, null);
    }, "call$1", "get$posChanged", 2, 0, 166, 239, [], "posChanged"],
    _updateProperties$1: [function(receiver, _) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 != null && J.get$loaded$x(t1) === true) {
        this.notifyPropertyChange$3(receiver, C.Symbol_name, 0, 1);
        this.notifyPropertyChange$3(receiver, C.Symbol_url, 0, 1);
      }
    }, "call$1", "get$_updateProperties", 2, 0, 166, 116, [], "_updateProperties"],
    get$name: [function(receiver) {
      var t1, script;
      if (receiver._service_ref_element$__$ref == null)
        return Q.ServiceRefElement.prototype.get$name.call(this, receiver);
      if (J.$ge$n(receiver._script_ref_element$__$pos, 0)) {
        t1 = J.get$loaded$x(receiver._service_ref_element$__$ref);
        script = receiver._service_ref_element$__$ref;
        if (t1 === true)
          return H.S(Q.ServiceRefElement.prototype.get$name.call(this, receiver)) + ":" + H.S(script.tokenToLine$1(receiver._script_ref_element$__$pos));
        else
          J.load$0$x(script).then$1(this.get$_updateProperties(receiver));
      }
      return Q.ServiceRefElement.prototype.get$name.call(this, receiver);
    }, null, null, 1, 0, 308, "name"],
    get$url: [function(receiver) {
      var t1, script;
      if (receiver._service_ref_element$__$ref == null)
        return Q.ServiceRefElement.prototype.get$url.call(this, receiver);
      if (J.$ge$n(receiver._script_ref_element$__$pos, 0)) {
        t1 = J.get$loaded$x(receiver._service_ref_element$__$ref);
        script = receiver._service_ref_element$__$ref;
        if (t1 === true)
          return Q.ServiceRefElement.prototype.get$url.call(this, receiver) + "#line=" + H.S(script.tokenToLine$1(receiver._script_ref_element$__$pos));
        else
          J.load$0$x(script).then$1(this.get$_updateProperties(receiver));
      }
      return Q.ServiceRefElement.prototype.get$url.call(this, receiver);
    }, null, null, 1, 0, 308, "url"],
    "@": function() {
      return [C.CustomTag_WIq];
    },
    static: {ScriptRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._script_ref_element$__$pos = -1;
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ScriptRefElement_methods.Element$created$0(receiver);
        C.ScriptRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ScriptRefElement$created"]}
  },
  "+ScriptRefElement": [516],
  ServiceRefElement_ChangeNotifier0: {
    "^": "ServiceRefElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["script_view_element", "package:observatory/src/elements/script_view.dart", , U, {
  "^": "",
  ScriptViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier31;_script_view_element$__$script%-508,_script_view_element$__$showCoverage%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$script: [function(receiver) {
      return receiver._script_view_element$__$script;
    }, null, null, 1, 0, 510, "script", 304, 307],
    set$script: [function(receiver, value) {
      receiver._script_view_element$__$script = this.notifyPropertyChange$3(receiver, C.Symbol_script, receiver._script_view_element$__$script, value);
    }, null, null, 3, 0, 511, 30, [], "script", 304],
    get$showCoverage: [function(receiver) {
      return receiver._script_view_element$__$showCoverage;
    }, null, null, 1, 0, 303, "showCoverage", 304, 307],
    set$showCoverage: [function(receiver, value) {
      receiver._script_view_element$__$showCoverage = this.notifyPropertyChange$3(receiver, C.Symbol_showCoverage, receiver._script_view_element$__$showCoverage, value);
    }, null, null, 3, 0, 306, 30, [], "showCoverage", 304],
    enteredView$0: [function(receiver) {
      var t1;
      Z.ObservatoryElement.prototype.enteredView$0.call(this, receiver);
      t1 = receiver._script_view_element$__$script;
      if (t1 == null)
        return;
      J.load$0$x(t1);
    }, "call$0", "get$enteredView", 0, 0, 125, "enteredView"],
    showCoverageChanged$1: [function(receiver, oldValue) {
      J.set$coverage$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#scriptInset"), receiver._script_view_element$__$showCoverage);
    }, "call$1", "get$showCoverageChanged", 2, 0, 115, 239, [], "showCoverageChanged"],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._script_view_element$__$script).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    refreshCoverage$1: [function(receiver, done) {
      J.refreshCoverage$0$x(J.get$isolate$x(receiver._script_view_element$__$script)).whenComplete$1(done);
    }, "call$1", "get$refreshCoverage", 2, 0, 166, 335, [], "refreshCoverage"],
    "@": function() {
      return [C.CustomTag_6xV];
    },
    static: {ScriptViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._script_view_element$__$showCoverage = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ScriptViewElement_methods.Element$created$0(receiver);
        C.ScriptViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ScriptViewElement$created"]}
  },
  "+ScriptViewElement": [517],
  ObservatoryElement_ChangeNotifier31: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["service", "package:observatory/service.dart", , D, {
  "^": "",
  ServiceObject_ServiceObject$_fromMap: function(owner, map) {
    var t1, type, t2, t3, t4, t5, t6, obj;
    if (map == null)
      return;
    t1 = J.getInterceptor$asx(map);
    t1 = t1.$index(map, "id") != null && t1.$index(map, "type") != null;
    if (!t1)
      N.Logger_Logger("").severe$1("Malformed service object: " + H.S(map));
    type = J.$index$asx(map, "type");
    t1 = J.getInterceptor$s(type);
    switch (t1.startsWith$1(type, "@") ? t1.substring$1(type, 1) : type) {
      case "Code":
        t1 = [];
        t1.$builtinTypeInfo = [D.CodeCallCount];
        t2 = [];
        t2.$builtinTypeInfo = [D.CodeCallCount];
        t3 = D.CodeInstruction;
        t4 = [];
        t4.$builtinTypeInfo = [t3];
        t4 = new Q.ObservableList(null, null, t4, null, null);
        t4.$builtinTypeInfo = [t3];
        t3 = J.JSInt;
        t5 = D.CodeTick;
        t6 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t5), null, null);
        t6.$builtinTypeInfo = [t3, t5];
        obj = new D.Code(null, 0, 0, 0, 0, 0, t1, t2, t4, t6, "", "", null, null, null, false, null, null, false, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "Error":
        obj = new D.DartError(null, null, null, null, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "Isolate":
        t1 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, null, null), null, null);
        t1.$builtinTypeInfo = [null, null];
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.ServiceObject);
        t3 = [];
        t3.$builtinTypeInfo = [J.JSString];
        t4 = [];
        t4.$builtinTypeInfo = [D.TagProfileSnapshot];
        t5 = D.Library;
        t6 = [];
        t6.$builtinTypeInfo = [t5];
        t6 = new Q.ObservableList(null, null, t6, null, null);
        t6.$builtinTypeInfo = [t5];
        t5 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, J.JSDouble);
        t5 = R._toObservableDeep(t5);
        obj = new D.Isolate(t1, null, false, false, true, t2, new D.TagProfile(t3, t4, null, null, 20, 0), null, t6, null, null, null, null, null, t5, 0, 0, 0, 0, null, null, null, null, null, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "Library":
        t1 = D.Library;
        t2 = [];
        t2.$builtinTypeInfo = [t1];
        t2 = new Q.ObservableList(null, null, t2, null, null);
        t2.$builtinTypeInfo = [t1];
        t1 = D.Script;
        t3 = [];
        t3.$builtinTypeInfo = [t1];
        t3 = new Q.ObservableList(null, null, t3, null, null);
        t3.$builtinTypeInfo = [t1];
        t1 = D.ServiceMap;
        t4 = [];
        t4.$builtinTypeInfo = [t1];
        t4 = new Q.ObservableList(null, null, t4, null, null);
        t4.$builtinTypeInfo = [t1];
        t1 = D.ServiceMap;
        t5 = [];
        t5.$builtinTypeInfo = [t1];
        t5 = new Q.ObservableList(null, null, t5, null, null);
        t5.$builtinTypeInfo = [t1];
        t1 = D.ServiceMap;
        t6 = [];
        t6.$builtinTypeInfo = [t1];
        t6 = new Q.ObservableList(null, null, t6, null, null);
        t6.$builtinTypeInfo = [t1];
        obj = new D.Library(null, t2, t3, t4, t5, t6, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "ServiceError":
        obj = new D.ServiceError(null, null, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "ServiceException":
        obj = new D.ServiceException(null, null, null, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      case "Script":
        t1 = D.ScriptLine;
        t2 = [];
        t2.$builtinTypeInfo = [t1];
        t2 = new Q.ObservableList(null, null, t2, null, null);
        t2.$builtinTypeInfo = [t1];
        t1 = J.JSInt;
        t3 = J.JSInt;
        t4 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, t1, t3), null, null);
        t4.$builtinTypeInfo = [t1, t3];
        obj = new D.Script(t2, t4, null, null, null, null, null, null, null, null, null, owner, null, null, false, null, null, null, null, null);
        break;
      default:
        t1 = new V.ObservableMap(P.HashMap_HashMap(null, null, null, null, null), null, null);
        t1.$builtinTypeInfo = [null, null];
        obj = new D.ServiceMap(t1, owner, null, null, false, null, null, null, null, null);
    }
    obj.update$1(map);
    return obj;
  },
  _isServiceMap: [function(m) {
    var t1;
    if (m != null) {
      t1 = J.getInterceptor$asx(m);
      t1 = t1.$index(m, "id") != null && t1.$index(m, "type") != null;
    } else
      t1 = false;
    return t1;
  }, "call$1", "_isServiceMap$closure", 2, 0, null, 199, []],
  _upgradeCollection: [function(collection, owner) {
    var t1 = J.getInterceptor(collection);
    if (!!t1.$isServiceMap)
      return;
    if (!!t1.$isObservableMap)
      D._upgradeObservableMap(collection, owner);
    else if (!!t1.$isObservableList)
      D._upgradeObservableList(collection, owner);
  }, "call$2", "_upgradeCollection$closure", 4, 0, null, 286, [], 154, []],
  _upgradeObservableMap: [function(map, owner) {
    map.forEach$1(0, new D._upgradeObservableMap_closure(map, owner));
  }, "call$2", "_upgradeObservableMap$closure", 4, 0, null, 160, [], 154, []],
  _upgradeObservableList: [function(list, owner) {
    var t1, i, v, t2, t3, t4;
    for (t1 = list._list, i = 0; i < t1.length; ++i) {
      v = t1[i];
      t2 = J.getInterceptor(v);
      t3 = !!t2.$isObservableMap;
      if (t3)
        t4 = t2.$index(v, "id") != null && t2.$index(v, "type") != null;
      else
        t4 = false;
      if (t4)
        list.$indexSet(0, i, owner.getFromMap$1(v));
      else if (!!t2.$isObservableList)
        D._upgradeObservableList(v, owner);
      else if (t3)
        D._upgradeObservableMap(v, owner);
    }
  }, "call$2", "_upgradeObservableList$closure", 4, 0, null, 75, [], 154, []],
  ServiceObject: {
    "^": "ChangeNotifier;_service$__$name@,_service$__$vmName@",
    get$owner: [function() {
      return this._service$_owner;
    }, null, null, 1, 0, 518, "owner", 304],
    get$vm: [function(_) {
      var t1 = this._service$_owner;
      return t1.get$vm(t1);
    }, null, null, 1, 0, 519, "vm", 304],
    get$isolate: [function(_) {
      var t1 = this._service$_owner;
      return t1.get$isolate(t1);
    }, null, null, 1, 0, 314, "isolate", 304],
    get$id: [function(_) {
      return this._service$_id;
    }, null, null, 1, 0, 308, "id", 304],
    get$serviceType: [function() {
      return this._serviceType;
    }, null, null, 1, 0, 308, "serviceType", 304],
    get$link: [function(_) {
      var t1, t2;
      t1 = this.get$isolate(this);
      t2 = this._service$_id;
      return H.S(t1._service$_id) + "/" + H.S(t2);
    }, null, null, 1, 0, 308, "link", 304],
    get$hashLink: [function() {
      return "#/" + H.S(this.get$link(this));
    }, null, null, 1, 0, 308, "hashLink", 304],
    set$hashLink: [function(o) {
    }, null, null, 3, 0, 115, 98, [], "hashLink", 304],
    get$loaded: function(_) {
      return this._loaded;
    },
    get$canCache: function() {
      return false;
    },
    get$immutable: function() {
      return false;
    },
    get$name: [function(_) {
      return this.get$_service$__$name();
    }, null, null, 1, 0, 308, "name", 304, 305],
    set$name: [function(_, value) {
      this.set$_service$__$name(this.notifyPropertyChange$3(this, C.Symbol_name, this.get$_service$__$name(), value));
    }, null, null, 3, 0, 32, 30, [], "name", 304],
    get$vmName: [function() {
      return this.get$_service$__$vmName();
    }, null, null, 1, 0, 308, "vmName", 304, 305],
    set$vmName: [function(value) {
      this.set$_service$__$vmName(this.notifyPropertyChange$3(this, C.Symbol_vmName, this.get$_service$__$vmName(), value));
    }, null, null, 3, 0, 32, 30, [], "vmName", 304],
    load$0: function(_) {
      if (this._loaded)
        return P._Future$immediate(this, null);
      return this.reload$0(0);
    },
    reload$0: function(_) {
      var t1;
      if (J.$eq(this._service$_id, ""))
        return P._Future$immediate(this, null);
      if (this._loaded && this.get$immutable())
        return P._Future$immediate(this, null);
      t1 = this._inProgressReload;
      if (t1 == null) {
        t1 = this.get$vm(this).getAsMap$1(this.get$link(this)).then$1(new D.ServiceObject_reload_closure(this)).whenComplete$1(new D.ServiceObject_reload_closure0(this));
        this._inProgressReload = t1;
      }
      return t1;
    },
    update$1: function(map) {
      var t1, mapIsRef, mapType, t2;
      t1 = J.getInterceptor$asx(map);
      mapIsRef = J.startsWith$1$s(t1.$index(map, "type"), "@");
      mapType = t1.$index(map, "type");
      t2 = J.getInterceptor$s(mapType);
      if (t2.startsWith$1(mapType, "@"))
        mapType = t2.substring$1(mapType, 1);
      t2 = this._service$_id;
      if (t2 != null && !J.$eq(t2, t1.$index(map, "id")))
        ;
      this._service$_id = t1.$index(map, "id");
      this._serviceType = mapType;
      this._service$_update$2(0, map, mapIsRef);
    },
    $isServiceObject: true
  },
  ServiceObject_reload_closure: {
    "^": "Closure:451;this_0",
    call$1: [function(map) {
      var mapType, t1;
      mapType = J.$index$asx(map, "type");
      t1 = J.getInterceptor$s(mapType);
      if (t1.startsWith$1(mapType, "@"))
        mapType = t1.substring$1(mapType, 1);
      t1 = this.this_0;
      if (!J.$eq(mapType, t1._serviceType))
        return D.ServiceObject_ServiceObject$_fromMap(t1._service$_owner, map);
      t1.update$1(map);
      return t1;
    }, "call$1", null, 2, 0, null, 160, [], "call"],
    $isFunction: true
  },
  ServiceObject_reload_closure0: {
    "^": "Closure:114;this_1",
    call$0: [function() {
      this.this_1._inProgressReload = null;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  ServiceObjectOwner: {
    "^": "ServiceObject;"
  },
  VM: {
    "^": "ServiceObjectOwner_ChangeNotifier;exceptions<,errors<",
    get$vm: [function(_) {
      return this;
    }, null, null, 1, 0, 519, "vm", 304],
    get$isolate: [function(_) {
      return;
    }, null, null, 1, 0, 314, "isolate", 304],
    get$isolates: [function() {
      var t1 = this._isolateCache;
      return t1.get$values(t1);
    }, null, null, 1, 0, 520, "isolates", 304],
    get$link: [function(_) {
      return H.S(this._service$_id);
    }, null, null, 1, 0, 308, "link", 304],
    get$version: [function(_) {
      return this._service$__$version;
    }, null, null, 1, 0, 308, "version", 304, 305],
    set$version: [function(_, value) {
      this._service$__$version = F.notifyPropertyChangeHelper(this, C.Symbol_version, this._service$__$version, value);
    }, null, null, 3, 0, 32, 30, [], "version", 304],
    get$architecture: [function() {
      return this._service$__$architecture;
    }, null, null, 1, 0, 308, "architecture", 304, 305],
    set$architecture: [function(value) {
      this._service$__$architecture = F.notifyPropertyChangeHelper(this, C.Symbol_architecture, this._service$__$architecture, value);
    }, null, null, 3, 0, 32, 30, [], "architecture", 304],
    get$uptime: [function() {
      return this._service$__$uptime;
    }, null, null, 1, 0, 521, "uptime", 304, 305],
    set$uptime: [function(value) {
      this._service$__$uptime = F.notifyPropertyChangeHelper(this, C.Symbol_uptime, this._service$__$uptime, value);
    }, null, null, 3, 0, 522, 30, [], "uptime", 304],
    get$assertsEnabled: [function() {
      return this._service$__$assertsEnabled;
    }, null, null, 1, 0, 303, "assertsEnabled", 304, 305],
    set$assertsEnabled: [function(value) {
      this._service$__$assertsEnabled = F.notifyPropertyChangeHelper(this, C.Symbol_assertsEnabled, this._service$__$assertsEnabled, value);
    }, null, null, 3, 0, 306, 30, [], "assertsEnabled", 304],
    get$typeChecksEnabled: [function() {
      return this._service$__$typeChecksEnabled;
    }, null, null, 1, 0, 303, "typeChecksEnabled", 304, 305],
    set$typeChecksEnabled: [function(value) {
      this._service$__$typeChecksEnabled = F.notifyPropertyChangeHelper(this, C.Symbol_typeChecksEnabled, this._service$__$typeChecksEnabled, value);
    }, null, null, 3, 0, 306, 30, [], "typeChecksEnabled", 304],
    _parseObjectId$1: function(id) {
      var m, t1, t2, t3;
      m = $.get$VM__currentObjectMatcher().matchAsPrefix$1(0, id);
      if (m == null)
        return;
      t1 = m._match;
      t2 = t1.input;
      t3 = t1.index;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return C.JSString_methods.substring$1(t2, t3 + t1);
    },
    _parseIsolateId$1: function(id) {
      var m, t1, t2;
      m = $.get$VM__currentIsolateMatcher().matchAsPrefix$1(0, id);
      if (m == null)
        return "";
      t1 = m._match;
      t2 = t1.index;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = J.get$length$asx(t1[0]);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return J.substring$2$s(id, 0, t2 + t1);
    },
    getFromMap$1: function(map) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    _getIsolate$1: function(isolateId) {
      var isolate;
      if (isolateId === "")
        return P._Future$immediate(null, null);
      isolate = this._isolateCache.$index(0, isolateId);
      if (isolate != null)
        return P._Future$immediate(isolate, null);
      return this.reload$0(0).then$1(new D.VM__getIsolate_closure(this, isolateId));
    },
    get$1: function(id) {
      var t1, parts, isolateId, objectId, obj;
      t1 = {};
      t1.id_0 = id;
      parts = J.split$1$s(id, "#");
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      id = parts[0];
      t1.id_0 = id;
      if (J.startsWith$1$s(id, "isolates/")) {
        isolateId = this._parseIsolateId$1(t1.id_0);
        objectId = this._parseObjectId$1(t1.id_0);
        return this._getIsolate$1(isolateId).then$1(new D.VM_get_closure(this, objectId));
      }
      obj = this._cache.$index(0, t1.id_0);
      if (obj != null)
        return J.reload$0$x(obj);
      return this.getAsMap$1(t1.id_0).then$1(new D.VM_get_closure0(t1, this));
    },
    _service$_reviver$2: [function(key, value) {
      return value;
    }, "call$2", "get$_service$_reviver", 4, 0, 296, 48, [], 30, []],
    _parseJSON$1: function(response) {
      var map, decoder, exception;
      map = null;
      try {
        decoder = new P.JsonDecoder(this.get$_service$_reviver());
        map = P._parseJson(response, decoder.get$_reviver());
      } catch (exception) {
        H.unwrapException(exception);
        return;
      }

      return R._toObservableDeep(map);
    },
    _processMap$1: function(map) {
      var t1;
      if (!D._isServiceMap(map)) {
        t1 = H.fillLiteralMap(["type", "ServiceException", "id", "", "kind", "FormatException", "response", map, "message", "Top level service responses must be service maps."], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        return P._Future$immediateError(D.ServiceObject_ServiceObject$_fromMap(this, R._toObservableDeep(t1)), null, null);
      }
      t1 = J.getInterceptor$asx(map);
      if (J.$eq(t1.$index(map, "type"), "ServiceError"))
        return P._Future$immediateError(D.ServiceObject_ServiceObject$_fromMap(this, map), null, null);
      else if (J.$eq(t1.$index(map, "type"), "ServiceException"))
        return P._Future$immediateError(D.ServiceObject_ServiceObject$_fromMap(this, map), null, null);
      return P._Future$immediate(map, null);
    },
    getAsMap$1: function(id) {
      return this.getString$1(0, id).then$1(new D.VM_getAsMap_closure(this)).catchError$2$test(new D.VM_getAsMap_closure0(this), new D.VM_getAsMap_closure1()).catchError$2$test(new D.VM_getAsMap_closure2(this), new D.VM_getAsMap_closure3());
    },
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2;
      if (mapIsRef)
        return;
      this._loaded = true;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "version");
      this._service$__$version = F.notifyPropertyChangeHelper(this, C.Symbol_version, this._service$__$version, t2);
      t2 = t1.$index(map, "architecture");
      this._service$__$architecture = F.notifyPropertyChangeHelper(this, C.Symbol_architecture, this._service$__$architecture, t2);
      t2 = t1.$index(map, "uptime");
      this._service$__$uptime = F.notifyPropertyChangeHelper(this, C.Symbol_uptime, this._service$__$uptime, t2);
      t2 = t1.$index(map, "assertsEnabled");
      this._service$__$assertsEnabled = F.notifyPropertyChangeHelper(this, C.Symbol_assertsEnabled, this._service$__$assertsEnabled, t2);
      t2 = t1.$index(map, "typeChecksEnabled");
      this._service$__$typeChecksEnabled = F.notifyPropertyChangeHelper(this, C.Symbol_typeChecksEnabled, this._service$__$typeChecksEnabled, t2);
      this._updateIsolates$1(t1.$index(map, "isolates"));
    },
    _updateIsolates$1: function(newIsolates) {
      var oldIsolateCache, newIsolateCache, t1, isolateMap, isolateId, isolate;
      oldIsolateCache = this._isolateCache;
      newIsolateCache = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, D.Isolate);
      for (t1 = J.get$iterator$ax(newIsolates); t1.moveNext$0();) {
        isolateMap = t1.get$current();
        isolateId = J.$index$asx(isolateMap, "id");
        isolate = oldIsolateCache.$index(0, isolateId);
        if (isolate != null)
          newIsolateCache.$indexSet(0, isolateId, isolate);
        else {
          isolate = D.ServiceObject_ServiceObject$_fromMap(this, isolateMap);
          newIsolateCache.$indexSet(0, isolateId, isolate);
          N.Logger_Logger("").info$1("New isolate '" + H.S(isolate._service$_id) + "'");
        }
      }
      newIsolateCache.forEach$1(0, new D.VM__updateIsolates_closure());
      this._isolateCache = newIsolateCache;
    },
    VM$0: function() {
      this._service$__$name = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, "vm");
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, "vm");
      this._cache.$indexSet(0, "vm", this);
      var t1 = H.fillLiteralMap(["id", "vm", "type", "@VM"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.update$1(R._toObservableDeep(t1));
    },
    $isVM: true
  },
  ServiceObjectOwner_ChangeNotifier: {
    "^": "ServiceObjectOwner+ChangeNotifier;",
    $isObservable: true
  },
  VM__getIsolate_closure: {
    "^": "Closure:115;this_0,isolateId_1",
    call$1: [function(result) {
      if (!J.getInterceptor(result).$isVM)
        return;
      return this.this_0._isolateCache.$index(0, this.isolateId_1);
    }, "call$1", null, 2, 0, null, 56, [], "call"],
    $isFunction: true
  },
  VM_get_closure: {
    "^": "Closure:115;this_1,objectId_2",
    call$1: [function(isolate) {
      var t1;
      if (isolate == null)
        return this.this_1;
      t1 = this.objectId_2;
      if (t1 == null)
        return J.reload$0$x(isolate);
      else
        return isolate.get$1(t1);
    }, "call$1", null, 2, 0, null, 16, [], "call"],
    $isFunction: true
  },
  VM_get_closure0: {
    "^": "Closure:451;box_0,this_3",
    call$1: [function(map) {
      var t1, obj;
      t1 = this.this_3;
      obj = D.ServiceObject_ServiceObject$_fromMap(t1, map);
      if (obj.get$canCache())
        t1._cache.putIfAbsent$2(this.box_0.id_0, new D.VM_get__closure(obj));
      return obj;
    }, "call$1", null, 2, 0, null, 160, [], "call"],
    $isFunction: true
  },
  VM_get__closure: {
    "^": "Closure:114;obj_4",
    call$0: [function() {
      return this.obj_4;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  VM_getAsMap_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(response) {
      var map, e, exception, t1;
      map = null;
      try {
        map = this.this_0._parseJSON$1(response);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        P.print("Hit V8 bug.");
        t1 = H.fillLiteralMap(["type", "ServiceException", "id", "", "kind", "DecodeException", "response", "This is likely a result of a known V8 bug. Although the the bug has been fixed the fix may not be in your Chrome version. For more information see dartbug.com/18385. Observatory is still functioning and you should try your action again.", "message", "Could not decode JSON: " + H.S(e)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = R._toObservableDeep(t1);
        return P._Future$immediateError(D.ServiceObject_ServiceObject$_fromMap(this.this_0, t1), null, null);
      }

      return this.this_0._processMap$1(map);
    }, "call$1", null, 2, 0, null, 419, [], "call"],
    $isFunction: true
  },
  VM_getAsMap_closure0: {
    "^": "Closure:115;this_1",
    call$1: [function(error) {
      var t1 = this.this_1.errors;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(error);
      return P._Future$immediateError(error, null, null);
    }, "call$1", null, 2, 0, null, 168, [], "call"],
    $isFunction: true
  },
  VM_getAsMap_closure1: {
    "^": "Closure:115;",
    call$1: [function(e) {
      return !!J.getInterceptor(e).$isServiceError;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  VM_getAsMap_closure2: {
    "^": "Closure:115;this_2",
    call$1: [function(exception) {
      var t1 = this.this_2.exceptions;
      if (t1._state >= 4)
        H.throwExpression(t1._addEventError$0());
      t1._sendData$1(exception);
      return P._Future$immediateError(exception, null, null);
    }, "call$1", null, 2, 0, null, 320, [], "call"],
    $isFunction: true
  },
  VM_getAsMap_closure3: {
    "^": "Closure:115;",
    call$1: [function(e) {
      return !!J.getInterceptor(e).$isServiceException;
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  VM__updateIsolates_closure: {
    "^": "Closure:296;",
    call$2: [function(isolateId, isolate) {
      J.reload$0$x(isolate);
    }, "call$2", null, 4, 0, null, 523, [], 16, [], "call"],
    $isFunction: true
  },
  TagProfileSnapshot: {
    "^": "Object;seconds<,counters>,_sum",
    get$sum: function() {
      return this._sum;
    },
    set$1: function(counters) {
      var t1, t2, i, t3, t4;
      t1 = this.counters;
      H.IterableMixinWorkaround_setAllList(t1, 0, counters);
      for (t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = this._sum;
        t4 = t1[i];
        if (typeof t4 !== "number")
          return H.iae(t4);
        this._sum = t3 + t4;
      }
    },
    delta$2: function(counters, old_counters) {
      var t1, t2, t3, t4, i, t5, t6;
      for (t1 = this.counters, t2 = t1.length, t3 = J.getInterceptor$asx(counters), t4 = old_counters.length, i = 0; i < t2; ++i) {
        t5 = t3.$index(counters, i);
        if (i >= t4)
          return H.ioore(old_counters, i);
        t5 = J.$sub$n(t5, old_counters[i]);
        t1[i] = t5;
        t6 = this._sum;
        if (typeof t5 !== "number")
          return H.iae(t5);
        this._sum = t6 + t5;
      }
    },
    max$1: function(_, counters) {
      var t1, t2, t3, i, t4, c;
      t1 = J.getInterceptor$asx(counters);
      t2 = this.counters;
      t3 = t2.length;
      i = 0;
      while (true) {
        t4 = t1.get$length(counters);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        c = t1.$index(counters, i);
        if (i >= t3)
          return H.ioore(t2, i);
        t2[i] = J.$gt$n(t2[i], c) ? t2[i] : c;
        ++i;
      }
    },
    zero$0: function() {
      var t1, t2, i;
      for (t1 = this.counters, t2 = t1.length, i = 0; i < t2; ++i)
        t1[i] = 0;
    },
    $isTagProfileSnapshot: true
  },
  TagProfile: {
    "^": "Object;names<,snapshots<,_seconds,_maxSnapshot,_historySize,_countersLength",
    get$updatedAtSeconds: function() {
      return this._seconds;
    },
    _processTagProfile$2: function(seconds, tagProfile) {
      var t1, counters, t2, i, t3, snapshot;
      this._seconds = seconds;
      t1 = J.getInterceptor$asx(tagProfile);
      counters = t1.$index(tagProfile, "counters");
      t2 = this.names;
      if (t2.length === 0) {
        C.JSArray_methods.addAll$1(t2, t1.$index(tagProfile, "names"));
        this._countersLength = J.get$length$asx(t1.$index(tagProfile, "counters"));
        for (t1 = this._historySize, t2 = this.snapshots, i = 0; t3 = this._countersLength, i < t1; ++i) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = Array(t3);
          t3.fixed$length = init;
          t3.$builtinTypeInfo = [J.JSInt];
          snapshot = new D.TagProfileSnapshot(0, t3, 0);
          snapshot.zero$0();
          t2.push(snapshot);
        }
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1 = Array(t3);
        t1.fixed$length = init;
        t1 = new D.TagProfileSnapshot(0, H.setRuntimeTypeInfo(t1, [J.JSInt]), 0);
        this._maxSnapshot = t1;
        t1.set$1(counters);
        return;
      }
      t1 = this._countersLength;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      snapshot = new D.TagProfileSnapshot(seconds, H.setRuntimeTypeInfo(t1, [J.JSInt]), 0);
      snapshot.delta$2(counters, this._maxSnapshot.counters);
      this._maxSnapshot.max$1(0, counters);
      t1 = this.snapshots;
      t1.push(snapshot);
      if (t1.length > this._historySize)
        C.JSArray_methods.removeAt$1(t1, 0);
    }
  },
  Isolate: {
    "^": ["ServiceObjectOwner_ChangeNotifier0;_service$__$counters,_service$__$pauseEvent,_service$__$running,_service$__$idle,_service$__$loading,_cache,tagProfile,_service$__$rootLib,_service$__$libraries,_service$__$topFrame,_service$__$name:service$Isolate$_service$__$name@,_service$__$vmName:service$Isolate$_service$__$vmName@,_service$__$mainPort,_service$__$entry,timers<-524,_service$__$newHeapUsed,_service$__$oldHeapUsed,_service$__$newHeapCapacity,_service$__$oldHeapCapacity,_service$__$fileAndLine,_service$__$error,profileTrieRoot@-437,_trieDataCursor,_trieData,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_ObservableProperty];
    }, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }, null, null, null, null, null, null, null, null, null, null, null, null, null],
    get$vm: [function(_) {
      return this._service$_owner;
    }, null, null, 1, 0, 519, "vm", 304],
    get$isolate: [function(_) {
      return this;
    }, null, null, 1, 0, 314, "isolate", 304],
    get$counters: [function(_) {
      return this._service$__$counters;
    }, null, null, 1, 0, 450, "counters", 304, 305],
    set$counters: [function(_, value) {
      this._service$__$counters = F.notifyPropertyChangeHelper(this, C.Symbol_counters, this._service$__$counters, value);
    }, null, null, 3, 0, 451, 30, [], "counters", 304],
    get$link: function(_) {
      return this._service$_id;
    },
    get$hashLink: function() {
      return "#/" + H.S(this._service$_id);
    },
    get$pauseEvent: [function(_) {
      return this._service$__$pauseEvent;
    }, null, null, 1, 0, 333, "pauseEvent", 304, 305],
    set$pauseEvent: [function(_, value) {
      this._service$__$pauseEvent = F.notifyPropertyChangeHelper(this, C.Symbol_pauseEvent, this._service$__$pauseEvent, value);
    }, null, null, 3, 0, 334, 30, [], "pauseEvent", 304],
    get$running: [function() {
      return this._service$__$running;
    }, null, null, 1, 0, 303, "running", 304, 305],
    set$running: [function(value) {
      this._service$__$running = F.notifyPropertyChangeHelper(this, C.Symbol_running, this._service$__$running, value);
    }, null, null, 3, 0, 306, 30, [], "running", 304],
    get$idle: [function() {
      return this._service$__$idle;
    }, null, null, 1, 0, 303, "idle", 304, 305],
    set$idle: [function(value) {
      this._service$__$idle = F.notifyPropertyChangeHelper(this, C.Symbol_idle, this._service$__$idle, value);
    }, null, null, 3, 0, 306, 30, [], "idle", 304],
    get$loading: [function() {
      return this._service$__$loading;
    }, null, null, 1, 0, 303, "loading", 304, 305],
    set$loading: [function(value) {
      this._service$__$loading = F.notifyPropertyChangeHelper(this, C.Symbol_loading, this._service$__$loading, value);
    }, null, null, 3, 0, 306, 30, [], "loading", 304],
    relativeLink$1: [function(id) {
      return H.S(this._service$_id) + "/" + H.S(id);
    }, "call$1", "get$relativeLink", 2, 0, 525, 526, [], "relativeLink", 304],
    relativeHashLink$1: [function(id) {
      return "#/" + (H.S(this._service$_id) + "/" + H.S(id));
    }, "call$1", "get$relativeHashLink", 2, 0, 525, 526, [], "relativeHashLink", 304],
    processProfile$1: function(profile) {
      var codeTable, t1, t2, exclusiveTrie;
      codeTable = H.setRuntimeTypeInfo([], [D.Code]);
      t1 = J.getInterceptor$asx(profile);
      for (t2 = J.get$iterator$ax(t1.$index(profile, "codes")); t2.moveNext$0();)
        codeTable.push(J.$index$asx(t2.get$current(), "code"));
      this._resetProfileData$0();
      this._updateProfileData$2(profile, codeTable);
      exclusiveTrie = t1.$index(profile, "exclusive_trie");
      if (exclusiveTrie != null)
        this.profileTrieRoot = this._processProfileTrie$2(exclusiveTrie, codeTable);
    },
    _resetProfileData$0: function() {
      var t1 = this._cache;
      t1.get$values(t1).forEach$1(0, new D.Isolate__resetProfileData_closure());
    },
    _updateProfileData$2: function(profile, codeTable) {
      var t1, codeRegions, sampleCount, codeRegion;
      t1 = J.getInterceptor$asx(profile);
      codeRegions = t1.$index(profile, "codes");
      sampleCount = t1.$index(profile, "samples");
      for (t1 = J.get$iterator$ax(codeRegions); t1.moveNext$0();) {
        codeRegion = t1.get$current();
        J.$index$asx(codeRegion, "code").updateProfileData$3(codeRegion, codeTable, sampleCount);
      }
    },
    refreshCoverage$0: function(_) {
      return this.get$1("coverage").then$1(this.get$_processCoverage());
    },
    _processCoverage$1: [function(coverage) {
      J.forEach$1$ax(J.$index$asx(coverage, "coverage"), new D.Isolate__processCoverage_closure(this));
    }, "call$1", "get$_processCoverage", 2, 0, 527, 528, []],
    getFromMap$1: function(map) {
      var id, t1, obj;
      if (map == null)
        return;
      id = J.$index$asx(map, "id");
      t1 = this._cache;
      obj = t1.$index(0, id);
      if (obj != null)
        return obj;
      obj = D.ServiceObject_ServiceObject$_fromMap(this, map);
      if (obj.get$canCache())
        t1.$indexSet(0, id, obj);
      return obj;
    },
    get$1: function(id) {
      var obj = this._cache.$index(0, id);
      if (obj != null)
        return J.reload$0$x(obj);
      return this._service$_owner.getAsMap$1(H.S(this._service$_id) + "/" + H.S(id)).then$1(new D.Isolate_get_closure(this, id));
    },
    get$rootLib: [function() {
      return this._service$__$rootLib;
    }, null, null, 1, 0, 459, "rootLib", 304, 305],
    set$rootLib: [function(value) {
      this._service$__$rootLib = F.notifyPropertyChangeHelper(this, C.Symbol_rootLib, this._service$__$rootLib, value);
    }, null, null, 3, 0, 460, 30, [], "rootLib", 304],
    get$libraries: [function() {
      return this._service$__$libraries;
    }, null, null, 1, 0, 529, "libraries", 304, 305],
    set$libraries: [function(value) {
      this._service$__$libraries = F.notifyPropertyChangeHelper(this, C.Symbol_libraries, this._service$__$libraries, value);
    }, null, null, 3, 0, 530, 30, [], "libraries", 304],
    get$topFrame: [function() {
      return this._service$__$topFrame;
    }, null, null, 1, 0, 450, "topFrame", 304, 305],
    set$topFrame: [function(value) {
      this._service$__$topFrame = F.notifyPropertyChangeHelper(this, C.Symbol_topFrame, this._service$__$topFrame, value);
    }, null, null, 3, 0, 451, 30, [], "topFrame", 304],
    get$name: [function(_) {
      return this.service$Isolate$_service$__$name;
    }, null, null, 1, 0, 308, "name", 304, 305],
    set$name: [function(_, value) {
      this.service$Isolate$_service$__$name = F.notifyPropertyChangeHelper(this, C.Symbol_name, this.service$Isolate$_service$__$name, value);
    }, null, null, 3, 0, 32, 30, [], "name", 304],
    get$vmName: [function() {
      return this.service$Isolate$_service$__$vmName;
    }, null, null, 1, 0, 308, "vmName", 304, 305],
    set$vmName: [function(value) {
      this.service$Isolate$_service$__$vmName = F.notifyPropertyChangeHelper(this, C.Symbol_vmName, this.service$Isolate$_service$__$vmName, value);
    }, null, null, 3, 0, 32, 30, [], "vmName", 304],
    get$mainPort: [function() {
      return this._service$__$mainPort;
    }, null, null, 1, 0, 308, "mainPort", 304, 305],
    set$mainPort: [function(value) {
      this._service$__$mainPort = F.notifyPropertyChangeHelper(this, C.Symbol_mainPort, this._service$__$mainPort, value);
    }, null, null, 3, 0, 32, 30, [], "mainPort", 304],
    get$entry: [function() {
      return this._service$__$entry;
    }, null, null, 1, 0, 531, "entry", 304, 305],
    set$entry: [function(value) {
      this._service$__$entry = F.notifyPropertyChangeHelper(this, C.Symbol_entry, this._service$__$entry, value);
    }, null, null, 3, 0, 532, 30, [], "entry", 304],
    get$newHeapUsed: [function() {
      return this._service$__$newHeapUsed;
    }, null, null, 1, 0, 484, "newHeapUsed", 304, 305],
    set$newHeapUsed: [function(value) {
      this._service$__$newHeapUsed = F.notifyPropertyChangeHelper(this, C.Symbol_newHeapUsed, this._service$__$newHeapUsed, value);
    }, null, null, 3, 0, 359, 30, [], "newHeapUsed", 304],
    get$oldHeapUsed: [function() {
      return this._service$__$oldHeapUsed;
    }, null, null, 1, 0, 484, "oldHeapUsed", 304, 305],
    set$oldHeapUsed: [function(value) {
      this._service$__$oldHeapUsed = F.notifyPropertyChangeHelper(this, C.Symbol_oldHeapUsed, this._service$__$oldHeapUsed, value);
    }, null, null, 3, 0, 359, 30, [], "oldHeapUsed", 304],
    get$newHeapCapacity: [function() {
      return this._service$__$newHeapCapacity;
    }, null, null, 1, 0, 484, "newHeapCapacity", 304, 305],
    set$newHeapCapacity: [function(value) {
      this._service$__$newHeapCapacity = F.notifyPropertyChangeHelper(this, C.Symbol_newHeapCapacity, this._service$__$newHeapCapacity, value);
    }, null, null, 3, 0, 359, 30, [], "newHeapCapacity", 304],
    get$oldHeapCapacity: [function() {
      return this._service$__$oldHeapCapacity;
    }, null, null, 1, 0, 484, "oldHeapCapacity", 304, 305],
    set$oldHeapCapacity: [function(value) {
      this._service$__$oldHeapCapacity = F.notifyPropertyChangeHelper(this, C.Symbol_oldHeapCapacity, this._service$__$oldHeapCapacity, value);
    }, null, null, 3, 0, 359, 30, [], "oldHeapCapacity", 304],
    get$fileAndLine: [function(_) {
      return this._service$__$fileAndLine;
    }, null, null, 1, 0, 308, "fileAndLine", 304, 305],
    fileAndLine$1: function($receiver, arg0) {
      return this.get$fileAndLine(this).call$1(arg0);
    },
    set$fileAndLine: [function(_, value) {
      this._service$__$fileAndLine = F.notifyPropertyChangeHelper(this, C.Symbol_fileAndLine, this._service$__$fileAndLine, value);
    }, null, null, 3, 0, 32, 30, [], "fileAndLine", 304],
    get$error: [function(_) {
      return this._service$__$error;
    }, null, null, 1, 0, 533, "error", 304, 305],
    set$error: [function(_, value) {
      this._service$__$error = F.notifyPropertyChangeHelper(this, C.Symbol_error, this._service$__$error, value);
    }, null, null, 3, 0, 534, 30, [], "error", 304],
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2, countersMap, names, counts, sum, i, t3, t4, timerMap, lib;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "mainPort");
      this._service$__$mainPort = F.notifyPropertyChangeHelper(this, C.Symbol_mainPort, this._service$__$mainPort, t2);
      t2 = t1.$index(map, "name");
      this.service$Isolate$_service$__$name = F.notifyPropertyChangeHelper(this, C.Symbol_name, this.service$Isolate$_service$__$name, t2);
      t2 = t1.$index(map, "name");
      this.service$Isolate$_service$__$vmName = F.notifyPropertyChangeHelper(this, C.Symbol_vmName, this.service$Isolate$_service$__$vmName, t2);
      if (mapIsRef)
        return;
      this._loaded = true;
      this._service$__$loading = F.notifyPropertyChangeHelper(this, C.Symbol_loading, this._service$__$loading, false);
      D._upgradeCollection(map, this);
      if (t1.$index(map, "rootLib") == null || t1.$index(map, "timers") == null || t1.$index(map, "heap") == null) {
        N.Logger_Logger("").severe$1("Malformed 'Isolate' response: " + H.S(map));
        return;
      }
      t2 = t1.$index(map, "rootLib");
      this._service$__$rootLib = F.notifyPropertyChangeHelper(this, C.Symbol_rootLib, this._service$__$rootLib, t2);
      if (t1.$index(map, "entry") != null) {
        t2 = t1.$index(map, "entry");
        this._service$__$entry = F.notifyPropertyChangeHelper(this, C.Symbol_entry, this._service$__$entry, t2);
      }
      if (t1.$index(map, "topFrame") != null) {
        t2 = t1.$index(map, "topFrame");
        this._service$__$topFrame = F.notifyPropertyChangeHelper(this, C.Symbol_topFrame, this._service$__$topFrame, t2);
      } else
        this._service$__$topFrame = F.notifyPropertyChangeHelper(this, C.Symbol_topFrame, this._service$__$topFrame, null);
      countersMap = t1.$index(map, "tagCounters");
      if (countersMap != null) {
        t2 = J.getInterceptor$asx(countersMap);
        names = t2.$index(countersMap, "names");
        counts = t2.$index(countersMap, "counters");
        t2 = J.getInterceptor$asx(counts);
        sum = 0;
        i = 0;
        while (true) {
          t3 = t2.get$length(counts);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          t3 = t2.$index(counts, i);
          if (typeof t3 !== "number")
            return H.iae(t3);
          sum += t3;
          ++i;
        }
        t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t3 = R._toObservableDeep(t3);
        this._service$__$counters = F.notifyPropertyChangeHelper(this, C.Symbol_counters, this._service$__$counters, t3);
        if (sum === 0) {
          t2 = J.getInterceptor$asx(names);
          i = 0;
          while (true) {
            t3 = t2.get$length(names);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(i < t3))
              break;
            J.$indexSet$ax(this._service$__$counters, t2.$index(names, i), "0.0%");
            ++i;
          }
        } else {
          t3 = J.getInterceptor$asx(names);
          i = 0;
          while (true) {
            t4 = t3.get$length(names);
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(i < t4))
              break;
            J.$indexSet$ax(this._service$__$counters, t3.$index(names, i), C.JSNumber_methods.toStringAsFixed$1(J.$div$n(t2.$index(counts, i), sum) * 100, 2) + "%");
            ++i;
          }
        }
      }
      timerMap = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      J.forEach$1$ax(t1.$index(map, "timers"), new D.Isolate__update_closure(timerMap));
      t2 = this.timers;
      t3 = J.getInterceptor$ax(t2);
      t3.$indexSet(t2, "total", timerMap.$index(0, "time_total_runtime"));
      t3.$indexSet(t2, "compile", timerMap.$index(0, "time_compilation"));
      t3.$indexSet(t2, "gc", 0);
      t3.$indexSet(t2, "init", J.$add$ns(J.$add$ns(J.$add$ns(timerMap.$index(0, "time_script_loading"), timerMap.$index(0, "time_creating_snapshot")), timerMap.$index(0, "time_isolate_initialization")), timerMap.$index(0, "time_bootstrap")));
      t3.$indexSet(t2, "dart", timerMap.$index(0, "time_dart_execution"));
      t2 = J.$index$asx(t1.$index(map, "heap"), "usedNew");
      this._service$__$newHeapUsed = F.notifyPropertyChangeHelper(this, C.Symbol_newHeapUsed, this._service$__$newHeapUsed, t2);
      t2 = J.$index$asx(t1.$index(map, "heap"), "usedOld");
      this._service$__$oldHeapUsed = F.notifyPropertyChangeHelper(this, C.Symbol_oldHeapUsed, this._service$__$oldHeapUsed, t2);
      t2 = J.$index$asx(t1.$index(map, "heap"), "capacityNew");
      this._service$__$newHeapCapacity = F.notifyPropertyChangeHelper(this, C.Symbol_newHeapCapacity, this._service$__$newHeapCapacity, t2);
      t2 = J.$index$asx(t1.$index(map, "heap"), "capacityOld");
      this._service$__$oldHeapCapacity = F.notifyPropertyChangeHelper(this, C.Symbol_oldHeapCapacity, this._service$__$oldHeapCapacity, t2);
      t2 = t1.$index(map, "pauseEvent");
      t2 = F.notifyPropertyChangeHelper(this, C.Symbol_pauseEvent, this._service$__$pauseEvent, t2);
      this._service$__$pauseEvent = t2;
      t2 = t2 == null && t1.$index(map, "topFrame") != null;
      this._service$__$running = F.notifyPropertyChangeHelper(this, C.Symbol_running, this._service$__$running, t2);
      t2 = this._service$__$pauseEvent == null && t1.$index(map, "topFrame") == null;
      this._service$__$idle = F.notifyPropertyChangeHelper(this, C.Symbol_idle, this._service$__$idle, t2);
      t2 = t1.$index(map, "error");
      this._service$__$error = F.notifyPropertyChangeHelper(this, C.Symbol_error, this._service$__$error, t2);
      J.clear$0$ax(this._service$__$libraries);
      for (t1 = J.get$iterator$ax(t1.$index(map, "libraries")); t1.moveNext$0();) {
        lib = t1.get$current();
        J.add$1$ax(this._service$__$libraries, lib);
      }
      J.sort$1$ax(this._service$__$libraries, new D.Isolate__update_closure0());
    },
    updateTagProfile$0: function() {
      return this._service$_owner.getAsMap$1(H.S(this._service$_id) + "/profile/tag").then$1(new D.Isolate_updateTagProfile_closure(this));
    },
    _processProfileTrie$2: function(data, codeTable) {
      this._trieDataCursor = 0;
      this._trieData = data;
      if (data == null)
        return;
      if (J.$lt$n(J.get$length$asx(data), 3))
        return;
      return this._readTrieNode$1(codeTable);
    },
    _readTrieNode$1: function(codeTable) {
      var t1, t2, index, code, count, node, t3, children, i, child;
      t1 = this._trieData;
      t2 = this._trieDataCursor;
      if (typeof t2 !== "number")
        return t2.$add();
      this._trieDataCursor = t2 + 1;
      index = J.$index$asx(t1, t2);
      if (index >>> 0 !== index || index >= codeTable.length)
        return H.ioore(codeTable, index);
      code = codeTable[index];
      t2 = this._trieData;
      t1 = this._trieDataCursor;
      if (typeof t1 !== "number")
        return t1.$add();
      this._trieDataCursor = t1 + 1;
      count = J.$index$asx(t2, t1);
      t1 = [];
      t1.$builtinTypeInfo = [D.CodeTrieNode];
      node = new D.CodeTrieNode(code, count, t1, 0);
      t2 = this._trieData;
      t3 = this._trieDataCursor;
      if (typeof t3 !== "number")
        return t3.$add();
      this._trieDataCursor = t3 + 1;
      children = J.$index$asx(t2, t3);
      if (typeof children !== "number")
        return H.iae(children);
      i = 0;
      for (; i < children; ++i) {
        child = this._readTrieNode$1(codeTable);
        t1.push(child);
        t2 = node.summedChildCount;
        t3 = child.count;
        if (typeof t3 !== "number")
          return H.iae(t3);
        node.summedChildCount = t2 + t3;
      }
      return node;
    },
    $isIsolate: true,
    static: {"^": "Isolate_TAG_ROOT_ID"}
  },
  ServiceObjectOwner_ChangeNotifier0: {
    "^": "ServiceObjectOwner+ChangeNotifier;",
    $isObservable: true
  },
  Isolate__resetProfileData_closure: {
    "^": "Closure:115;",
    call$1: [function(value) {
      if (!!J.getInterceptor(value).$isCode) {
        value._service$__$totalSamplesInProfile = F.notifyPropertyChangeHelper(value, C.Symbol_totalSamplesInProfile, value._service$__$totalSamplesInProfile, 0);
        value.exclusiveTicks = 0;
        value.inclusiveTicks = 0;
        value._service$__$formattedInclusiveTicks = F.notifyPropertyChangeHelper(value, C.Symbol_formattedInclusiveTicks, value._service$__$formattedInclusiveTicks, "");
        value._service$__$formattedExclusiveTicks = F.notifyPropertyChangeHelper(value, C.Symbol_formattedExclusiveTicks, value._service$__$formattedExclusiveTicks, "");
        J.clear$0$ax(value.callers);
        J.clear$0$ax(value.callees);
        J.clear$0$ax(value.addressTicks);
      }
    }, "call$1", null, 2, 0, null, 30, [], "call"],
    $isFunction: true
  },
  Isolate__processCoverage_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(scriptCoverage) {
      var t1 = J.getInterceptor$asx(scriptCoverage);
      t1.$index(scriptCoverage, "script")._processHits$1(t1.$index(scriptCoverage, "hits"));
    }, "call$1", null, 2, 0, null, 535, [], "call"],
    $isFunction: true
  },
  Isolate_get_closure: {
    "^": "Closure:451;this_0,id_1",
    call$1: [function(map) {
      var t1, obj;
      t1 = this.this_0;
      obj = D.ServiceObject_ServiceObject$_fromMap(t1, map);
      if (obj.get$canCache())
        t1._cache.putIfAbsent$2(this.id_1, new D.Isolate_get__closure(obj));
      return obj;
    }, "call$1", null, 2, 0, null, 160, [], "call"],
    $isFunction: true
  },
  Isolate_get__closure: {
    "^": "Closure:114;obj_2",
    call$0: [function() {
      return this.obj_2;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Isolate__update_closure: {
    "^": "Closure:115;timerMap_0",
    call$1: [function(timer) {
      var t1 = J.getInterceptor$asx(timer);
      this.timerMap_0.$indexSet(0, t1.$index(timer, "name"), t1.$index(timer, "time"));
    }, "call$1", null, 2, 0, null, 536, [], "call"],
    $isFunction: true
  },
  Isolate__update_closure0: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.compareTo$1$ns(J.get$name$x(a), J.get$name$x(b));
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  Isolate_updateTagProfile_closure: {
    "^": "Closure:451;this_0",
    call$1: [function(m) {
      var t1, t2;
      t1 = Date.now();
      new P.DateTime(t1, false).DateTime$_now$0();
      t2 = this.this_0.tagProfile;
      t2._processTagProfile$2(t1 / 1000, m);
      return t2;
    }, "call$1", null, 2, 0, null, 199, [], "call"],
    $isFunction: true
  },
  ServiceMap: {
    "^": "ServiceObject;_service$_map,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$canCache: function() {
      return (J.$eq(this._serviceType, "Class") || J.$eq(this._serviceType, "Function") || J.$eq(this._serviceType, "Field")) && !J.startsWith$1$s(this._service$_id, $.ServiceMap_objectIdRingPrefix);
    },
    get$immutable: function() {
      return false;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this._service$_map);
    },
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2, t3;
      this._loaded = !mapIsRef;
      t1 = this._service$_map;
      t1.clear$0(0);
      t1.addAll$1(0, map);
      t2 = t1._observable_map$_map;
      t3 = t2.$index(0, "user_name");
      this._service$__$name = this.notifyPropertyChange$3(0, C.Symbol_name, this._service$__$name, t3);
      t2 = t2.$index(0, "name");
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t2);
      D._upgradeCollection(t1, this._service$_owner);
    },
    addAll$1: function(_, other) {
      return this._service$_map.addAll$1(0, other);
    },
    clear$0: function(_) {
      return this._service$_map.clear$0(0);
    },
    containsValue$1: function(v) {
      return this._service$_map._observable_map$_map.containsValue$1(v);
    },
    containsKey$1: function(k) {
      return this._service$_map._observable_map$_map.containsKey$1(k);
    },
    forEach$1: function(_, f) {
      return this._service$_map._observable_map$_map.forEach$1(0, f);
    },
    remove$1: function(_, key) {
      return this._service$_map.remove$1(0, key);
    },
    $index: function(_, k) {
      return this._service$_map._observable_map$_map.$index(0, k);
    },
    $indexSet: function(_, k, v) {
      this._service$_map.$indexSet(0, k, v);
      return v;
    },
    get$isEmpty: function(_) {
      var t1 = this._service$_map._observable_map$_map;
      return t1.get$length(t1) === 0;
    },
    get$isNotEmpty: function(_) {
      var t1 = this._service$_map._observable_map$_map;
      return t1.get$length(t1) !== 0;
    },
    get$keys: function() {
      return this._service$_map._observable_map$_map.get$keys();
    },
    get$values: function(_) {
      var t1 = this._service$_map._observable_map$_map;
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._service$_map._observable_map$_map;
      return t1.get$length(t1);
    },
    deliverChanges$0: [function(_) {
      var t1 = this._service$_map;
      return t1.deliverChanges$0(t1);
    }, "call$0", "get$deliverChanges", 0, 0, 303],
    notifyChange$1: function(_, record) {
      var t1 = this._service$_map;
      return t1.notifyChange$1(t1, record);
    },
    notifyPropertyChange$3: function(_, field, oldValue, newValue) {
      return F.notifyPropertyChangeHelper(this._service$_map, field, oldValue, newValue);
    },
    observed$0: [function(_) {
      return;
    }, "call$0", "get$observed", 0, 0, 125],
    unobserved$0: [function(_) {
      this._service$_map.change_notifier$ChangeNotifier$_changes = null;
      return;
    }, "call$0", "get$unobserved", 0, 0, 125],
    get$changes: function(_) {
      var t1 = this._service$_map;
      return t1.get$changes(t1);
    },
    get$hasObservers: function(_) {
      var t1, t2;
      t1 = this._service$_map.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      return t1;
    },
    $isServiceMap: true,
    $isObservableMap: true,
    $asObservableMap: function() {
      return [null, null];
    },
    $isMap: true,
    $asMap: function() {
      return [null, null];
    },
    $isObservable: true,
    static: {"^": "ServiceMap_objectIdRingPrefix"}
  },
  DartError: {
    "^": "ServiceObject_ChangeNotifier;_service$__$kind,_service$__$message,_service$__$exception,_service$__$stacktrace,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$kind: [function(_) {
      return this._service$__$kind;
    }, null, null, 1, 0, 308, "kind", 304, 305],
    set$kind: [function(_, value) {
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, value);
    }, null, null, 3, 0, 32, 30, [], "kind", 304],
    get$message: [function(_) {
      return this._service$__$message;
    }, null, null, 1, 0, 308, "message", 304, 305],
    set$message: [function(_, value) {
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, value);
    }, null, null, 3, 0, 32, 30, [], "message", 304],
    get$exception: [function(_) {
      return this._service$__$exception;
    }, null, null, 1, 0, 333, "exception", 304, 305],
    set$exception: [function(_, value) {
      this._service$__$exception = F.notifyPropertyChangeHelper(this, C.Symbol_exception, this._service$__$exception, value);
    }, null, null, 3, 0, 334, 30, [], "exception", 304],
    get$stacktrace: [function() {
      return this._service$__$stacktrace;
    }, null, null, 1, 0, 333, "stacktrace", 304, 305],
    set$stacktrace: [function(value) {
      this._service$__$stacktrace = F.notifyPropertyChangeHelper(this, C.Symbol_stacktrace, this._service$__$stacktrace, value);
    }, null, null, 3, 0, 334, 30, [], "stacktrace", 304],
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2, t3;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "kind");
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, t2);
      t2 = t1.$index(map, "message");
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, t2);
      t2 = this._service$_owner;
      t3 = D.ServiceObject_ServiceObject$_fromMap(t2, t1.$index(map, "exception"));
      this._service$__$exception = F.notifyPropertyChangeHelper(this, C.Symbol_exception, this._service$__$exception, t3);
      t1 = D.ServiceObject_ServiceObject$_fromMap(t2, t1.$index(map, "stacktrace"));
      this._service$__$stacktrace = F.notifyPropertyChangeHelper(this, C.Symbol_stacktrace, this._service$__$stacktrace, t1);
      t1 = "DartError " + H.S(this._service$__$kind);
      t1 = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, t1);
      this._service$__$name = t1;
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t1);
    }
  },
  ServiceObject_ChangeNotifier: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  ServiceError: {
    "^": "ServiceObject_ChangeNotifier0;_service$__$kind,_service$__$message,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$kind: [function(_) {
      return this._service$__$kind;
    }, null, null, 1, 0, 308, "kind", 304, 305],
    set$kind: [function(_, value) {
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, value);
    }, null, null, 3, 0, 32, 30, [], "kind", 304],
    get$message: [function(_) {
      return this._service$__$message;
    }, null, null, 1, 0, 308, "message", 304, 305],
    set$message: [function(_, value) {
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, value);
    }, null, null, 3, 0, 32, 30, [], "message", 304],
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2;
      this._loaded = true;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "kind");
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, t2);
      t1 = t1.$index(map, "message");
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, t1);
      t1 = "ServiceError " + H.S(this._service$__$kind);
      t1 = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, t1);
      this._service$__$name = t1;
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t1);
    },
    $isServiceError: true
  },
  ServiceObject_ChangeNotifier0: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  ServiceException: {
    "^": "ServiceObject_ChangeNotifier1;_service$__$kind,_service$__$message,_service$__$response,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$kind: [function(_) {
      return this._service$__$kind;
    }, null, null, 1, 0, 308, "kind", 304, 305],
    set$kind: [function(_, value) {
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, value);
    }, null, null, 3, 0, 32, 30, [], "kind", 304],
    get$message: [function(_) {
      return this._service$__$message;
    }, null, null, 1, 0, 308, "message", 304, 305],
    set$message: [function(_, value) {
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, value);
    }, null, null, 3, 0, 32, 30, [], "message", 304],
    get$response: [function(_) {
      return this._service$__$response;
    }, null, null, 1, 0, 114, "response", 304, 305],
    set$response: [function(_, value) {
      this._service$__$response = F.notifyPropertyChangeHelper(this, C.Symbol_response, this._service$__$response, value);
    }, null, null, 3, 0, 115, 30, [], "response", 304],
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "kind");
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, t2);
      t2 = t1.$index(map, "message");
      this._service$__$message = F.notifyPropertyChangeHelper(this, C.Symbol_message, this._service$__$message, t2);
      t1 = t1.$index(map, "response");
      this._service$__$response = F.notifyPropertyChangeHelper(this, C.Symbol_response, this._service$__$response, t1);
      t1 = "ServiceException " + H.S(this._service$__$kind);
      t1 = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, t1);
      this._service$__$name = t1;
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t1);
    },
    $isServiceException: true
  },
  ServiceObject_ChangeNotifier1: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  Library: {
    "^": ["ServiceObject_ChangeNotifier2;_service$__$url,imports<-84,scripts<-84,classes>-84,variables<-84,functions<-84,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", null, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, null, null, null, null, null, null, null, null, null, null, null],
    get$url: [function(_) {
      return this._service$__$url;
    }, null, null, 1, 0, 308, "url", 304, 305],
    set$url: [function(_, value) {
      this._service$__$url = F.notifyPropertyChangeHelper(this, C.Symbol_url, this._service$__$url, value);
    }, null, null, 3, 0, 32, 30, [], "url", 304],
    get$canCache: function() {
      return true;
    },
    get$immutable: function() {
      return false;
    },
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2, shortUrl, t3;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "url");
      shortUrl = F.notifyPropertyChangeHelper(this, C.Symbol_url, this._service$__$url, t2);
      this._service$__$url = shortUrl;
      if (J.startsWith$1$s(shortUrl, "file://") || J.startsWith$1$s(this._service$__$url, "http://")) {
        t2 = this._service$__$url;
        t3 = J.getInterceptor$asx(t2);
        shortUrl = t3.substring$1(t2, J.$add$ns(t3.lastIndexOf$1(t2, "/"), 1));
      }
      t2 = t1.$index(map, "user_name");
      t2 = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, t2);
      this._service$__$name = t2;
      if (J.get$isEmpty$asx(t2) === true)
        this._service$__$name = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, shortUrl);
      t2 = t1.$index(map, "name");
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t2);
      if (mapIsRef)
        return;
      this._loaded = true;
      t2 = this._service$_owner;
      D._upgradeCollection(map, t2.get$isolate(t2));
      t2 = this.imports;
      t3 = J.getInterceptor$ax(t2);
      t3.clear$0(t2);
      t3.addAll$1(t2, t1.$index(map, "imports"));
      t2 = this.scripts;
      t3 = J.getInterceptor$ax(t2);
      t3.clear$0(t2);
      t3.addAll$1(t2, t1.$index(map, "scripts"));
      t2 = this.classes;
      t3 = J.getInterceptor$ax(t2);
      t3.clear$0(t2);
      t3.addAll$1(t2, t1.$index(map, "classes"));
      t2 = this.variables;
      t3 = J.getInterceptor$ax(t2);
      t3.clear$0(t2);
      t3.addAll$1(t2, t1.$index(map, "variables"));
      t2 = this.functions;
      t3 = J.getInterceptor$ax(t2);
      t3.clear$0(t2);
      t3.addAll$1(t2, t1.$index(map, "functions"));
    },
    $isLibrary: true
  },
  ServiceObject_ChangeNotifier2: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  ScriptLine: {
    "^": ["Object;line<-322,text>-301", function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }],
    $isScriptLine: true
  },
  Script: {
    "^": ["ServiceObject_ChangeNotifier3;lines>-84,hits<-84,_service$__$kind,_service$__$firstTokenPos,_service$__$lastTokenPos,_shortUrl,_url,_tokenToLine,_tokenToCol,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    get$kind: [function(_) {
      return this._service$__$kind;
    }, null, null, 1, 0, 308, "kind", 304, 305],
    set$kind: [function(_, value) {
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, value);
    }, null, null, 3, 0, 32, 30, [], "kind", 304],
    get$firstTokenPos: [function() {
      return this._service$__$firstTokenPos;
    }, null, null, 1, 0, 484, "firstTokenPos", 304, 305],
    set$firstTokenPos: [function(value) {
      var t1 = this._service$__$firstTokenPos;
      if (this.get$hasObservers(this) && !J.$eq(t1, value)) {
        t1 = new T.PropertyChangeRecord(this, C.Symbol_firstTokenPos, t1, value);
        t1.$builtinTypeInfo = [null];
        this.notifyChange$1(this, t1);
      }
      this._service$__$firstTokenPos = value;
    }, null, null, 3, 0, 359, 30, [], "firstTokenPos", 304],
    get$lastTokenPos: [function() {
      return this._service$__$lastTokenPos;
    }, null, null, 1, 0, 484, "lastTokenPos", 304, 305],
    set$lastTokenPos: [function(value) {
      var t1 = this._service$__$lastTokenPos;
      if (this.get$hasObservers(this) && !J.$eq(t1, value)) {
        t1 = new T.PropertyChangeRecord(this, C.Symbol_lastTokenPos, t1, value);
        t1.$builtinTypeInfo = [null];
        this.notifyChange$1(this, t1);
      }
      this._service$__$lastTokenPos = value;
    }, null, null, 3, 0, 359, 30, [], "lastTokenPos", 304],
    get$canCache: function() {
      return true;
    },
    get$immutable: function() {
      return true;
    },
    getLine$1: function(line) {
      return J.$index$asx(this.lines, J.$sub$n(line, 1));
    },
    tokenToLine$1: function(token) {
      return this._tokenToLine.$index(0, token);
    },
    _service$_update$2: function(_, map, mapIsRef) {
      var t1, t2, t3;
      t1 = J.getInterceptor$asx(map);
      t2 = t1.$index(map, "kind");
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, t2);
      t2 = t1.$index(map, "name");
      this._url = t2;
      t3 = J.getInterceptor$asx(t2);
      t2 = t3.substring$1(t2, J.$add$ns(t3.lastIndexOf$1(t2, "/"), 1));
      this._shortUrl = t2;
      this._service$__$name = this.notifyPropertyChange$3(this, C.Symbol_name, this._service$__$name, t2);
      t2 = this._url;
      this._service$__$vmName = this.notifyPropertyChange$3(this, C.Symbol_vmName, this._service$__$vmName, t2);
      this._processSource$1(t1.$index(map, "source"));
      this._parseTokenPosTable$1(t1.$index(map, "tokenPosTable"));
    },
    _parseTokenPosTable$1: function(table) {
      var t1, line, t2, lineNumber, pos, t3, tokenOffset, colNumber, t4;
      if (table == null)
        return;
      this._tokenToLine = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this._tokenToCol = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this._service$__$firstTokenPos = F.notifyPropertyChangeHelper(this, C.Symbol_firstTokenPos, this._service$__$firstTokenPos, null);
      this._service$__$lastTokenPos = F.notifyPropertyChangeHelper(this, C.Symbol_lastTokenPos, this._service$__$lastTokenPos, null);
      for (t1 = J.get$iterator$ax(table); t1.moveNext$0();) {
        line = t1.get$current();
        t2 = J.getInterceptor$asx(line);
        lineNumber = t2.$index(line, 0);
        pos = 1;
        while (true) {
          t3 = t2.get$length(line);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(pos < t3))
            break;
          tokenOffset = t2.$index(line, pos);
          colNumber = t2.$index(line, pos + 1);
          t3 = this._service$__$firstTokenPos;
          if (t3 == null) {
            if (this.get$hasObservers(this) && !J.$eq(t3, tokenOffset)) {
              t3 = new T.PropertyChangeRecord(this, C.Symbol_firstTokenPos, t3, tokenOffset);
              t3.$builtinTypeInfo = [null];
              this.notifyChange$1(this, t3);
            }
            this._service$__$firstTokenPos = tokenOffset;
            t3 = this._service$__$lastTokenPos;
            if (this.get$hasObservers(this) && !J.$eq(t3, tokenOffset)) {
              t3 = new T.PropertyChangeRecord(this, C.Symbol_lastTokenPos, t3, tokenOffset);
              t3.$builtinTypeInfo = [null];
              this.notifyChange$1(this, t3);
            }
            this._service$__$lastTokenPos = tokenOffset;
          } else {
            t3 = J.$le$n(t3, tokenOffset) ? this._service$__$firstTokenPos : tokenOffset;
            t4 = this._service$__$firstTokenPos;
            if (this.get$hasObservers(this) && !J.$eq(t4, t3)) {
              t4 = new T.PropertyChangeRecord(this, C.Symbol_firstTokenPos, t4, t3);
              t4.$builtinTypeInfo = [null];
              this.notifyChange$1(this, t4);
            }
            this._service$__$firstTokenPos = t3;
            t3 = J.$ge$n(this._service$__$lastTokenPos, tokenOffset) ? this._service$__$lastTokenPos : tokenOffset;
            t4 = this._service$__$lastTokenPos;
            if (this.get$hasObservers(this) && !J.$eq(t4, t3)) {
              t4 = new T.PropertyChangeRecord(this, C.Symbol_lastTokenPos, t4, t3);
              t4.$builtinTypeInfo = [null];
              this.notifyChange$1(this, t4);
            }
            this._service$__$lastTokenPos = t3;
          }
          this._tokenToLine.$indexSet(0, tokenOffset, lineNumber);
          this._tokenToCol.$indexSet(0, tokenOffset, colNumber);
          pos += 2;
        }
      }
    },
    _processHits$1: function(scriptHits) {
      var t1, t2, t3, i, t4;
      t1 = J.getInterceptor$asx(scriptHits);
      t2 = this.hits;
      t3 = J.getInterceptor$ax(t2);
      i = 0;
      while (true) {
        t4 = t1.get$length(scriptHits);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        t3.$indexSet(t2, t1.$index(scriptHits, i), t1.$index(scriptHits, i + 1));
        i += 2;
      }
    },
    _processSource$1: function(source) {
      var sourceLines, t1, t2, i, i0;
      this._loaded = false;
      if (source == null)
        return;
      sourceLines = J.split$1$s(source, "\n");
      if (sourceLines.length === 0)
        return;
      this._loaded = true;
      t1 = this.lines;
      t2 = J.getInterceptor$ax(t1);
      t2.clear$0(t1);
      N.Logger_Logger("").info$1("Adding " + sourceLines.length + " source lines for " + H.S(this._url));
      for (i = 0; i < sourceLines.length; i = i0) {
        i0 = i + 1;
        t2.add$1(t1, new D.ScriptLine(i0, sourceLines[i]));
      }
    },
    $isScript: true
  },
  ServiceObject_ChangeNotifier3: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  CodeTick: {
    "^": "Object;address<,exclusiveTicks<,inclusiveTicks<",
    $isCodeTick: true
  },
  PcDescriptor: {
    "^": ["ChangeNotifier;address<,deoptId<-322,tokenPos<-322,tryIndex<-322,kind>-301,_service$__$script,_service$__$formattedLine,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", null, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, null, null, null, null],
    get$script: [function(_) {
      return this._service$__$script;
    }, null, null, 1, 0, 510, "script", 304, 305],
    set$script: [function(_, value) {
      this._service$__$script = F.notifyPropertyChangeHelper(this, C.Symbol_script, this._service$__$script, value);
    }, null, null, 3, 0, 511, 30, [], "script", 304],
    get$formattedLine: [function() {
      return this._service$__$formattedLine;
    }, null, null, 1, 0, 308, "formattedLine", 304, 305],
    set$formattedLine: [function(value) {
      this._service$__$formattedLine = F.notifyPropertyChangeHelper(this, C.Symbol_formattedLine, this._service$__$formattedLine, value);
    }, null, null, 3, 0, 32, 30, [], "formattedLine", 304],
    formattedDeoptId$0: [function() {
      var t1, t2;
      t1 = this.deoptId;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, -1))
        return "N/A";
      return t2.toString$0(t1);
    }, "call$0", "get$formattedDeoptId", 0, 0, 308, "formattedDeoptId", 304],
    formattedTokenPos$0: [function() {
      var t1, t2;
      t1 = this.tokenPos;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, -1))
        return "";
      return t2.toString$0(t1);
    }, "call$0", "get$formattedTokenPos", 0, 0, 308, "formattedTokenPos", 304],
    processScript$1: function(script) {
      var t1, line;
      this._service$__$script = F.notifyPropertyChangeHelper(this, C.Symbol_script, this._service$__$script, null);
      t1 = this.tokenPos;
      if (J.$eq(t1, -1))
        return;
      line = script.tokenToLine$1(t1);
      if (line == null)
        return;
      this._service$__$script = F.notifyPropertyChangeHelper(this, C.Symbol_script, this._service$__$script, script);
      t1 = J.get$text$x(script.getLine$1(line));
      this._service$__$formattedLine = F.notifyPropertyChangeHelper(this, C.Symbol_formattedLine, this._service$__$formattedLine, t1);
    },
    $isPcDescriptor: true
  },
  CodeInstruction: {
    "^": ["ChangeNotifier;address<-322,machine<-301,human<-301,_service$__$jumpTarget,descriptors@-537,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, function() {
      return [C.C_ObservableProperty];
    }, null, function() {
      return [C.C_Reflectable];
    }, null, null],
    get$jumpTarget: [function() {
      return this._service$__$jumpTarget;
    }, null, null, 1, 0, 538, "jumpTarget", 304, 305],
    set$jumpTarget: [function(value) {
      var t1 = this._service$__$jumpTarget;
      if (this.get$hasObservers(this) && !J.$eq(t1, value)) {
        t1 = new T.PropertyChangeRecord(this, C.Symbol_jumpTarget, t1, value);
        t1.$builtinTypeInfo = [null];
        this.notifyChange$1(this, t1);
      }
      this._service$__$jumpTarget = value;
    }, null, null, 3, 0, 539, 30, [], "jumpTarget", 304],
    get$isComment: [function() {
      return J.$eq(this.address, 0);
    }, null, null, 1, 0, 303, "isComment", 304],
    get$hasDescriptors: [function() {
      return J.$gt$n(J.get$length$asx(this.descriptors), 0);
    }, null, null, 1, 0, 303, "hasDescriptors", 304],
    formattedAddress$0: [function() {
      var t1, t2;
      t1 = this.address;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, 0))
        return "";
      return "0x" + t2.toRadixString$1(t1, 16);
    }, "call$0", "get$formattedAddress", 0, 0, 308, "formattedAddress", 304],
    formattedInclusive$1: [function(code) {
      var tick;
      if (code == null)
        return "";
      tick = J.$index$asx(code.get$addressTicks(), this.address);
      if (tick == null)
        return "";
      if (J.$eq(tick.get$inclusiveTicks(), tick.get$exclusiveTicks()))
        return "";
      return D.CodeInstruction_formatPercent(tick.get$inclusiveTicks(), code.get$totalSamplesInProfile()) + " (" + H.S(tick.get$inclusiveTicks()) + ")";
    }, "call$1", "get$formattedInclusive", 2, 0, 540, 152, [], "formattedInclusive", 304],
    formattedExclusive$1: [function(code) {
      var tick;
      if (code == null)
        return "";
      tick = J.$index$asx(code.get$addressTicks(), this.address);
      if (tick == null)
        return "";
      return D.CodeInstruction_formatPercent(tick.get$exclusiveTicks(), code.get$totalSamplesInProfile()) + " (" + H.S(tick.get$exclusiveTicks()) + ")";
    }, "call$1", "get$formattedExclusive", 2, 0, 540, 152, [], "formattedExclusive", 304],
    _getJumpAddress$0: function() {
      var address, chunks, t1, exception;
      chunks = J.split$1$s(this.human, " ");
      t1 = chunks.length;
      if (t1 !== 2)
        return 0;
      if (1 >= t1)
        return H.ioore(chunks, 1);
      address = chunks[1];
      if (J.startsWith$1$s(address, "0x"))
        address = J.substring$1$s(address, 2);
      try {
        t1 = H.Primitives_parseInt(address, 16, null);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return 0;
      }

    },
    _resolveJumpTarget$1: function(instructions) {
      var t1, address, t2, i, t3, instruction;
      t1 = this.human;
      if (!J.startsWith$1$s(t1, "j"))
        return;
      address = this._getJumpAddress$0();
      t2 = J.getInterceptor(address);
      if (t2.$eq(address, 0)) {
        P.print("Could not determine jump address for " + H.S(t1));
        return;
      }
      t1 = J.getInterceptor$asx(instructions);
      i = 0;
      while (true) {
        t3 = t1.get$length(instructions);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        instruction = t1.$index(instructions, i);
        if (J.$eq(instruction.get$address(), address)) {
          t1 = this._service$__$jumpTarget;
          if (this.get$hasObservers(this) && !J.$eq(t1, instruction)) {
            t1 = new T.PropertyChangeRecord(this, C.Symbol_jumpTarget, t1, instruction);
            t1.$builtinTypeInfo = [null];
            this.notifyChange$1(this, t1);
          }
          this._service$__$jumpTarget = instruction;
          return;
        }
        ++i;
      }
      P.print("Could not find instruction at " + t2.toRadixString$1(address, 16));
    },
    $isCodeInstruction: true,
    static: {CodeInstruction_formatPercent: [function(a, total) {
        return C.JSNumber_methods.toStringAsFixed$1(100 * J.$div$n(a, total), 2) + "%";
      }, "call$2", "CodeInstruction_formatPercent$closure", 4, 0, null, 117, [], 118, []]}
  },
  CodeKind: {
    "^": "Object;_service$_value",
    toString$0: function(_) {
      return this._service$_value;
    },
    static: {"^": "CodeKind_Native0,CodeKind_Dart0,CodeKind_Collected0,CodeKind_Reused0,CodeKind_Tag0", CodeKind_fromString: [function(s) {
        var t1 = J.getInterceptor(s);
        if (t1.$eq(s, "Native"))
          return C.CodeKind_Native;
        else if (t1.$eq(s, "Dart"))
          return C.CodeKind_Dart;
        else if (t1.$eq(s, "Collected"))
          return C.CodeKind_Collected;
        else if (t1.$eq(s, "Reused"))
          return C.CodeKind_Reused;
        else if (t1.$eq(s, "Tag"))
          return C.CodeKind_Tag;
        N.Logger_Logger("").warning$1("Unknown code kind " + H.S(s));
        throw H.wrapException(P.FallThroughError$());
      }, "call$1", "CodeKind_fromString$closure", 2, 0, null, 93, []]}
  },
  CodeCallCount: {
    "^": "Object;code>,count<",
    $isCodeCallCount: true
  },
  CodeTrieNode: {
    "^": "Object;code>,count<,children>,summedChildCount",
    $isCodeTrieNode: true
  },
  Code: {
    "^": ["ServiceObject_ChangeNotifier4;_service$__$kind,_service$__$totalSamplesInProfile,exclusiveTicks@-322,inclusiveTicks@-322,startAddress@-322,endAddress@-322,callers<-84,callees<-84,instructions<-84,addressTicks<-84,_service$__$formattedInclusiveTicks,_service$__$formattedExclusiveTicks,_service$__$objectPool,_service$__$function,_service$__$script,_service$__$isOptimized,name*,vmName@,_service$__$hasDisassembly,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records", null, null, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, function() {
      return [C.C_Reflectable];
    }, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    get$kind: [function(_) {
      return this._service$__$kind;
    }, null, null, 1, 0, 541, "kind", 304, 305],
    set$kind: [function(_, value) {
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, value);
    }, null, null, 3, 0, 542, 30, [], "kind", 304],
    get$totalSamplesInProfile: [function() {
      return this._service$__$totalSamplesInProfile;
    }, null, null, 1, 0, 484, "totalSamplesInProfile", 304, 305],
    set$totalSamplesInProfile: [function(value) {
      this._service$__$totalSamplesInProfile = F.notifyPropertyChangeHelper(this, C.Symbol_totalSamplesInProfile, this._service$__$totalSamplesInProfile, value);
    }, null, null, 3, 0, 359, 30, [], "totalSamplesInProfile", 304],
    get$formattedInclusiveTicks: [function() {
      return this._service$__$formattedInclusiveTicks;
    }, null, null, 1, 0, 308, "formattedInclusiveTicks", 304, 305],
    set$formattedInclusiveTicks: [function(value) {
      this._service$__$formattedInclusiveTicks = F.notifyPropertyChangeHelper(this, C.Symbol_formattedInclusiveTicks, this._service$__$formattedInclusiveTicks, value);
    }, null, null, 3, 0, 32, 30, [], "formattedInclusiveTicks", 304],
    get$formattedExclusiveTicks: [function() {
      return this._service$__$formattedExclusiveTicks;
    }, null, null, 1, 0, 308, "formattedExclusiveTicks", 304, 305],
    set$formattedExclusiveTicks: [function(value) {
      this._service$__$formattedExclusiveTicks = F.notifyPropertyChangeHelper(this, C.Symbol_formattedExclusiveTicks, this._service$__$formattedExclusiveTicks, value);
    }, null, null, 3, 0, 32, 30, [], "formattedExclusiveTicks", 304],
    get$objectPool: [function() {
      return this._service$__$objectPool;
    }, null, null, 1, 0, 333, "objectPool", 304, 305],
    set$objectPool: [function(value) {
      this._service$__$objectPool = F.notifyPropertyChangeHelper(this, C.Symbol_objectPool, this._service$__$objectPool, value);
    }, null, null, 3, 0, 334, 30, [], "objectPool", 304],
    get$$function: [function(_) {
      return this._service$__$function;
    }, null, null, 1, 0, 333, "function", 304, 305],
    set$$function: [function(_, value) {
      this._service$__$function = F.notifyPropertyChangeHelper(this, C.Symbol_function, this._service$__$function, value);
    }, null, null, 3, 0, 334, 30, [], "function", 304],
    get$script: [function(_) {
      return this._service$__$script;
    }, null, null, 1, 0, 510, "script", 304, 305],
    set$script: [function(_, value) {
      this._service$__$script = F.notifyPropertyChangeHelper(this, C.Symbol_script, this._service$__$script, value);
    }, null, null, 3, 0, 511, 30, [], "script", 304],
    get$isOptimized: [function() {
      return this._service$__$isOptimized;
    }, null, null, 1, 0, 303, "isOptimized", 304, 305],
    set$isOptimized: [function(value) {
      this._service$__$isOptimized = F.notifyPropertyChangeHelper(this, C.Symbol_isOptimized, this._service$__$isOptimized, value);
    }, null, null, 3, 0, 306, 30, [], "isOptimized", 304],
    get$canCache: function() {
      return true;
    },
    get$immutable: function() {
      return true;
    },
    _updateDescriptors$1: [function(script) {
      var t1, t2;
      this._service$__$script = F.notifyPropertyChangeHelper(this, C.Symbol_script, this._service$__$script, script);
      for (t1 = J.get$iterator$ax(this.instructions); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(t1.get$current().get$descriptors()); t2.moveNext$0();)
          t2.get$current().processScript$1(script);
    }, "call$1", "get$_updateDescriptors", 2, 0, 543, 544, []],
    loadScript$0: function() {
      if (this._service$__$script != null)
        return;
      if (!J.$eq(this._service$__$kind, C.CodeKind_Dart))
        return;
      var t1 = this._service$__$function;
      if (t1 == null)
        return;
      if (J.$index$asx(t1, "script") == null) {
        J.load$0$x(this._service$__$function).then$1(new D.Code_loadScript_closure(this));
        return;
      }
      J.load$0$x(J.$index$asx(this._service$__$function, "script")).then$1(this.get$_updateDescriptors());
    },
    reload$0: function(_) {
      if (J.$eq(this._service$__$kind, C.CodeKind_Dart))
        return D.ServiceObject.prototype.reload$0.call(this, this);
      return P._Future$immediate(this, null);
    },
    _resolveCalls$3: function(calls, data, codes) {
      var t1, t2, i, t3, index, count;
      t1 = J.getInterceptor$asx(data);
      t2 = J.getInterceptor$ax(calls);
      i = 0;
      while (true) {
        t3 = t1.get$length(data);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        index = H.Primitives_parseInt(t1.$index(data, i), null, null);
        count = H.Primitives_parseInt(t1.$index(data, i + 1), null, null);
        if (index >>> 0 !== index || index >= codes.length)
          return H.ioore(codes, index);
        t2.add$1(calls, new D.CodeCallCount(codes[index], count));
        i += 2;
      }
      t2.sort$1(calls, new D.Code__resolveCalls_closure());
    },
    updateProfileData$3: function(profileData, codeTable, sampleCount) {
      var t1, ticks;
      this._service$__$totalSamplesInProfile = F.notifyPropertyChangeHelper(this, C.Symbol_totalSamplesInProfile, this._service$__$totalSamplesInProfile, sampleCount);
      t1 = J.getInterceptor$asx(profileData);
      this.inclusiveTicks = H.Primitives_parseInt(t1.$index(profileData, "inclusive_ticks"), null, null);
      this.exclusiveTicks = H.Primitives_parseInt(t1.$index(profileData, "exclusive_ticks"), null, null);
      this._resolveCalls$3(this.callers, t1.$index(profileData, "callers"), codeTable);
      this._resolveCalls$3(this.callees, t1.$index(profileData, "callees"), codeTable);
      ticks = t1.$index(profileData, "ticks");
      if (ticks != null)
        this._processTicks$1(ticks);
      t1 = D.Code_formatPercent(this.inclusiveTicks, this._service$__$totalSamplesInProfile) + " (" + H.S(this.inclusiveTicks) + ")";
      this._service$__$formattedInclusiveTicks = F.notifyPropertyChangeHelper(this, C.Symbol_formattedInclusiveTicks, this._service$__$formattedInclusiveTicks, t1);
      t1 = D.Code_formatPercent(this.exclusiveTicks, this._service$__$totalSamplesInProfile) + " (" + H.S(this.exclusiveTicks) + ")";
      this._service$__$formattedExclusiveTicks = F.notifyPropertyChangeHelper(this, C.Symbol_formattedExclusiveTicks, this._service$__$formattedExclusiveTicks, t1);
    },
    _service$_update$2: function(_, m, mapIsRef) {
      var t1, t2, t3, disassembly, descriptors;
      t1 = J.getInterceptor$asx(m);
      this.name = t1.$index(m, "user_name");
      this.vmName = t1.$index(m, "name");
      t2 = t1.$index(m, "isOptimized") != null && t1.$index(m, "isOptimized");
      this._service$__$isOptimized = F.notifyPropertyChangeHelper(this, C.Symbol_isOptimized, this._service$__$isOptimized, t2);
      t2 = D.CodeKind_fromString(t1.$index(m, "kind"));
      this._service$__$kind = F.notifyPropertyChangeHelper(this, C.Symbol_kind, this._service$__$kind, t2);
      this.startAddress = H.Primitives_parseInt(t1.$index(m, "start"), 16, null);
      this.endAddress = H.Primitives_parseInt(t1.$index(m, "end"), 16, null);
      t2 = this._service$_owner;
      t2 = t2.get$isolate(t2);
      t3 = t2.getFromMap$1(t1.$index(m, "function"));
      this._service$__$function = F.notifyPropertyChangeHelper(this, C.Symbol_function, this._service$__$function, t3);
      t2 = t2.getFromMap$1(t1.$index(m, "object_pool"));
      this._service$__$objectPool = F.notifyPropertyChangeHelper(this, C.Symbol_objectPool, this._service$__$objectPool, t2);
      disassembly = t1.$index(m, "disassembly");
      if (disassembly != null)
        this._processDisassembly$1(disassembly);
      descriptors = t1.$index(m, "descriptors");
      if (descriptors != null)
        this._processDescriptors$1(J.$index$asx(descriptors, "members"));
      t1 = this.instructions;
      t2 = J.getInterceptor$asx(t1);
      this._loaded = !J.$eq(t2.get$length(t1), 0) || !J.$eq(this._service$__$kind, C.CodeKind_Dart);
      t1 = !J.$eq(t2.get$length(t1), 0) && J.$eq(this._service$__$kind, C.CodeKind_Dart);
      this._service$__$hasDisassembly = F.notifyPropertyChangeHelper(this, C.Symbol_hasDisassembly, this._service$__$hasDisassembly, t1);
    },
    get$hasDisassembly: [function() {
      return this._service$__$hasDisassembly;
    }, null, null, 1, 0, 303, "hasDisassembly", 304, 305],
    set$hasDisassembly: [function(value) {
      this._service$__$hasDisassembly = F.notifyPropertyChangeHelper(this, C.Symbol_hasDisassembly, this._service$__$hasDisassembly, value);
    }, null, null, 3, 0, 306, 30, [], "hasDisassembly", 304],
    _processDisassembly$1: function(disassembly) {
      var t1, t2, t3, i, t4, machine, human, address, t5;
      t1 = this.instructions;
      t2 = J.getInterceptor$ax(t1);
      t2.clear$0(t1);
      t3 = J.getInterceptor$asx(disassembly);
      i = 0;
      while (true) {
        t4 = t3.get$length(disassembly);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        machine = t3.$index(disassembly, i + 1);
        human = t3.$index(disassembly, i + 2);
        address = !J.$eq(t3.$index(disassembly, i), "") ? H.Primitives_parseInt(t3.$index(disassembly, i), null, null) : 0;
        t4 = D.PcDescriptor;
        t5 = [];
        t5.$builtinTypeInfo = [t4];
        t5 = new Q.ObservableList(null, null, t5, null, null);
        t5.$builtinTypeInfo = [t4];
        t2.add$1(t1, new D.CodeInstruction(address, machine, human, null, t5, null, null));
        i += 3;
      }
      for (t2 = t2.get$iterator(t1); t2.moveNext$0();)
        t2.get$current()._resolveJumpTarget$1(t1);
    },
    _processDescriptor$1: function(d) {
      var t1, address, deoptId, tokenPos, tryIndex, kind, instruction;
      t1 = J.getInterceptor$asx(d);
      address = H.Primitives_parseInt(t1.$index(d, "pc"), 16, null);
      deoptId = t1.$index(d, "deoptId");
      tokenPos = t1.$index(d, "tokenPos");
      tryIndex = t1.$index(d, "tryIndex");
      kind = J.trim$0$s(t1.$index(d, "kind"));
      for (t1 = J.get$iterator$ax(this.instructions); t1.moveNext$0();) {
        instruction = t1.get$current();
        if (J.$eq(instruction.get$address(), address)) {
          J.add$1$ax(instruction.get$descriptors(), new D.PcDescriptor(address, deoptId, tokenPos, tryIndex, kind, null, null, null, null));
          return;
        }
      }
      N.Logger_Logger("").warning$1("Could not find instruction with pc descriptor address: " + H.S(address));
    },
    _processDescriptors$1: function(descriptors) {
      var t1;
      for (t1 = J.get$iterator$ax(descriptors); t1.moveNext$0();)
        this._processDescriptor$1(t1.get$current());
    },
    _processTicks$1: function(profileTicks) {
      var t1, t2, t3, i, t4, address;
      t1 = J.getInterceptor$asx(profileTicks);
      t2 = this.addressTicks;
      t3 = J.getInterceptor$ax(t2);
      i = 0;
      while (true) {
        t4 = t1.get$length(profileTicks);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        address = H.Primitives_parseInt(t1.$index(profileTicks, i), 16, null);
        t3.$indexSet(t2, address, new D.CodeTick(address, H.Primitives_parseInt(t1.$index(profileTicks, i + 1), null, null), H.Primitives_parseInt(t1.$index(profileTicks, i + 2), null, null)));
        i += 3;
      }
    },
    contains$1: function(_, address) {
      J.$ge$n(address, this.startAddress);
      return false;
    },
    get$isDartCode: [function() {
      return J.$eq(this._service$__$kind, C.CodeKind_Dart);
    }, null, null, 1, 0, 303, "isDartCode", 304],
    $isCode: true,
    static: {Code_formatPercent: [function(a, total) {
        return C.JSNumber_methods.toStringAsFixed$1(100 * J.$div$n(a, total), 2) + "%";
      }, "call$2", "Code_formatPercent$closure", 4, 0, null, 117, [], 118, []]}
  },
  ServiceObject_ChangeNotifier4: {
    "^": "ServiceObject+ChangeNotifier;",
    $isObservable: true
  },
  Code_loadScript_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(func) {
      var t1, script;
      t1 = this.this_0;
      script = J.$index$asx(t1._service$__$function, "script");
      if (script == null)
        return;
      J.load$0$x(script).then$1(t1.get$_updateDescriptors());
    }, "call$1", null, 2, 0, null, 545, [], "call"],
    $isFunction: true
  },
  Code__resolveCalls_closure: {
    "^": "Closure:296;",
    call$2: [function(a, b) {
      return J.$sub$n(b.get$count(), a.get$count());
    }, "call$2", null, 4, 0, null, 117, [], 196, [], "call"],
    $isFunction: true
  },
  _upgradeObservableMap_closure: {
    "^": "Closure:296;map_0,owner_1",
    call$2: [function(k, v) {
      var t1, t2;
      t1 = J.getInterceptor(v);
      t2 = !!t1.$isObservableMap;
      if (t2 && D._isServiceMap(v))
        this.map_0.$indexSet(0, k, this.owner_1.getFromMap$1(v));
      else if (!!t1.$isObservableList)
        D._upgradeObservableList(v, this.owner_1);
      else if (t2)
        D._upgradeObservableMap(v, this.owner_1);
    }, "call$2", null, 4, 0, null, 372, [], 121, [], "call"],
    $isFunction: true
  }
}],
["service_error_view_element", "package:observatory/src/elements/service_error_view.dart", , R, {
  "^": "",
  ServiceErrorViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier32;_service_error_view_element$__$error%-546,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$error: [function(receiver) {
      return receiver._service_error_view_element$__$error;
    }, null, null, 1, 0, 547, "error", 304, 307],
    set$error: [function(receiver, value) {
      receiver._service_error_view_element$__$error = this.notifyPropertyChange$3(receiver, C.Symbol_error, receiver._service_error_view_element$__$error, value);
    }, null, null, 3, 0, 548, 30, [], "error", 304],
    "@": function() {
      return [C.CustomTag_iFj];
    },
    static: {ServiceErrorViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ServiceErrorViewElement_methods.Element$created$0(receiver);
        C.ServiceErrorViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ServiceErrorViewElement$created"]}
  },
  "+ServiceErrorViewElement": [549],
  ObservatoryElement_ChangeNotifier32: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["service_exception_view_element", "package:observatory/src/elements/service_exception_view.dart", , D, {
  "^": "",
  ServiceExceptionViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier33;_service_exception_view_element$__$exception%-550,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$exception: [function(receiver) {
      return receiver._service_exception_view_element$__$exception;
    }, null, null, 1, 0, 551, "exception", 304, 307],
    set$exception: [function(receiver, value) {
      receiver._service_exception_view_element$__$exception = this.notifyPropertyChange$3(receiver, C.Symbol_exception, receiver._service_exception_view_element$__$exception, value);
    }, null, null, 3, 0, 552, 30, [], "exception", 304],
    "@": function() {
      return [C.CustomTag_2Zx];
    },
    static: {ServiceExceptionViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ServiceExceptionViewElement_methods.Element$created$0(receiver);
        C.ServiceExceptionViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ServiceExceptionViewElement$created"]}
  },
  "+ServiceExceptionViewElement": [553],
  ObservatoryElement_ChangeNotifier33: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["service_html", "package:observatory/service_html.dart", , U, {
  "^": "",
  HttpVM: {
    "^": "VM;host>,_service$__$version,_service$__$architecture,_service$__$uptime,_service$__$assertsEnabled,_service$__$typeChecksEnabled,exceptions,errors,_cache,_isolateCache,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    getString$1: function(_, id) {
      var t1;
      N.Logger_Logger("").info$1("Fetching " + H.S(id) + " from " + H.S(this.host));
      t1 = this.host;
      if (typeof t1 !== "string")
        return t1.$add();
      return W.HttpRequest_getString(J.$add$ns(t1, id), null, null).catchError$1(new U.HttpVM_getString_closure());
    },
    HttpVM$0: function() {
      this.host = "http://" + H.S(J.get$host$x(C.Window_methods.get$location(window))) + "/";
    }
  },
  HttpVM_getString_closure: {
    "^": "Closure:115;",
    call$1: [function(error) {
      var t1;
      N.Logger_Logger("").severe$1("HttpRequest.getString failed.");
      t1 = J.getInterceptor$x(error);
      t1.get$target(error);
      return C.JsonCodec_null_null.encode$1(H.fillLiteralMap(["type", "ServiceException", "id", "", "response", J.get$responseText$x(t1.get$target(error)), "kind", "NetworkException", "message", "Could not connect to service. Check that you started the VM with the following flags:\n --enable-vm-service --pause-isolates-on-exit"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    }, "call$1", null, 2, 0, null, 168, [], "call"],
    $isFunction: true
  },
  DartiumVM: {
    "^": "VM;_outstandingRequests,_requestSerial,_service$__$version,_service$__$architecture,_service$__$uptime,_service$__$assertsEnabled,_service$__$typeChecksEnabled,exceptions,errors,_cache,_isolateCache,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_service$_owner,_service$_id,_serviceType,_loaded,_service$__$name,_service$__$vmName,_inProgressReload,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    _messageHandler$1: [function(msg) {
      var t1, id, $name, data, completer;
      t1 = J.getInterceptor$x(msg);
      id = J.$index$asx(t1.get$data(msg), "id");
      $name = J.$index$asx(t1.get$data(msg), "name");
      data = J.$index$asx(t1.get$data(msg), "data");
      if (!J.$eq($name, "observatoryData"))
        return;
      t1 = this._outstandingRequests;
      completer = t1.$index(0, id);
      t1.remove$1(0, id);
      J.complete$1$x(completer, data);
    }, "call$1", "get$_messageHandler", 2, 0, 166, 22, []],
    getString$1: function(_, path) {
      var idString, message, completer;
      idString = "" + this._requestSerial;
      message = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      message.$indexSet(0, "id", idString);
      message.$indexSet(0, "method", "observatoryQuery");
      message.$indexSet(0, "query", "/" + H.S(path));
      this._requestSerial = this._requestSerial + 1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      this._outstandingRequests.$indexSet(0, idString, completer);
      J.postMessage$2$x(W._convertNativeToDart_Window(window.parent), C.JsonCodec_null_null.encode$1(message), "*");
      return completer.future;
    },
    DartiumVM$0: function() {
      var t1 = C.EventStreamProvider_message.forTarget$1(window);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$_messageHandler()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      N.Logger_Logger("").info$1("Connected to DartiumVM");
    }
  }
}],
["service_object_view_element", "package:observatory/src/elements/service_view.dart", , U, {
  "^": "",
  ServiceObjectViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier34;_service_object_view_element$__$object%-337,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$object: [function(receiver) {
      return receiver._service_object_view_element$__$object;
    }, null, null, 1, 0, 316, "object", 304, 307],
    set$object: [function(receiver, value) {
      receiver._service_object_view_element$__$object = this.notifyPropertyChange$3(receiver, C.Symbol_object, receiver._service_object_view_element$__$object, value);
    }, null, null, 3, 0, 317, 30, [], "object", 304],
    _constructElementForObject$0: [function(receiver) {
      var element;
      switch (receiver._service_object_view_element$__$object.get$serviceType()) {
        case "AllocationProfile":
          element = W._ElementFactoryProvider_createElement_tag("heap-profile", null);
          J.set$profile$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "BreakpointList":
          element = W._ElementFactoryProvider_createElement_tag("breakpoint-list", null);
          J.set$msg$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Class":
          element = W._ElementFactoryProvider_createElement_tag("class-view", null);
          J.set$cls$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Code":
          element = W._ElementFactoryProvider_createElement_tag("code-view", null);
          J.set$code$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Error":
          element = W._ElementFactoryProvider_createElement_tag("error-view", null);
          J.set$error$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Field":
          element = W._ElementFactoryProvider_createElement_tag("field-view", null);
          J.set$field$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Function":
          element = W._ElementFactoryProvider_createElement_tag("function-view", null);
          J.set$$function$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "HeapMap":
          element = W._ElementFactoryProvider_createElement_tag("heap-map", null);
          J.set$fragmentation$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "LibraryPrefix":
        case "TypeRef":
        case "TypeParameter":
        case "BoundedType":
        case "Int32x4":
        case "Float32x4":
        case "Float64x4":
        case "TypedData":
        case "ExternalTypedData":
        case "Capability":
        case "ReceivePort":
        case "SendPort":
        case "Stacktrace":
        case "JSRegExp":
        case "WeakProperty":
        case "MirrorReference":
        case "UserTag":
        case "Type":
        case "Array":
        case "Bool":
        case "Closure":
        case "Double":
        case "GrowableObjectArray":
        case "Instance":
        case "Smi":
        case "Mint":
        case "Bigint":
        case "String":
          element = W._ElementFactoryProvider_createElement_tag("instance-view", null);
          J.set$instance$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Isolate":
          element = W._ElementFactoryProvider_createElement_tag("isolate-view", null);
          J.set$isolate$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Library":
          element = W._ElementFactoryProvider_createElement_tag("library-view", null);
          J.set$library$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Profile":
          element = W._ElementFactoryProvider_createElement_tag("isolate-profile", null);
          J.set$profile$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "ServiceError":
          element = W._ElementFactoryProvider_createElement_tag("service-error-view", null);
          J.set$error$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "ServiceException":
          element = W._ElementFactoryProvider_createElement_tag("service-exception-view", null);
          J.set$exception$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "Script":
          element = W._ElementFactoryProvider_createElement_tag("script-view", null);
          J.set$script$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "StackTrace":
          element = W._ElementFactoryProvider_createElement_tag("stack-trace", null);
          J.set$trace$x(element, receiver._service_object_view_element$__$object);
          return element;
        case "VM":
          element = W._ElementFactoryProvider_createElement_tag("vm-view", null);
          J.set$vm$x(element, receiver._service_object_view_element$__$object);
          return element;
        default:
          element = W._ElementFactoryProvider_createElement_tag("json-view", null);
          J.set$map$ax(element, receiver._service_object_view_element$__$object);
          return element;
      }
    }, "call$0", "get$_constructElementForObject", 0, 0, 554, "_constructElementForObject"],
    objectChanged$1: [function(receiver, oldValue) {
      var t1, type, element;
      receiver.textContent = "";
      t1 = receiver._service_object_view_element$__$object;
      if (t1 == null) {
        N.Logger_Logger("").info$1("Viewing null object.");
        return;
      }
      type = t1.get$serviceType();
      element = this._constructElementForObject$0(receiver);
      if (element == null) {
        N.Logger_Logger("").info$1("Unable to find a view element for '" + H.S(type) + "'");
        return;
      }
      receiver.appendChild(element);
      N.Logger_Logger("").info$1("Viewing object of '" + H.S(type) + "'");
    }, "call$1", "get$objectChanged", 2, 0, 115, 239, [], "objectChanged"],
    "@": function() {
      return [C.CustomTag_FVH];
    },
    static: {ServiceObjectViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ServiceObjectViewElement_methods.Element$created$0(receiver);
        C.ServiceObjectViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ServiceObjectViewElement$created"]}
  },
  "+ServiceObjectViewElement": [555],
  ObservatoryElement_ChangeNotifier34: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["service_ref_element", "package:observatory/src/elements/service_ref.dart", , Q, {
  "^": "",
  ServiceRefElement: {
    "^": ["ObservatoryElement_ChangeNotifier0;_service_ref_element$__$ref%-337,_service_ref_element$__$internal%-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$ref: [function(receiver) {
      return receiver._service_ref_element$__$ref;
    }, null, null, 1, 0, 316, "ref", 304, 307],
    set$ref: [function(receiver, value) {
      receiver._service_ref_element$__$ref = this.notifyPropertyChange$3(receiver, C.Symbol_ref, receiver._service_ref_element$__$ref, value);
    }, null, null, 3, 0, 317, 30, [], "ref", 304],
    get$internal: [function(receiver) {
      return receiver._service_ref_element$__$internal;
    }, null, null, 1, 0, 303, "internal", 304, 307],
    set$internal: [function(receiver, value) {
      receiver._service_ref_element$__$internal = this.notifyPropertyChange$3(receiver, C.Symbol_internal, receiver._service_ref_element$__$internal, value);
    }, null, null, 3, 0, 306, 30, [], "internal", 304],
    refChanged$1: [function(receiver, oldValue) {
      this.notifyPropertyChange$3(receiver, C.Symbol_url, "", this.get$url(receiver));
      this.notifyPropertyChange$3(receiver, C.Symbol_name, [], this.get$name(receiver));
      this.notifyPropertyChange$3(receiver, C.Symbol_nameIsEmpty, 0, 1);
      this.notifyPropertyChange$3(receiver, C.Symbol_hoverText, "", this.get$hoverText(receiver));
    }, "call$1", "get$refChanged", 2, 0, 166, 239, [], "refChanged"],
    get$url: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 == null)
        return "NULL REF";
      return t1.get$hashLink();
    }, null, null, 1, 0, 308, "url"],
    get$serviceId: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 == null)
        return "NULL REF";
      return J.get$id$x(t1);
    }, null, null, 1, 0, 308, "serviceId"],
    get$hoverText: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 == null)
        return "NULL REF";
      return t1.get$vmName();
    }, null, null, 1, 0, 308, "hoverText"],
    get$name: [function(receiver) {
      var t1 = receiver._service_ref_element$__$ref;
      if (t1 == null)
        return "NULL REF";
      return J.get$name$x(t1);
    }, null, null, 1, 0, 308, "name"],
    get$nameIsEmpty: [function(receiver) {
      return J.get$isEmpty$asx(this.get$name(receiver));
    }, null, null, 1, 0, 303, "nameIsEmpty"],
    "@": function() {
      return [C.CustomTag_sww];
    },
    static: {ServiceRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ServiceRefElement_methods.Element$created$0(receiver);
        C.ServiceRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new ServiceRefElement$created"]}
  },
  "+ServiceRefElement": [556],
  ObservatoryElement_ChangeNotifier0: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["sliding_checkbox_element", "package:observatory/src/elements/sliding_checkbox.dart", , Q, {
  "^": "",
  SlidingCheckboxElement: {
    "^": ["PolymerElement_ChangeNotifier2;_sliding_checkbox_element$__$checked%-300,_sliding_checkbox_element$__$checkedText%-301,_sliding_checkbox_element$__$uncheckedText%-301,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$checked: [function(receiver) {
      return receiver._sliding_checkbox_element$__$checked;
    }, null, null, 1, 0, 303, "checked", 304, 307],
    set$checked: [function(receiver, value) {
      receiver._sliding_checkbox_element$__$checked = this.notifyPropertyChange$3(receiver, C.Symbol_checked, receiver._sliding_checkbox_element$__$checked, value);
    }, null, null, 3, 0, 306, 30, [], "checked", 304],
    get$checkedText: [function(receiver) {
      return receiver._sliding_checkbox_element$__$checkedText;
    }, null, null, 1, 0, 308, "checkedText", 304, 307],
    set$checkedText: [function(receiver, value) {
      receiver._sliding_checkbox_element$__$checkedText = this.notifyPropertyChange$3(receiver, C.Symbol_checkedText, receiver._sliding_checkbox_element$__$checkedText, value);
    }, null, null, 3, 0, 32, 30, [], "checkedText", 304],
    get$uncheckedText: [function(receiver) {
      return receiver._sliding_checkbox_element$__$uncheckedText;
    }, null, null, 1, 0, 308, "uncheckedText", 304, 307],
    set$uncheckedText: [function(receiver, value) {
      receiver._sliding_checkbox_element$__$uncheckedText = this.notifyPropertyChange$3(receiver, C.Symbol_uncheckedText, receiver._sliding_checkbox_element$__$uncheckedText, value);
    }, null, null, 3, 0, 32, 30, [], "uncheckedText", 304],
    change$3: [function(receiver, e, details, target) {
      var t1 = J.get$checked$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#slide-switch"));
      receiver._sliding_checkbox_element$__$checked = this.notifyPropertyChange$3(receiver, C.Symbol_checked, receiver._sliding_checkbox_element$__$checked, t1);
    }, "call$3", "get$change", 6, 0, 346, 21, [], 557, [], 81, [], "change"],
    "@": function() {
      return [C.CustomTag_NTs];
    },
    static: {SlidingCheckboxElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.SlidingCheckboxElement_methods.Element$created$0(receiver);
        C.SlidingCheckboxElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new SlidingCheckboxElement$created"]}
  },
  "+SlidingCheckboxElement": [558],
  PolymerElement_ChangeNotifier2: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["stack_frame_element", "package:observatory/src/elements/stack_frame.dart", , K, {
  "^": "",
  StackFrameElement: {
    "^": ["ObservatoryElement_ChangeNotifier35;_stack_frame_element$__$frame%-448,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$frame: [function(receiver) {
      return receiver._stack_frame_element$__$frame;
    }, null, null, 1, 0, 450, "frame", 304, 307],
    set$frame: [function(receiver, value) {
      receiver._stack_frame_element$__$frame = this.notifyPropertyChange$3(receiver, C.Symbol_frame, receiver._stack_frame_element$__$frame, value);
    }, null, null, 3, 0, 451, 30, [], "frame", 304],
    "@": function() {
      return [C.CustomTag_hic];
    },
    static: {StackFrameElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.StackFrameElement_methods.Element$created$0(receiver);
        C.StackFrameElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new StackFrameElement$created"]}
  },
  "+StackFrameElement": [559],
  ObservatoryElement_ChangeNotifier35: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["stack_trace_element", "package:observatory/src/elements/stack_trace.dart", , X, {
  "^": "",
  StackTraceElement: {
    "^": ["ObservatoryElement_ChangeNotifier36;_stack_trace_element$__$trace%-332,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$trace: [function(receiver) {
      return receiver._stack_trace_element$__$trace;
    }, null, null, 1, 0, 333, "trace", 304, 307],
    set$trace: [function(receiver, value) {
      receiver._stack_trace_element$__$trace = this.notifyPropertyChange$3(receiver, C.Symbol_trace, receiver._stack_trace_element$__$trace, value);
    }, null, null, 3, 0, 334, 30, [], "trace", 304],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._stack_trace_element$__$trace).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_VEQ];
    },
    static: {StackTraceElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.StackTraceElement_methods.Element$created$0(receiver);
        C.StackTraceElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new StackTraceElement$created"]}
  },
  "+StackTraceElement": [560],
  ObservatoryElement_ChangeNotifier36: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["template_binding", "package:template_binding/template_binding.dart", , M, {
  "^": "",
  _InputBinding__getStreamForInputType: [function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isOptionElement)
      return C.EventStreamProvider_input.forElement$1(element);
    switch (t1.get$type(element)) {
      case "checkbox":
        return $.get$_InputBinding__checkboxEventType().forTarget$1(element);
      case "radio":
      case "select-multiple":
      case "select-one":
        return t1.get$onChange(element);
      default:
        return t1.get$onInput(element);
    }
  }, "call$1", "_InputBinding__getStreamForInputType$closure", 2, 0, null, 141, []],
  _createInstanceBindingMap: [function(node, delegate) {
    var bindings, t1, t2, templateRef, c, children, i, childMap;
    bindings = M._getBindings(node, delegate);
    t1 = J.getInterceptor(node);
    if (!!t1.$isElement)
      if (node.localName !== "template")
        t2 = t1.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(node)) === true;
      else
        t2 = true;
    else
      t2 = false;
    templateRef = t2 ? node : null;
    for (c = t1.get$firstChild(node), children = null, i = 0; c != null; c = c.nextSibling, ++i) {
      childMap = M._createInstanceBindingMap(c, delegate);
      if (childMap == null)
        continue;
      if (children == null)
        children = P.HashMap_HashMap(null, null, null, null, null);
      children.$indexSet(0, i, childMap);
    }
    if (bindings == null && children == null && templateRef == null)
      return;
    return new M._InstanceBindingMap(bindings, children, templateRef, i);
  }, "call$2", "_createInstanceBindingMap$closure", 4, 0, null, 269, [], 287, []],
  _addMapBindings: [function(node, map, model, delegate, bound) {
    var t1, i, c;
    if (map == null)
      return;
    if (map.get$templateRef() != null) {
      t1 = map.get$templateRef();
      M.nodeBindFallback(node)._decorate$1(t1);
      if (delegate != null)
        M.nodeBindFallback(node).set$_bindingDelegate(delegate);
    }
    t1 = J.getInterceptor$x(map);
    if (t1.get$bindings(map) != null)
      M._processBindings(t1.get$bindings(map), node, model, bound);
    if (t1.get$children(map) == null)
      return;
    i = map.get$numChildren() - node.childNodes.length;
    for (c = node.firstChild; c != null; c = c.nextSibling, ++i) {
      if (i < 0)
        continue;
      M._addMapBindings(c, J.$index$asx(t1.get$children(map), i), model, delegate, bound);
    }
  }, "call$5", "_addMapBindings$closure", 10, 0, null, 269, [], 160, [], 288, [], 287, [], 289, []],
  _getTreeScope: [function(node) {
    var t1;
    for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
      node = t1.get$parentNode(node);
    if (!!t1.$isDocument || !!t1.$isShadowRoot || !!t1.$isSvgSvgElement)
      return node;
    return;
  }, "call$1", "_getTreeScope$closure", 2, 0, null, 269, []],
  _getBindings: [function(node, delegate) {
    var t1, tokens;
    t1 = J.getInterceptor(node);
    if (!!t1.$isElement)
      return M._parseAttributeBindings(node, delegate);
    if (!!t1.$isText) {
      tokens = M._parseMustaches(node.textContent, "text", node, delegate);
      if (tokens != null)
        return ["text", tokens];
    }
    return;
  }, "call$2", "_getBindings$closure", 4, 0, null, 269, [], 287, []],
  _parseAttributeBindings: [function(element, delegate) {
    var t1, t2, bindings;
    t1 = {};
    t1.bindings_0 = null;
    t1.ifFound_1 = false;
    t1.bindFound_2 = false;
    new W._ElementAttributeMap(element).forEach$1(0, new M._parseAttributeBindings_closure(t1, element, delegate, M.isSemanticTemplate(element)));
    if (t1.ifFound_1 && !t1.bindFound_2) {
      t2 = t1.bindings_0;
      if (t2 == null) {
        bindings = [];
        t1.bindings_0 = bindings;
        t2 = bindings;
      }
      t2.push("bind");
      t2.push(M._parseMustaches("{{}}", "bind", element, delegate));
    }
    return t1.bindings_0;
  }, "call$2", "_parseAttributeBindings$closure", 4, 0, null, 141, [], 287, []],
  _processBindings: [function(bindings, node, model, bound) {
    var t1, t2, t3, i, $name, tokens, t4, bindingPath, delegateFn, delegateBinding, bindingModel, observer, j, t5, subPath, t6, subModel, binding;
    for (t1 = J.getInterceptor$asx(bindings), t2 = bound != null, t3 = !!J.getInterceptor(node).$isNodeBindExtension, i = 0; i < t1.get$length(bindings); i += 2) {
      $name = t1.$index(bindings, i);
      tokens = t1.$index(bindings, i + 1);
      t4 = tokens.get$tokens();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      bindingPath = t4[1];
      if (tokens.get$hasOnePath()) {
        t4 = tokens.get$tokens();
        if (2 >= t4.length)
          return H.ioore(t4, 2);
        delegateFn = t4[2];
        if (delegateFn != null) {
          delegateBinding = delegateFn.call$2(model, node);
          if (delegateBinding != null) {
            bindingModel = delegateBinding;
            bindingPath = "value";
          } else
            bindingModel = model;
        } else
          bindingModel = model;
        if (!tokens.get$isSimplePath()) {
          bindingModel = L.PathObserver$(bindingModel, bindingPath, tokens.get$combinator());
          bindingPath = "value";
        }
      } else {
        t4 = [];
        observer = new Y.CompoundPathObserver(t4, [], null, tokens.get$combinator(), false, false, null, null);
        for (j = 1; j < tokens.get$tokens().length; j += 3) {
          t5 = tokens.get$tokens();
          if (j >= t5.length)
            return H.ioore(t5, j);
          subPath = t5[j];
          t5 = tokens.get$tokens();
          t6 = j + 1;
          if (t6 >= t5.length)
            return H.ioore(t5, t6);
          delegateFn = t5[t6];
          delegateBinding = delegateFn != null ? delegateFn.call$2(model, node) : null;
          if (delegateBinding != null) {
            subModel = delegateBinding;
            subPath = "value";
          } else
            subModel = model;
          if (observer._started)
            H.throwExpression(new P.StateError("Cannot add more paths once started."));
          t4.push(L.PathObserver$(subModel, subPath, null));
        }
        observer.start$0(0);
        bindingModel = observer;
        bindingPath = "value";
      }
      binding = J.bind$3$x(t3 ? node : M.nodeBindFallback(node), $name, bindingModel, bindingPath);
      if (t2)
        bound.push(binding);
    }
  }, "call$4", "_processBindings$closure", 6, 2, null, 84, 294, [], 269, [], 288, [], 289, []],
  _parseMustaches: [function(s, $name, node, delegate) {
    var t1, t2, t3, tokens, lastIndex, startIndex, endIndex, pathString;
    t1 = s.length;
    if (t1 === 0)
      return;
    for (t2 = delegate == null, t3 = J.getInterceptor$asx(s), tokens = null, lastIndex = 0; lastIndex < t1;) {
      startIndex = t3.indexOf$2(s, "{{", lastIndex);
      endIndex = startIndex < 0 ? -1 : C.JSString_methods.indexOf$2(s, "}}", startIndex + 2);
      if (endIndex < 0) {
        if (tokens == null)
          return;
        tokens.push(C.JSString_methods.substring$1(s, lastIndex));
        break;
      }
      if (tokens == null)
        tokens = [];
      tokens.push(C.JSString_methods.substring$2(s, lastIndex, startIndex));
      pathString = C.JSString_methods.trim$0(C.JSString_methods.substring$2(s, startIndex + 2, endIndex));
      tokens.push(pathString);
      tokens.push(t2 ? null : A.Polymer_prepareBinding(pathString, $name, node, T.PolymerExpressions.prototype.get$prepareBinding.call(delegate)));
      lastIndex = endIndex + 2;
    }
    if (lastIndex === t1)
      tokens.push("");
    t1 = new M._MustacheTokens(tokens, null);
    t1._MustacheTokens$1(tokens);
    return t1;
  }, "call$4", "_parseMustaches$closure", 8, 0, null, 93, [], 12, [], 269, [], 287, []],
  _addTemplateInstanceRecord: [function(fragment, model) {
    var node, instanceRecord;
    node = fragment.firstChild;
    if (node == null)
      return;
    instanceRecord = new M.TemplateInstance(node, fragment.lastChild, model);
    for (; node != null;) {
      M.nodeBindFallback(node).set$_templateInstance(instanceRecord);
      node = node.nextSibling;
    }
  }, "call$2", "_addTemplateInstanceRecord$closure", 4, 0, null, 216, [], 288, []],
  nodeBindFallback: [function(node) {
    var t1, values, extension, t2;
    t1 = $.get$_expando();
    t1.toString;
    values = H.Primitives_getProperty(node, "expando$values");
    extension = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
    if (extension != null)
      return extension;
    t2 = J.getInterceptor(node);
    if (!!t2.$isInputElement)
      extension = new M._InputElementExtension(node, null, null);
    else if (!!t2.$isSelectElement)
      extension = new M._SelectElementExtension(node, null, null);
    else if (!!t2.$isTextAreaElement)
      extension = new M._TextAreaElementExtension(node, null, null);
    else if (!!t2.$isElement) {
      if (node.localName !== "template")
        t2 = t2.get$attributes(node)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(node)) === true;
      else
        t2 = true;
      extension = t2 ? new M.TemplateBindExtension(null, null, null, false, null, null, null, null, null, node, null, null) : new M._ElementExtension(node, null, null);
    } else
      extension = !!t2.$isText ? new M._TextExtension(node, null, null) : new M.NodeBindExtension(node, null, null);
    t1.$indexSet(0, node, extension);
    return extension;
  }, "call$1", "nodeBindFallback$closure", 2, 0, null, 269, []],
  isSemanticTemplate: [function(n) {
    var t1 = J.getInterceptor(n);
    if (!!t1.$isElement)
      if (n.localName !== "template")
        t1 = t1.get$attributes(n)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(n)) === true;
      else
        t1 = true;
    else
      t1 = false;
    return t1;
  }, "call$1", "isSemanticTemplate$closure", 2, 0, null, 207, []],
  _ElementExtension: {
    "^": "NodeBindExtension;_node,_bindings,_templateInstance",
    bind$3: function(_, $name, model, path) {
      var t1, t2, binding, conditional, name0;
      J.unbind$1$x(this.get$_template_binding$_self(), $name);
      if (!!J.getInterceptor(this.get$_node()).$isOptionElement && J.$eq($name, "value")) {
        t1 = H.interceptedTypeCast(this.get$_node(), "$isOptionElement");
        t1.toString;
        new W._ElementAttributeMap(t1).remove$1(0, $name);
        t1 = this.get$_node();
        t2 = path != null ? path : "";
        binding = new M._OptionValueBinding(null, t1, model, null, null, "value", t2);
        binding.NodeBinding$4(t1, "value", model, path);
        binding._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(binding.get$nodeValueChanged());
      } else {
        t1 = this.get$_node();
        t2 = J.getInterceptor$s($name);
        conditional = t2.endsWith$1($name, "?");
        if (conditional) {
          J.get$attributes$x(t1).remove$1(0, $name);
          name0 = t2.substring$2($name, 0, J.$sub$n(t2.get$length($name), 1));
        } else
          name0 = $name;
        t2 = path != null ? path : "";
        binding = new M._AttributeBinding(conditional, t1, model, null, null, name0, t2);
        binding.NodeBinding$4(t1, name0, model, path);
      }
      this.get$bindings(this).$indexSet(0, $name, binding);
      return binding;
    }
  },
  _AttributeBinding: {
    "^": "NodeBinding;conditional,_node_binding$_node,_model,_observer,_pathSub,property,path",
    get$node: function() {
      return X.NodeBinding.prototype.get$node.call(this);
    },
    valueChanged$1: function(value) {
      var t1, t2;
      if (this.conditional) {
        t1 = null != value && false !== value;
        t2 = this.property;
        if (t1)
          J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this))._element.setAttribute(t2, "");
        else
          J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this)).remove$1(0, t2);
      } else {
        t1 = J.get$attributes$x(X.NodeBinding.prototype.get$node.call(this));
        t2 = value == null ? "" : H.S(value);
        t1._element.setAttribute(this.property, t2);
      }
    }
  },
  _OptionValueBinding: {
    "^": "_ValueBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
    get$node: function() {
      return M._ValueBinding.prototype.get$node.call(this);
    },
    valueChanged$1: function(newValue) {
      var select, t1, valueBinding, oldValue, selectBinding;
      select = J.get$parent$x(M._ValueBinding.prototype.get$node.call(this));
      t1 = J.getInterceptor(select);
      if (!!t1.$isSelectElement) {
        valueBinding = J.$index$asx(J.get$bindings$x(M.nodeBindFallback(select)), "value");
        if (!!J.getInterceptor(valueBinding).$is_SelectBinding) {
          oldValue = select.value;
          selectBinding = valueBinding;
        } else {
          oldValue = null;
          selectBinding = null;
        }
      } else {
        oldValue = null;
        selectBinding = null;
      }
      M._ValueBinding.prototype.valueChanged$1.call(this, newValue);
      if (selectBinding != null && selectBinding.get$_node_binding$_node() != null && !J.$eq(t1.get$value(select), oldValue))
        selectBinding.nodeValueChanged$1(null);
    }
  },
  _InputBinding: {
    "^": "NodeBinding;",
    close$0: function(_) {
      if (this._node_binding$_node == null)
        return;
      this._eventSub.cancel$0();
      X.NodeBinding.prototype.close$0.call(this, this);
    }
  },
  closure2: {
    "^": "Closure:114;",
    call$0: [function() {
      var checkbox, t1, fired, t2, $event;
      checkbox = document.createElement("div", null).appendChild(W.InputElement_InputElement(null));
      t1 = J.getInterceptor$x(checkbox);
      t1.set$type(checkbox, "checkbox");
      fired = [];
      t2 = t1.get$onClick(checkbox);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new M._closure5(fired)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = t1.get$onChange(checkbox);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new M._closure6(fired)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = window;
      $event = document.createEvent("MouseEvent");
      J._initMouseEvent$15$x($event, "click", true, true, t1, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      checkbox.dispatchEvent($event);
      return fired.length === 1 ? C.EventStreamProvider_change : C.JSArray_methods.get$first(fired);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _closure5: {
    "^": "Closure:115;fired_0",
    call$1: [function(e) {
      this.fired_0.push(C.EventStreamProvider_click);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _closure6: {
    "^": "Closure:115;fired_1",
    call$1: [function(e) {
      this.fired_1.push(C.EventStreamProvider_change);
    }, "call$1", null, 2, 0, null, 21, [], "call"],
    $isFunction: true
  },
  _ValueBinding: {
    "^": "_InputBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
    get$node: function() {
      return X.NodeBinding.prototype.get$node.call(this);
    },
    valueChanged$1: function(newValue) {
      var t1 = this.get$node();
      J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
    },
    nodeValueChanged$1: [function(e) {
      var t1 = J.get$value$x(this.get$node());
      J.set$value$x(this._observer, t1);
      O.dirtyCheckObservables();
    }, "call$1", "get$nodeValueChanged", 2, 0, 166, 21, []]
  },
  _CheckedBinding: {
    "^": "_InputBinding;_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
    get$node: function() {
      return X.NodeBinding.prototype.get$node.call(this);
    },
    valueChanged$1: function(newValue) {
      var t1 = X.NodeBinding.prototype.get$node.call(this);
      J.set$checked$x(t1, null != newValue && false !== newValue);
    },
    nodeValueChanged$1: [function(e) {
      var t1, r, checkedBinding;
      t1 = J.get$checked$x(X.NodeBinding.prototype.get$node.call(this));
      J.set$value$x(this._observer, t1);
      if (!!J.getInterceptor(X.NodeBinding.prototype.get$node.call(this)).$isInputElement && J.$eq(J.get$type$x(X.NodeBinding.prototype.get$node.call(this)), "radio"))
        for (t1 = J.get$iterator$ax(M._CheckedBinding__getAssociatedRadioButtons(X.NodeBinding.prototype.get$node.call(this))); t1.moveNext$0();) {
          r = t1.get$current();
          checkedBinding = J.$index$asx(J.get$bindings$x(!!J.getInterceptor(r).$isNodeBindExtension ? r : M.nodeBindFallback(r)), "checked");
          if (checkedBinding != null)
            J.set$value$x(checkedBinding, false);
        }
      O.dirtyCheckObservables();
    }, "call$1", "get$nodeValueChanged", 2, 0, 166, 21, []],
    static: {_CheckedBinding__getAssociatedRadioButtons: [function(element) {
        var t1, treeScope, radios;
        t1 = J.getInterceptor$x(element);
        if (t1.get$form(element) != null) {
          t1 = t1.get$form(element);
          t1.toString;
          t1 = new W._ChildNodeListLazy(t1);
          return t1.where$1(t1, new M._CheckedBinding__getAssociatedRadioButtons_closure(element));
        } else {
          treeScope = M._getTreeScope(element);
          if (treeScope == null)
            return C.List_empty;
          radios = J.querySelectorAll$1$x(treeScope, "input[type=\"radio\"][name=\"" + H.S(t1.get$name(element)) + "\"]");
          return radios.where$1(radios, new M._CheckedBinding__getAssociatedRadioButtons_closure0(element));
        }
      }, "call$1", "_CheckedBinding__getAssociatedRadioButtons$closure", 2, 0, null, 141, []]}
  },
  _CheckedBinding__getAssociatedRadioButtons_closure: {
    "^": "Closure:115;element_0",
    call$1: [function(el) {
      var t1, t2;
      t1 = this.element_0;
      t2 = J.getInterceptor(el);
      if (!t2.$eq(el, t1))
        if (!!t2.$isInputElement)
          if (el.type === "radio") {
            t2 = el.name;
            t1 = J.get$name$x(t1);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    }, "call$1", null, 2, 0, null, 291, [], "call"],
    $isFunction: true
  },
  _CheckedBinding__getAssociatedRadioButtons_closure0: {
    "^": "Closure:115;element_1",
    call$1: [function(el) {
      var t1 = J.getInterceptor(el);
      return !t1.$eq(el, this.element_1) && t1.get$form(el) == null;
    }, "call$1", null, 2, 0, null, 291, [], "call"],
    $isFunction: true
  },
  _SelectBinding: {
    "^": "_InputBinding;_onMutation,_eventSub,_node_binding$_node,_model,_observer,_pathSub,property,path",
    get$node: function() {
      return X.NodeBinding.prototype.get$node.call(this);
    },
    valueChanged$1: function(newValue) {
      var t1;
      this._cancelMutationObserver$0();
      if (this._tryUpdateValue$1(newValue) === true)
        return;
      t1 = new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)(H.convertDartClosureToJS(W._wrapBinaryZone(new M._SelectBinding_valueChanged_closure(this)), 2));
      C.MutationObserver_methods.observe$3$childList$subtree(t1, X.NodeBinding.prototype.get$node.call(this), true, true);
      this._onMutation = t1;
    },
    _tryUpdateValue$1: function(newValue) {
      var t1, t2, intValue;
      t1 = this.property;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "selectedIndex")) {
        intValue = M._SelectBinding__toInt(newValue);
        J.set$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this), intValue);
        t1 = J.get$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this));
        return t1 == null ? intValue == null : t1 === intValue;
      } else if (t2.$eq(t1, "value")) {
        t1 = X.NodeBinding.prototype.get$node.call(this);
        J.set$value$x(t1, newValue == null ? "" : H.S(newValue));
        return J.$eq(J.get$value$x(X.NodeBinding.prototype.get$node.call(this)), newValue);
      }
    },
    _cancelMutationObserver$0: function() {
      var t1 = this._onMutation;
      if (t1 != null) {
        t1.disconnect();
        this._onMutation = null;
      }
    },
    nodeValueChanged$1: [function(e) {
      var t1, t2;
      this._cancelMutationObserver$0();
      t1 = this.property;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "selectedIndex")) {
        t1 = J.get$selectedIndex$x(X.NodeBinding.prototype.get$node.call(this));
        J.set$value$x(this._observer, t1);
      } else if (t2.$eq(t1, "value")) {
        t1 = J.get$value$x(X.NodeBinding.prototype.get$node.call(this));
        J.set$value$x(this._observer, t1);
      }
    }, "call$1", "get$nodeValueChanged", 2, 0, 166, 21, []],
    $is_SelectBinding: true,
    static: {_SelectBinding__toInt: [function(value) {
        if (typeof value === "string")
          return H.Primitives_parseInt(value, null, new M._SelectBinding__toInt_closure());
        return typeof value === "number" && Math.floor(value) === value ? value : 0;
      }, "call$1", "_SelectBinding__toInt$closure", 2, 0, null, 30, []]}
  },
  _SelectBinding_valueChanged_closure: {
    "^": "Closure:296;this_0",
    call$2: [function(x, y) {
      var t1 = this.this_0;
      if (t1._tryUpdateValue$1(J.get$value$x(t1._observer)) === true)
        t1._cancelMutationObserver$0();
    }, "call$2", null, 4, 0, null, 28, [], 561, [], "call"],
    $isFunction: true
  },
  _SelectBinding__toInt_closure: {
    "^": "Closure:115;",
    call$1: [function(_) {
      return 0;
    }, "call$1", null, 2, 0, null, 116, [], "call"],
    $isFunction: true
  },
  _InputElementExtension: {
    "^": "_ElementExtension;_node,_bindings,_templateInstance",
    get$_node: function() {
      return this._node;
    },
    bind$3: function(_, $name, model, path) {
      var t1, t2, t3;
      t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "value") && !t1.$eq($name, "checked"))
        return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
      t2 = this.get$_node();
      J.unbind$1$x(!!J.getInterceptor(t2).$isNodeBindExtension ? t2 : this, $name);
      J.get$attributes$x(this._node).remove$1(0, $name);
      t2 = this.get$bindings(this);
      if (t1.$eq($name, "value")) {
        t1 = this._node;
        t3 = path != null ? path : "";
        t3 = new M._ValueBinding(null, t1, model, null, null, "value", t3);
        t3.NodeBinding$4(t1, "value", model, path);
        t3._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t3.get$nodeValueChanged());
        t1 = t3;
      } else {
        t1 = this._node;
        t3 = path != null ? path : "";
        t3 = new M._CheckedBinding(null, t1, model, null, null, "checked", t3);
        t3.NodeBinding$4(t1, "checked", model, path);
        t3._eventSub = M._InputBinding__getStreamForInputType(t1).listen$1(t3.get$nodeValueChanged());
        t1 = t3;
      }
      t2.$indexSet(0, $name, t1);
      return t1;
    }
  },
  _InstanceBindingMap: {
    "^": "Object;bindings>,children>,templateRef<,numChildren<"
  },
  NodeBindExtension: {
    "^": "Object;_node<,_bindings,_templateInstance?",
    bind$3: function(_, $name, model, path) {
      var t1;
      window;
      t1 = "Unhandled binding to Node: " + H.S(this) + " " + H.S($name) + " " + H.S(model) + " " + H.S(path);
      if (typeof console != "undefined")
        console.error(t1);
    },
    unbind$1: function(_, $name) {
      var binding;
      if (this._bindings == null)
        return;
      binding = this.get$bindings(this).remove$1(0, $name);
      if (binding != null)
        J.close$0$x(binding);
    },
    unbindAll$0: function(_) {
      var t1, binding;
      if (this._bindings == null)
        return;
      for (t1 = this.get$bindings(this), t1 = t1.get$values(t1), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        binding = t1._current;
        if (binding != null)
          J.close$0$x(binding);
      }
      this._bindings = null;
    },
    get$bindings: function(_) {
      var t1 = this._bindings;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, X.NodeBinding);
        this._bindings = t1;
      }
      return t1;
    },
    get$_template_binding$_self: function() {
      var t1 = this.get$_node();
      return !!J.getInterceptor(t1).$isNodeBindExtension ? t1 : this;
    },
    $isNodeBindExtension: true
  },
  TemplateInstance: {
    "^": "Object;firstNode,lastNode,model<"
  },
  _SelectElementExtension: {
    "^": "_ElementExtension;_node,_bindings,_templateInstance",
    get$_node: function() {
      return this._node;
    },
    bind$3: function(_, $name, model, path) {
      var t1, t2, t3;
      if (J.$eq($name, "selectedindex"))
        $name = "selectedIndex";
      t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "selectedIndex") && !t1.$eq($name, "value"))
        return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
      t1 = this.get$_node();
      J.unbind$1$x(!!J.getInterceptor(t1).$isNodeBindExtension ? t1 : this, $name);
      J.get$attributes$x(this._node).remove$1(0, $name);
      t1 = this.get$bindings(this);
      t2 = this._node;
      t3 = path != null ? path : "";
      t3 = new M._SelectBinding(null, null, t2, model, null, null, $name, t3);
      t3.NodeBinding$4(t2, $name, model, path);
      t3._eventSub = M._InputBinding__getStreamForInputType(t2).listen$1(t3.get$nodeValueChanged());
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  },
  TemplateBindExtension: {
    "^": "_ElementExtension;_template_binding$_model,_bindingDelegate?,_template_binding$_iterator<,_template_binding$_scheduled,_templateInstanceRef?,_content?,_templateIsDecorated?,_stagingDocument,_bindingMap@,_node,_bindings,_templateInstance",
    get$_node: function() {
      return this._node;
    },
    get$_template_binding$_self: function() {
      return !!J.getInterceptor(this._node).$isTemplateBindExtension ? this._node : this;
    },
    bind$3: function(_, $name, model, path) {
      var t1;
      path = path != null ? path : "";
      t1 = this._template_binding$_iterator;
      if (t1 == null) {
        t1 = new M._TemplateIterator(this, [], null, false, false, false, false, false, null, null, null, null, null, null, null, null, false, null, null);
        this._template_binding$_iterator = t1;
      }
      switch ($name) {
        case "bind":
          t1.hasBind = true;
          t1.bindModel = model;
          t1.bindPath = path;
          this._scheduleIterator$0();
          t1 = new M._TemplateBinding(this, model, $name, path);
          this.get$bindings(this).$indexSet(0, $name, t1);
          return t1;
        case "repeat":
          t1.hasRepeat = true;
          t1.repeatModel = model;
          t1.repeatPath = path;
          this._scheduleIterator$0();
          t1 = new M._TemplateBinding(this, model, $name, path);
          this.get$bindings(this).$indexSet(0, $name, t1);
          return t1;
        case "if":
          t1.hasIf = true;
          t1.ifModel = model;
          t1.ifPath = path;
          this._scheduleIterator$0();
          t1 = new M._TemplateBinding(this, model, $name, path);
          this.get$bindings(this).$indexSet(0, $name, t1);
          return t1;
        default:
          return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
      }
    },
    unbind$1: function(_, $name) {
      var t1;
      switch ($name) {
        case "bind":
          t1 = this._template_binding$_iterator;
          if (t1 == null)
            return;
          t1.hasBind = false;
          t1.bindModel = null;
          t1.bindPath = null;
          this._scheduleIterator$0();
          this.get$bindings(this).remove$1(0, $name);
          return;
        case "repeat":
          t1 = this._template_binding$_iterator;
          if (t1 == null)
            return;
          t1.hasRepeat = false;
          t1.repeatModel = null;
          t1.repeatPath = null;
          this._scheduleIterator$0();
          this.get$bindings(this).remove$1(0, $name);
          return;
        case "if":
          t1 = this._template_binding$_iterator;
          if (t1 == null)
            return;
          t1.hasIf = false;
          t1.ifModel = null;
          t1.ifPath = null;
          this._scheduleIterator$0();
          this.get$bindings(this).remove$1(0, $name);
          return;
        default:
          M.NodeBindExtension.prototype.unbind$1.call(this, this, $name);
          return;
      }
    },
    _scheduleIterator$0: function() {
      var t1 = this._template_binding$_iterator;
      if (!t1.depsChanging) {
        t1.depsChanging = true;
        P.scheduleMicrotask(t1.get$resolve());
      }
    },
    createInstance$3: function(model, delegate, bound) {
      var ref, $content, map, t1, owner, doc, instance;
      ref = this.get$ref(this);
      ref = !!J.getInterceptor(ref).$isNodeBindExtension ? ref : M.nodeBindFallback(ref);
      $content = J.get$content$x(ref);
      map = ref.get$_bindingMap();
      if (map == null) {
        map = M._createInstanceBindingMap($content, delegate);
        ref.set$_bindingMap(map);
      }
      t1 = this._stagingDocument;
      if (t1 == null) {
        owner = J.get$ownerDocument$x(this._node);
        t1 = $.get$TemplateBindExtension__ownerStagingDocument();
        doc = t1.$index(0, owner);
        if (doc == null) {
          doc = owner.implementation.createHTMLDocument("");
          t1.$indexSet(0, owner, doc);
        }
        this._stagingDocument = doc;
        t1 = doc;
      }
      instance = M.TemplateBindExtension__deepCloneIgnoreTemplateContent($content, t1);
      M._addMapBindings(instance, map, model, delegate, bound);
      M._addTemplateInstanceRecord(instance, model);
      return instance;
    },
    createInstance$2: function(model, delegate) {
      return this.createInstance$3(model, delegate, null);
    },
    get$model: function() {
      return this._template_binding$_model;
    },
    get$bindingDelegate: function() {
      return this._bindingDelegate;
    },
    get$ref: function(_) {
      var refId, treeScope, result, nextRef;
      this._decorate$0();
      refId = J.get$attributes$x(this._node)._element.getAttribute("ref");
      if (refId != null) {
        treeScope = M._getTreeScope(this._node);
        result = treeScope != null ? J.getElementById$1$x(treeScope, refId) : null;
      } else
        result = null;
      if (result == null) {
        result = this._templateInstanceRef;
        if (result == null)
          return this._node;
      }
      nextRef = J.get$ref$x(!!J.getInterceptor(result).$isNodeBindExtension ? result : M.nodeBindFallback(result));
      return nextRef != null ? nextRef : result;
    },
    get$content: function(_) {
      var t1;
      this._decorate$0();
      t1 = this._content;
      return t1 != null ? t1 : H.interceptedTypeCast(this._node, "$isTemplateElement").content;
    },
    _decorate$1: function(instanceRef) {
      var isNative, liftContents, t1, t2, templateElementExt, liftRoot;
      if (this._templateIsDecorated === true)
        return false;
      M.TemplateBindExtension__injectStylesheet();
      this._templateIsDecorated = true;
      isNative = !!J.getInterceptor(this._node).$isTemplateElement;
      liftContents = !isNative;
      if (liftContents) {
        t1 = this._node;
        t2 = J.getInterceptor$x(t1);
        t1 = t2.get$attributes(t1)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(t1)) === true;
      } else
        t1 = false;
      if (t1) {
        if (instanceRef != null)
          throw H.wrapException(new P.ArgumentError("instanceRef should not be supplied for attribute templates."));
        templateElementExt = M.TemplateBindExtension__extractTemplateFromAttributeTemplate(this._node);
        templateElementExt = !!J.getInterceptor(templateElementExt).$isNodeBindExtension ? templateElementExt : M.nodeBindFallback(templateElementExt);
        templateElementExt.set$_templateIsDecorated(true);
        isNative = !!J.getInterceptor(templateElementExt.get$_node()).$isTemplateElement;
        liftRoot = true;
      } else {
        templateElementExt = this;
        liftRoot = false;
      }
      if (!isNative)
        templateElementExt.set$_content(J.createDocumentFragment$0$x(M.TemplateBindExtension__getOrCreateTemplateContentsOwner(templateElementExt.get$_node())));
      if (instanceRef != null)
        templateElementExt.set$_templateInstanceRef(instanceRef);
      else if (liftContents)
        M.TemplateBindExtension__liftNonNativeChildrenIntoContent(templateElementExt, this._node, liftRoot);
      else
        M.TemplateBindExtension_bootstrap(J.get$content$x(templateElementExt));
      return true;
    },
    _decorate$0: function() {
      return this._decorate$1(null);
    },
    $isTemplateBindExtension: true,
    static: {"^": "TemplateBindExtension__contentsOwner,TemplateBindExtension__ownerStagingDocument,TemplateBindExtension__allTemplatesSelectors,TemplateBindExtension__initStyles", TemplateBindExtension__deepCloneIgnoreTemplateContent: [function(node, stagingDocument) {
        var clone, t1, c;
        clone = J.importNode$2$x(stagingDocument, node, false);
        t1 = J.getInterceptor(clone);
        if (!!t1.$isElement)
          if (clone.localName !== "template")
            t1 = t1.get$attributes(clone)._element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(clone)) === true;
          else
            t1 = true;
        else
          t1 = false;
        if (t1)
          return clone;
        for (c = J.get$firstChild$x(node); c != null; c = c.nextSibling)
          clone.appendChild(M.TemplateBindExtension__deepCloneIgnoreTemplateContent(c, stagingDocument));
        return clone;
      }, "call$2", "TemplateBindExtension__deepCloneIgnoreTemplateContent$closure", 4, 0, null, 269, [], 290, []], TemplateBindExtension__getOrCreateTemplateContentsOwner: [function(template) {
        var doc, d, t1, t2;
        doc = J.get$ownerDocument$x(template);
        if (W._convertNativeToDart_Window(doc.defaultView) == null)
          return doc;
        d = $.get$TemplateBindExtension__contentsOwner().$index(0, doc);
        if (d == null) {
          d = doc.implementation.createHTMLDocument("");
          for (; t1 = d.lastChild, t1 != null;) {
            t2 = t1.parentNode;
            if (t2 != null)
              t2.removeChild(t1);
          }
          $.get$TemplateBindExtension__contentsOwner().$indexSet(0, doc, d);
        }
        return d;
      }, "call$1", "TemplateBindExtension__getOrCreateTemplateContentsOwner$closure", 2, 0, null, 266, []], TemplateBindExtension__extractTemplateFromAttributeTemplate: [function(el) {
        var t1, template, t2, $name, t3, value;
        t1 = J.getInterceptor$x(el);
        template = t1.get$ownerDocument(el).createElement("template", null);
        t1.get$parentNode(el).insertBefore(template, el);
        for (t2 = C.JSArray_methods.toList$0(t1.get$attributes(el).get$keys()), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0();) {
          $name = t2._current;
          switch ($name) {
            case "template":
              t3 = t1.get$attributes(el)._element;
              t3.getAttribute($name);
              t3.removeAttribute($name);
              break;
            case "repeat":
            case "bind":
            case "ref":
              template.toString;
              t3 = t1.get$attributes(el)._element;
              value = t3.getAttribute($name);
              t3.removeAttribute($name);
              template.setAttribute($name, value);
              break;
          }
        }
        return template;
      }, "call$1", "TemplateBindExtension__extractTemplateFromAttributeTemplate$closure", 2, 0, null, 291, []], TemplateBindExtension__liftNonNativeChildrenIntoContent: [function(template, el, useRoot) {
        var $content, t1, t2, child;
        $content = J.get$content$x(template);
        if (useRoot) {
          J.append$1$x($content, el);
          return;
        }
        for (t1 = J.getInterceptor$x(el), t2 = J.getInterceptor$x($content); child = t1.get$firstChild(el), child != null;)
          t2.append$1($content, child);
      }, "call$3", "TemplateBindExtension__liftNonNativeChildrenIntoContent$closure", 6, 0, null, 266, [], 291, [], 292, []], TemplateBindExtension_bootstrap: [function($content) {
        var t1, descendents;
        t1 = new M.TemplateBindExtension_bootstrap__bootstrap();
        descendents = J.querySelectorAll$1$x($content, $.get$TemplateBindExtension__allTemplatesSelectors());
        if (M.isSemanticTemplate($content))
          t1.call$1($content);
        descendents.forEach$1(descendents, t1);
      }, "call$1", "TemplateBindExtension_bootstrap$closure", 2, 0, null, 293, []], TemplateBindExtension__injectStylesheet: [function() {
        if ($.TemplateBindExtension__initStyles === true)
          return;
        $.TemplateBindExtension__initStyles = true;
        var style = document.createElement("style", null);
        J.set$text$x(style, H.S($.get$TemplateBindExtension__allTemplatesSelectors()) + " { display: none; }");
        document.head.appendChild(style);
      }, "call$0", "TemplateBindExtension__injectStylesheet$closure", 0, 0, null]}
  },
  TemplateBindExtension_bootstrap__bootstrap: {
    "^": "Closure:166;",
    call$1: [function(template) {
      if (!M.nodeBindFallback(template)._decorate$1(null))
        M.TemplateBindExtension_bootstrap(J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template)));
    }, "call$1", null, 2, 0, null, 266, [], "call"],
    $isFunction: true
  },
  closure3: {
    "^": "Closure:115;",
    call$1: [function(k) {
      return H.S(k) + "[template]";
    }, "call$1", null, 2, 0, null, 372, [], "call"],
    $isFunction: true
  },
  _TemplateBinding: {
    "^": "Object;_ext,_template_binding$_model,property,path>",
    get$node: function() {
      var t1 = this._ext;
      t1.toString;
      return t1._node;
    },
    get$model: function() {
      return this._template_binding$_model;
    },
    get$value: function(_) {
      return J.get$value$x(this.get$_template_binding$_observer());
    },
    set$value: function(_, newValue) {
      J.set$value$x(this.get$_template_binding$_observer(), newValue);
    },
    get$_template_binding$_observer: function() {
      var t1 = J.getInterceptor(this._template_binding$_model);
      if ((!!t1.$isPathObserver || !!t1.$isCompoundPathObserver) && J.$eq(this.path, "value"))
        return this._template_binding$_model;
      return L.PathObserver$(this._template_binding$_model, this.path, null);
    },
    close$0: function(_) {
      var t1 = this._ext;
      if (t1 == null)
        return;
      t1.unbind$1(0, this.property);
      this._template_binding$_model = null;
      this._ext = null;
    },
    $isNodeBinding: true
  },
  _parseAttributeBindings_closure: {
    "^": "Closure:296;box_0,element_1,delegate_2,isTemplateNode_3",
    call$2: [function($name, value) {
      var t1, tokens, t2, bindings;
      for (; t1 = J.getInterceptor$asx($name), J.$eq(t1.$index($name, 0), "_");)
        $name = t1.substring$1($name, 1);
      if (this.isTemplateNode_3)
        if (t1.$eq($name, "if")) {
          this.box_0.ifFound_1 = true;
          if (value === "")
            value = "{{}}";
        } else if (t1.$eq($name, "bind") || t1.$eq($name, "repeat")) {
          this.box_0.bindFound_2 = true;
          if (value === "")
            value = "{{}}";
        }
      tokens = M._parseMustaches(value, $name, this.element_1, this.delegate_2);
      if (tokens != null) {
        t1 = this.box_0;
        t2 = t1.bindings_0;
        if (t2 == null) {
          bindings = [];
          t1.bindings_0 = bindings;
          t1 = bindings;
        } else
          t1 = t2;
        t1.push($name);
        t1.push(tokens);
      }
    }, "call$2", null, 4, 0, null, 12, [], 30, [], "call"],
    $isFunction: true
  },
  _MustacheTokens: {
    "^": "Object;tokens<,_combinator",
    get$hasOnePath: function() {
      return this.tokens.length === 4;
    },
    get$isSimplePath: function() {
      var t1, t2;
      t1 = this.tokens;
      t2 = t1.length;
      if (t2 === 4) {
        if (0 >= t2)
          return H.ioore(t1, 0);
        if (J.$eq(t1[0], "")) {
          if (3 >= t1.length)
            return H.ioore(t1, 3);
          t1 = J.$eq(t1[3], "");
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$combinator: function() {
      return this._combinator;
    },
    _singleCombinator$1: [function(value) {
      var t1, t2;
      if (value == null)
        value = "";
      t1 = this.tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = H.S(t1[0]) + H.S(value);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      return t2 + H.S(t1[3]);
    }, "call$1", "get$_singleCombinator", 2, 0, 562, 30, []],
    _listCombinator$1: [function(values) {
      var t1, newValue, t2, i, value, str, t3;
      t1 = this.tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      newValue = P.StringBuffer$(t1[0]);
      for (t2 = J.getInterceptor$asx(values), i = 1; i < t1.length; i += 3) {
        value = t2.$index(values, C.JSInt_methods._tdivFast$1(i - 1, 3));
        if (value != null) {
          str = typeof value === "string" ? value : H.S(value);
          newValue._contents = newValue._contents + str;
        }
        t3 = i + 2;
        if (t3 >= t1.length)
          return H.ioore(t1, t3);
        str = t1[t3];
        str = typeof str === "string" ? str : H.S(str);
        newValue._contents = newValue._contents + str;
      }
      return newValue._contents;
    }, "call$1", "get$_listCombinator", 2, 0, 563, 564, []],
    _MustacheTokens$1: function(tokens) {
      this._combinator = this.tokens.length === 4 ? this.get$_singleCombinator() : this.get$_listCombinator();
    }
  },
  _TemplateIterator: {
    "^": "Object;_templateExt,terminators,iteratedValue,closed,depsChanging,hasRepeat,hasBind,hasIf,repeatModel,bindModel,ifModel,repeatPath,bindPath,ifPath,_valueSub,_listSub,_initPrepareFunctions,_instanceModelFn,_instancePositionChangedFn",
    _instanceModelFn$1: function(arg0) {
      return this._instanceModelFn.call$1(arg0);
    },
    resolve$0: [function() {
      var t1, model, path, valueObserver, t2, t3;
      this.depsChanging = false;
      t1 = this._valueSub;
      if (t1 != null) {
        t1.cancel$0();
        this._valueSub = null;
      }
      t1 = this.hasRepeat;
      if (!t1 && !this.hasBind) {
        this._valueChanged$1(null);
        return;
      }
      model = t1 ? this.repeatModel : this.bindModel;
      path = t1 ? this.repeatPath : this.bindPath;
      if (!this.hasIf)
        valueObserver = L.PathObserver$(model, path, t1 ? null : new M._TemplateIterator_resolve_closure());
      else {
        t2 = [];
        valueObserver = new Y.CompoundPathObserver(t2, [], null, new M._TemplateIterator_resolve_valueFn(t1), false, false, null, null);
        t2.push(L.PathObserver$(model, path, null));
        t1 = this.ifModel;
        t3 = this.ifPath;
        t2.push(L.PathObserver$(t1, t3, null));
        valueObserver.start$0(0);
      }
      this._valueSub = valueObserver.get$changes(valueObserver).listen$1(new M._TemplateIterator_resolve_closure0(this));
      this._valueChanged$1(valueObserver.get$value(valueObserver));
    }, "call$0", "get$resolve", 0, 0, 114],
    _valueChanged$1: function(newValue) {
      var oldValue, t1, t2, splices;
      oldValue = this.iteratedValue;
      this.unobserve$0();
      t1 = J.getInterceptor(newValue);
      if (!!t1.$isList) {
        this.iteratedValue = newValue;
        t2 = newValue;
      } else if (!!t1.$isIterable) {
        t2 = t1.toList$0(newValue);
        this.iteratedValue = t2;
      } else {
        this.iteratedValue = null;
        t2 = null;
      }
      if (t2 != null && !!t1.$isObservableList)
        this._listSub = newValue.get$listChanges().listen$1(this.get$_handleSplices());
      t1 = oldValue != null ? oldValue : [];
      t2 = this.iteratedValue;
      t2 = t2 != null ? t2 : [];
      splices = G.calcSplices(t2, 0, J.get$length$asx(t2), t1, 0, J.get$length$asx(t1));
      if (splices.length !== 0)
        this._handleSplices$1(splices);
    },
    getTerminatorAt$1: function(index) {
      var t1, t2, terminator, subIter;
      t1 = J.getInterceptor(index);
      if (t1.$eq(index, -1))
        return this._templateExt._node;
      t2 = this.terminators;
      t1 = t1.$mul(index, 2);
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        return H.ioore(t2, t1);
      terminator = t2[t1];
      if (M.isSemanticTemplate(terminator)) {
        t1 = this._templateExt._node;
        t1 = terminator == null ? t1 == null : terminator === t1;
      } else
        t1 = true;
      if (t1)
        return terminator;
      subIter = M.nodeBindFallback(terminator).get$_template_binding$_iterator();
      if (subIter == null)
        return terminator;
      return subIter.getTerminatorAt$1(C.JSInt_methods._tdivFast$1(subIter.terminators.length, 2) - 1);
    },
    insertInstanceAt$4: function(index, fragment, instanceNodes, bound) {
      var t1, previousTerminator, t2, terminator, $parent, insertBeforeNode;
      t1 = J.getInterceptor$n(index);
      previousTerminator = this.getTerminatorAt$1(t1.$sub(index, 1));
      t2 = fragment != null;
      if (t2)
        terminator = fragment.lastChild;
      else
        terminator = instanceNodes != null && J.get$isNotEmpty$asx(instanceNodes) ? J.get$last$ax(instanceNodes) : null;
      if (terminator == null)
        terminator = previousTerminator;
      t1 = t1.$mul(index, 2);
      H.IterableMixinWorkaround_insertAllList(this.terminators, t1, [terminator, bound]);
      $parent = J.get$parentNode$x(this._templateExt._node);
      insertBeforeNode = J.get$nextNode$x(previousTerminator);
      if (t2)
        $parent.insertBefore(fragment, insertBeforeNode);
      else if (instanceNodes != null)
        for (t1 = J.get$iterator$ax(instanceNodes); t1.moveNext$0();)
          $parent.insertBefore(t1.get$current(), insertBeforeNode);
    },
    extractInstanceAt$1: function(index) {
      var instanceNodes, t1, previousTerminator, terminator, t2, t3, bound, node;
      instanceNodes = [];
      instanceNodes.$builtinTypeInfo = [W.Node];
      t1 = J.getInterceptor$n(index);
      previousTerminator = this.getTerminatorAt$1(t1.$sub(index, 1));
      terminator = this.getTerminatorAt$1(index);
      t2 = this.terminators;
      t3 = J.$add$ns(t1.$mul(index, 2), 1);
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      bound = t2[t3];
      C.JSArray_methods.removeRange$2(t2, t1.$mul(index, 2), J.$add$ns(t1.$mul(index, 2), 2));
      J.get$parentNode$x(this._templateExt._node);
      for (t1 = J.getInterceptor$x(previousTerminator); !J.$eq(terminator, previousTerminator);) {
        node = t1.get$nextNode(previousTerminator);
        if (node == null ? terminator == null : node === terminator)
          terminator = previousTerminator;
        t2 = node.parentNode;
        if (t2 != null)
          t2.removeChild(node);
        instanceNodes.push(node);
      }
      return new M._BoundNodes(instanceNodes, bound);
    },
    _handleSplices$1: [function(splices) {
      var t1, template, delegate, t2, instanceCache, t3, removeDelta, splice, t4, t5, addIndex, model, instance, bound, instanceNodes, fragment;
      if (this.closed)
        return;
      t1 = this._templateExt;
      template = t1._node;
      delegate = (!!J.getInterceptor(t1._node).$isTemplateBindExtension ? t1._node : t1).get$bindingDelegate();
      t2 = J.getInterceptor$x(template);
      if (t2.get$parentNode(template) == null || W._convertNativeToDart_Window(t2.get$ownerDocument(template).defaultView) == null) {
        this.close$0(0);
        return;
      }
      if (!this._initPrepareFunctions) {
        this._initPrepareFunctions = true;
        if (delegate != null) {
          this._instanceModelFn = delegate.prepareInstanceModel$1(template);
          this._instancePositionChangedFn = null;
        }
      }
      instanceCache = P.HashMap_HashMap(P.identical$closure(), null, null, P.Object, M._BoundNodes);
      for (t2 = J.getInterceptor$ax(splices), t3 = t2.get$iterator(splices), removeDelta = 0; t3.moveNext$0();) {
        splice = t3.get$current();
        for (t4 = splice.get$removed(), t4 = t4.get$iterator(t4), t5 = J.getInterceptor$x(splice); t4.moveNext$0();)
          instanceCache.$indexSet(0, t4._current, this.extractInstanceAt$1(J.$add$ns(t5.get$index(splice), removeDelta)));
        t4 = splice.get$addedCount();
        if (typeof t4 !== "number")
          return H.iae(t4);
        removeDelta -= t4;
      }
      for (t2 = t2.get$iterator(splices); t2.moveNext$0();) {
        splice = t2.get$current();
        for (t3 = J.getInterceptor$x(splice), addIndex = t3.get$index(splice); t4 = J.getInterceptor$n(addIndex), t4.$lt(addIndex, J.$add$ns(t3.get$index(splice), splice.get$addedCount())); addIndex = t4.$add(addIndex, 1)) {
          model = J.$index$asx(this.iteratedValue, addIndex);
          instance = instanceCache.remove$1(0, model);
          if (instance != null && J.get$isNotEmpty$asx(J.get$nodes$x(instance))) {
            t5 = J.getInterceptor$x(instance);
            bound = t5.get$bound(instance);
            instanceNodes = t5.get$nodes(instance);
            fragment = null;
          } else {
            bound = [];
            if (this._instanceModelFn != null)
              model = this._instanceModelFn$1(model);
            fragment = model != null ? t1.createInstance$3(model, delegate, bound) : null;
            instanceNodes = null;
          }
          this.insertInstanceAt$4(addIndex, fragment, instanceNodes, bound);
        }
      }
      for (t1 = instanceCache.get$values(instanceCache), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        this.closeInstanceBindings$1(J.get$bound$x(t1._current));
    }, "call$1", "get$_handleSplices", 2, 0, 565, 260, []],
    closeInstanceBindings$1: function(bound) {
      var t1;
      for (t1 = J.get$iterator$ax(bound); t1.moveNext$0();)
        J.close$0$x(t1.get$current());
    },
    unobserve$0: function() {
      var t1 = this._listSub;
      if (t1 == null)
        return;
      t1.cancel$0();
      this._listSub = null;
    },
    close$0: function(_) {
      var t1, i;
      if (this.closed)
        return;
      this.unobserve$0();
      for (t1 = this.terminators, i = 1; i < t1.length; i += 2)
        this.closeInstanceBindings$1(t1[i]);
      C.JSArray_methods.set$length(t1, 0);
      t1 = this._valueSub;
      if (t1 != null) {
        t1.cancel$0();
        this._valueSub = null;
      }
      this._templateExt._template_binding$_iterator = null;
      this.closed = true;
    }
  },
  _TemplateIterator_resolve_closure: {
    "^": "Closure:115;",
    call$1: [function(x) {
      return [x];
    }, "call$1", null, 2, 0, null, 28, [], "call"],
    $isFunction: true
  },
  _TemplateIterator_resolve_valueFn: {
    "^": "Closure:566;isRepeat_0",
    call$1: [function(values) {
      var t1, modelValue, ifValue;
      t1 = J.getInterceptor$asx(values);
      modelValue = t1.$index(values, 0);
      ifValue = t1.$index(values, 1);
      if (!(null != ifValue && false !== ifValue))
        return;
      return this.isRepeat_0 ? modelValue : [modelValue];
    }, "call$1", null, 2, 0, null, 564, [], "call"],
    $isFunction: true
  },
  _TemplateIterator_resolve_closure0: {
    "^": "Closure:115;this_1",
    call$1: [function(r) {
      return this.this_1._valueChanged$1(J.get$newValue$x(J.get$last$ax(r)));
    }, "call$1", null, 2, 0, null, 349, [], "call"],
    $isFunction: true
  },
  _BoundNodes: {
    "^": "Object;nodes>,bound>",
    $is_BoundNodes: true
  },
  _TextExtension: {
    "^": "NodeBindExtension;_node,_bindings,_templateInstance",
    bind$3: function(_, $name, model, path) {
      var t1, t2, t3;
      if (!J.$eq($name, "text"))
        return M.NodeBindExtension.prototype.bind$3.call(this, this, $name, model, path);
      this.unbind$1(0, $name);
      t1 = this.get$bindings(this);
      t2 = this._node;
      t3 = path != null ? path : "";
      t3 = new M._TextBinding(t2, model, null, null, "text", t3);
      t3.NodeBinding$4(t2, "text", model, path);
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  },
  _TextBinding: {
    "^": "NodeBinding;_node_binding$_node,_model,_observer,_pathSub,property,path",
    valueChanged$1: function(newValue) {
      var t1 = this._node_binding$_node;
      J.set$text$x(t1, newValue == null ? "" : H.S(newValue));
    }
  },
  _TextAreaElementExtension: {
    "^": "_ElementExtension;_node,_bindings,_templateInstance",
    get$_node: function() {
      return this._node;
    },
    bind$3: function(_, $name, model, path) {
      var t1, t2, t3;
      if (!J.$eq($name, "value"))
        return M._ElementExtension.prototype.bind$3.call(this, this, $name, model, path);
      t1 = this.get$_node();
      J.unbind$1$x(!!J.getInterceptor(t1).$isNodeBindExtension ? t1 : this, $name);
      J.get$attributes$x(this._node).remove$1(0, $name);
      t1 = this.get$bindings(this);
      t2 = this._node;
      t3 = path != null ? path : "";
      t3 = new M._ValueBinding(null, t2, model, null, null, "value", t3);
      t3.NodeBinding$4(t2, "value", model, path);
      t3._eventSub = M._InputBinding__getStreamForInputType(t2).listen$1(t3.get$nodeValueChanged());
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  }
}],
["template_binding.src.binding_delegate", "package:template_binding/src/binding_delegate.dart", , O, {
  "^": "",
  BindingDelegate: {
    "^": "Object;"
  }
}],
["template_binding.src.node_binding", "package:template_binding/src/node_binding.dart", , X, {
  "^": "",
  NodeBinding: {
    "^": "Object;_node_binding$_node<,path>",
    get$node: function() {
      return this._node_binding$_node;
    },
    get$model: function() {
      return this._model;
    },
    get$value: function(_) {
      return J.get$value$x(this._observer);
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._observer, newValue);
    },
    close$0: function(_) {
      var t1;
      if (this._node_binding$_node == null)
        return;
      t1 = this._pathSub;
      if (t1 != null)
        t1.cancel$0();
      this._pathSub = null;
      this._observer = null;
      this._node_binding$_node = null;
      this._model = null;
    },
    NodeBinding$4: function(_node, property, _model, path) {
      var t1, t2;
      t1 = J.getInterceptor(this._model);
      t1 = (!!t1.$isPathObserver || !!t1.$isCompoundPathObserver) && J.$eq(path, "value");
      t2 = this._model;
      if (t1) {
        this._observer = t2;
        t1 = t2;
      } else {
        t1 = L.PathObserver$(t2, this.path, null);
        this._observer = t1;
      }
      this._pathSub = J.get$changes$x(t1).listen$1(new X.NodeBinding_closure(this));
      this.valueChanged$1(J.get$value$x(this._observer));
    },
    $isNodeBinding: true
  },
  NodeBinding_closure: {
    "^": "Closure:115;this_0",
    call$1: [function(r) {
      var t1 = this.this_0;
      return t1.valueChanged$1(J.get$value$x(t1._observer));
    }, "call$1", null, 2, 0, null, 349, [], "call"],
    $isFunction: true
  }
}],
["vm_ref_element", "package:observatory/src/elements/vm_ref.dart", , X, {
  "^": "",
  VMRefElement: {
    "^": ["ServiceRefElement;_service_ref_element$__$ref-337,_service_ref_element$__$internal-300,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    "@": function() {
      return [C.CustomTag_eLp];
    },
    static: {VMRefElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._service_ref_element$__$internal = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.VMRefElement_methods.Element$created$0(receiver);
        C.VMRefElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new VMRefElement$created"]}
  },
  "+VMRefElement": [338]
}],
["vm_view_element", "package:observatory/src/elements/vm_view.dart", , U, {
  "^": "",
  VMViewElement: {
    "^": ["ObservatoryElement_ChangeNotifier37;_vm_view_element$__$vm%-313,_vm_view_element$__$error%-567,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$-302", null, null, null, null, null, null, null, null, null, null, null, null, null, function() {
      return [C.C_Reflectable];
    }],
    get$vm: [function(receiver) {
      return receiver._vm_view_element$__$vm;
    }, null, null, 1, 0, 519, "vm", 304, 307],
    set$vm: [function(receiver, value) {
      receiver._vm_view_element$__$vm = this.notifyPropertyChange$3(receiver, C.Symbol_vm, receiver._vm_view_element$__$vm, value);
    }, null, null, 3, 0, 568, 30, [], "vm", 304],
    get$error: [function(receiver) {
      return receiver._vm_view_element$__$error;
    }, null, null, 1, 0, 533, "error", 304, 307],
    set$error: [function(receiver, value) {
      receiver._vm_view_element$__$error = this.notifyPropertyChange$3(receiver, C.Symbol_error, receiver._vm_view_element$__$error, value);
    }, null, null, 3, 0, 534, 30, [], "error", 304],
    refresh$1: [function(receiver, done) {
      J.reload$0$x(receiver._vm_view_element$__$vm).whenComplete$1(done);
    }, "call$1", "get$refresh", 2, 0, 166, 335, [], "refresh"],
    "@": function() {
      return [C.CustomTag_Oou];
    },
    static: {VMViewElement$created: [function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, J.JSString, W.ShadowRoot);
        t3 = J.JSString;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.VMViewElement_methods.Element$created$0(receiver);
        C.VMViewElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, null, null, 0, 0, 114, "new VMViewElement$created"]}
  },
  "+VMViewElement": [569],
  ObservatoryElement_ChangeNotifier37: {
    "^": "ObservatoryElement+ChangeNotifier;",
    $isObservable: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Node.$isNode = true;
W.Node.$isEventTarget = true;
W.Node.$isObject = true;
W.Entry.$isObject = true;
W.SpeechInputResult.$isObject = true;
W.SpeechRecognitionResult.$isObject = true;
N.Level.$isComparable = true;
N.Level.$asComparable = [N.Level];
N.Level.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
P.Match.$isObject = true;
P.Object.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isEventTarget = true;
W.Element.$isEventTarget = true;
W.Element.$isObject = true;
P._SplayTreeNode.$isObject = true;
U.EmptyExpression.$isExpression = true;
U.EmptyExpression.$isObject = true;
U.Invoke.$isExpression = true;
U.Invoke.$isObject = true;
U.Index.$isIndex = true;
U.Index.$isExpression = true;
U.Index.$isObject = true;
U.InExpression.$isExpression = true;
U.InExpression.$isObject = true;
U.BinaryOperator.$isExpression = true;
U.BinaryOperator.$isObject = true;
U.Getter.$isExpression = true;
U.Getter.$isObject = true;
U.Literal.$isExpression = true;
U.Literal.$isObject = true;
U.UnaryOperator.$isExpression = true;
U.UnaryOperator.$isObject = true;
U.Identifier.$isIdentifier = true;
U.Identifier.$isExpression = true;
U.Identifier.$isObject = true;
U.MapLiteralEntry.$isExpression = true;
U.MapLiteralEntry.$isObject = true;
U.MapLiteral.$isExpression = true;
U.MapLiteral.$isObject = true;
K.IndexedValue.$isIndexedValue = true;
K.IndexedValue.$isObject = true;
N.Logger.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
T.ChangeRecord.$isChangeRecord = true;
T.ChangeRecord.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.TransitionEvent.$isEvent = true;
W.TransitionEvent.$isObject = true;
A.PolymerDeclaration.$isPolymerDeclaration = true;
A.PolymerDeclaration.$isElement = true;
A.PolymerDeclaration.$isNode = true;
A.PolymerDeclaration.$isEventTarget = true;
A.PolymerDeclaration.$isEventTarget = true;
A.PolymerDeclaration.$isObject = true;
P.MethodMirror.$isMirror = true;
P.MethodMirror.$isObject = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isMirror = true;
H.JsMethodMirror.$isObject = true;
P.LibraryMirror.$isLibraryMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isMirror = true;
P.LibraryMirror.$isObject = true;
P.InstanceMirror.$isInstanceMirror = true;
P.InstanceMirror.$isMirror = true;
P.InstanceMirror.$isObject = true;
P.DeclarationMirror.$isMirror = true;
P.DeclarationMirror.$isObject = true;
P.Mirror.$isMirror = true;
P.Mirror.$isObject = true;
P.VariableMirror.$isMirror = true;
P.VariableMirror.$isObject = true;
P.TypeVariableMirror.$isTypeMirror = true;
P.TypeVariableMirror.$isMirror = true;
P.TypeVariableMirror.$isObject = true;
P.TypeMirror.$isTypeMirror = true;
P.TypeMirror.$isMirror = true;
P.TypeMirror.$isObject = true;
P.ClassMirror.$isClassMirror = true;
P.ClassMirror.$isTypeMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isMirror = true;
P.ClassMirror.$isObject = true;
P.ParameterMirror.$isMirror = true;
P.ParameterMirror.$isObject = true;
X.NodeBinding.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
F.Observable.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
G.ListChangeRecord.$isListChangeRecord = true;
G.ListChangeRecord.$isObject = true;
M._BoundNodes.$isObject = true;
Y.Token.$isObject = true;
U.Expression.$isExpression = true;
U.Expression.$isObject = true;
A.Polymer.$isElement = true;
A.Polymer.$isNode = true;
A.Polymer.$isEventTarget = true;
A.Polymer.$isEventTarget = true;
A.Polymer.$isObject = true;
A._PropertyValue.$isObject = true;
G.TableTreeRow.$isObject = true;
P.Type.$isObject = true;
P.Uri.$isUri = true;
P.Uri.$isObject = true;
W.Document.$isNode = true;
W.Document.$isEventTarget = true;
W.Document.$isObject = true;
N.LogRecord.$isLogRecord = true;
N.LogRecord.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
W.ShadowRoot.$isNode = true;
W.ShadowRoot.$isEventTarget = true;
W.ShadowRoot.$isObject = true;
D.ServiceObject.$isServiceObject = true;
D.ServiceObject.$isObject = true;
D.Isolate.$isServiceObject = true;
D.Isolate.$isObject = true;
W.MessageEvent.$isEvent = true;
W.MessageEvent.$isObject = true;
D.CodeCallCount.$isObject = true;
D.TagProfileSnapshot.$isObject = true;
D.CodeInstruction.$isObject = true;
D.CodeTick.$isObject = true;
D.Library.$isServiceObject = true;
D.Library.$isObject = true;
D.Script.$isScript = true;
D.Script.$isServiceObject = true;
D.Script.$isObject = true;
D.ServiceMap.$isServiceMap = true;
D.ServiceMap.$isServiceObject = true;
D.ServiceMap.$isObservableMap = true;
D.ServiceMap.$asObservableMap = [null, null];
D.ServiceMap.$isMap = true;
D.ServiceMap.$asMap = [null, null];
D.ServiceMap.$isObject = true;
D.ScriptLine.$isObject = true;
W.HttpRequest.$isEventTarget = true;
W.HttpRequest.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
D.PcDescriptor.$isObject = true;
G.SortedTableRow.$isObject = true;
D.Code.$isCode = true;
D.Code.$isServiceObject = true;
D.Code.$isObject = true;
D.CodeTrieNode.$isObject = true;
W.TableRowElement.$isElement = true;
W.TableRowElement.$isNode = true;
W.TableRowElement.$isEventTarget = true;
W.TableRowElement.$isEventTarget = true;
W.TableRowElement.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
H.JsLibraryMirror.$isJsLibraryMirror = true;
H.JsLibraryMirror.$isLibraryMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isMirror = true;
H.JsLibraryMirror.$isObject = true;
P.ZoneDelegate.$isZoneDelegate = true;
P.ZoneDelegate.$isObject = true;
P.Zone.$isZone = true;
P.Zone.$isObject = true;
V.ObservableMap.$isObservableMap = true;
V.ObservableMap.$isMap = true;
V.ObservableMap.$isObject = true;
P._SplayTreeMapNode.$is_SplayTreeMapNode = true;
P._SplayTreeMapNode.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
W.EventTarget.$isEventTarget = true;
W.EventTarget.$isObject = true;
P.ZoneSpecification.$isZoneSpecification = true;
P.ZoneSpecification.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
O.PixelReference.$isPixelReference = true;
O.PixelReference.$isObject = true;
D.ServiceError.$isServiceError = true;
D.ServiceError.$isServiceObject = true;
D.ServiceError.$isObject = true;
D.ServiceException.$isServiceException = true;
D.ServiceException.$isServiceObject = true;
D.ServiceException.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.__isolate_helper$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J._initMouseEvent$15$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  return J.getInterceptor$x(receiver)._initMouseEvent$15(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};
J._publish$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._publish$1(receiver, a0);
};
J._renderPages$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._renderPages$1(receiver, a0);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J._updateFragmentationData$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._updateFragmentationData$0(receiver);
};
J.accept$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).accept$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.addRow$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).addRow$1(receiver, a0);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.attributeChanged$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).attributeChanged$3(receiver, a0, a1, a2);
};
J.bind$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3(receiver, a0, a1, a2);
};
J.callback$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).callback$0(receiver);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.complete$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).complete$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDocumentFragment$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.enteredView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).enteredView$0(receiver);
};
J.eval$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).eval$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_eventDelegates$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_eventDelegates(receiver);
};
J.get$_id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_id(receiver);
};
J.get$_instanceAttributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_instanceAttributes(receiver);
};
J.get$_isolate_summary_element$__$isolate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_isolate_summary_element$__$isolate(receiver);
};
J.get$_isolate_view_element$__$isolate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_isolate_view_element$__$isolate(receiver);
};
J.get$_name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_name(receiver);
};
J.get$_polymer$_observe$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_observe(receiver);
};
J.get$_polymer$_publish$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_polymer$_publish(receiver);
};
J.get$_publishLC$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_publishLC(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$bindings$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindings(receiver);
};
J.get$bound$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bound(receiver);
};
J.get$changes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changes(receiver);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$client$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$client(receiver);
};
J.get$code$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$code(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$counters$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$counters(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$expanded$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$expanded(receiver);
};
J.get$firstChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$firstChild(receiver);
};
J.get$hash$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hash(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$host$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$host(receiver);
};
J.get$href$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$href(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isFinal$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFinal(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$isolate$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isolate(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$kind$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$kind(receiver);
};
J.get$label$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$label(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$lines$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lines(receiver);
};
J.get$link$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$link(receiver);
};
J.get$loaded$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$loaded(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$method$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$method(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$newValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$newValue(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$on$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$on(receiver);
};
J.get$onMouseDown$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
J.get$onMouseMove$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onMouseMove(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$qualifiedName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$qualifiedName(receiver);
};
J.get$ref$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ref(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$right$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$right(receiver);
};
J.get$rowIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$rowIndex(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$selectedIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
};
J.get$superDeclaration$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$superDeclaration(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.getAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getElementById$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getElementById$1(receiver, a0);
};
J.getRange$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
};
J.importNode$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).importNode$2(receiver, a0, a1);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.indexOf$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
J.insert$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
};
J.insertAllBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.lastIndexOf$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).lastIndexOf$2(receiver, a0, a1);
};
J.leftView$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).leftView$0(receiver);
};
J.load$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).load$0(receiver);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.observeArrayValue$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).observeArrayValue$3(receiver, a0, a1, a2);
};
J.postMessage$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.print$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).print$1(receiver, a0);
};
J.putImageData$7$x = function(receiver, a0, a1, a2, a3, a4, a5, a6) {
  return J.getInterceptor$x(receiver).putImageData$7(receiver, a0, a1, a2, a3, a4, a5, a6);
};
J.queryAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.reflectPropertyToAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).reflectPropertyToAttribute$1(receiver, a0);
};
J.refreshCoverage$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).refreshCoverage$0(receiver);
};
J.registerWhenReady$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).registerWhenReady$0(receiver);
};
J.reload$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).reload$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.removeRange$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).removeRange$2(receiver, a0, a1);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$$function$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$$function(receiver, value);
};
J.set$_selector$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_selector(receiver, value);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$classes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$classes(receiver, value);
};
J.set$cls$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cls(receiver, value);
};
J.set$code$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$code(receiver, value);
};
J.set$coverage$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$coverage(receiver, value);
};
J.set$error$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$error(receiver, value);
};
J.set$exception$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$exception(receiver, value);
};
J.set$field$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$field(receiver, value);
};
J.set$fragmentation$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fragmentation(receiver, value);
};
J.set$hash$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$hash(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$instance$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$instance(receiver, value);
};
J.set$isolate$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isolate(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$library$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$library(receiver, value);
};
J.set$map$ax = function(receiver, value) {
  return J.getInterceptor$ax(receiver).set$map(receiver, value);
};
J.set$msg$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$msg(receiver, value);
};
J.set$newValue$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$newValue(receiver, value);
};
J.set$profile$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$profile(receiver, value);
};
J.set$script$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$script(receiver, value);
};
J.set$selectedIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$trace$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$trace(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$vm$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$vm(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setRange$3$ax = function(receiver, a0, a1, a2) {
  return J.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
J.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
J.skip$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
J.sort$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).sort$0(receiver);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toList$1$growable$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toStringAsFixed$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.unbind$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).unbind$1(receiver, a0);
};
J.unbindAll$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).unbindAll$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
C.ActionLinkElement_methods = X.ActionLinkElement.prototype;
C.BreakpointListElement_methods = B.BreakpointListElement.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyExpression = new U.EmptyExpression();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_JSArray = new J.JSArray();
C.C_JSBool = new J.JSBool();
C.C_JSDouble = new J.JSDouble();
C.C_JSInt = new J.JSInt();
C.C_JSNull = new J.JSNull();
C.C_JSNumber = new J.JSNumber();
C.C_JSString = new J.JSString();
C.C_ObservableProperty = new K.ObservableProperty();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C_PublishedProperty = new A.PublishedProperty();
C.C_Reflectable = new K.Reflectable();
C.C__DelayedDone = new P._DelayedDone();
C.C__InitMethodAnnotation = new A._InitMethodAnnotation();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.C__RootZoneSpecification = new P._RootZoneSpecification();
C.ClassNavMenuElement_methods = A.ClassNavMenuElement.prototype;
C.ClassRefElement_methods = Q.ClassRefElement.prototype;
C.ClassViewElement_methods = Z.ClassViewElement.prototype;
C.CodeKind_Collected = new D.CodeKind("Collected");
C.CodeKind_Dart = new D.CodeKind("Dart");
C.CodeKind_Native = new D.CodeKind("Native");
C.CodeKind_Reused = new D.CodeKind("Reused");
C.CodeKind_Tag = new D.CodeKind("Tag");
C.CodeRefElement_methods = O.CodeRefElement.prototype;
C.CodeViewElement_methods = F.CodeViewElement.prototype;
C.CollapsibleContentElement_methods = R.CollapsibleContentElement.prototype;
C.CurlyBlockElement_methods = R.CurlyBlockElement.prototype;
C.CustomTag_0 = new A.CustomTag("action-link");
C.CustomTag_2Zx = new A.CustomTag("service-exception-view");
C.CustomTag_2tK = new A.CustomTag("isolate-location");
C.CustomTag_6nc = new A.CustomTag("heap-profile");
C.CustomTag_6nc0 = new A.CustomTag("observatory-element");
C.CustomTag_6xV = new A.CustomTag("script-view");
C.CustomTag_86y = new A.CustomTag("nav-refresh");
C.CustomTag_8WR = new A.CustomTag("isolate-counter-chart");
C.CustomTag_A6W = new A.CustomTag("field-ref");
C.CustomTag_BKg = new A.CustomTag("isolate-summary");
C.CustomTag_CNd = new A.CustomTag("response-viewer");
C.CustomTag_Cjg = new A.CustomTag("script-inset");
C.CustomTag_E1h = new A.CustomTag("nav-menu-item");
C.CustomTag_ECG = new A.CustomTag("library-nav-menu");
C.CustomTag_FVH = new A.CustomTag("service-view");
C.CustomTag_GkA = new A.CustomTag("heap-map");
C.CustomTag_I0v = new A.CustomTag("function-view");
C.CustomTag_IET = new A.CustomTag("isolate-profile");
C.CustomTag_INF = new A.CustomTag("code-view");
C.CustomTag_In1 = new A.CustomTag("class-view");
C.CustomTag_M4v = new A.CustomTag("isolate-view");
C.CustomTag_MUx = new A.CustomTag("eval-link");
C.CustomTag_NTs = new A.CustomTag("sliding-checkbox");
C.CustomTag_Oou = new A.CustomTag("vm-view");
C.CustomTag_RPn = new A.CustomTag("library-view");
C.CustomTag_S48 = new A.CustomTag("code-ref");
C.CustomTag_Ujp = new A.CustomTag("top-nav-menu");
C.CustomTag_VEQ = new A.CustomTag("stack-trace");
C.CustomTag_WIq = new A.CustomTag("script-ref");
C.CustomTag_YKi = new A.CustomTag("class-ref");
C.CustomTag_avb = new A.CustomTag("isolate-shared-summary");
C.CustomTag_cEY = new A.CustomTag("breakpoint-list");
C.CustomTag_e2q = new A.CustomTag("instance-ref");
C.CustomTag_eLp = new A.CustomTag("vm-ref");
C.CustomTag_gOG = new A.CustomTag("collapsible-content");
C.CustomTag_hic = new A.CustomTag("stack-frame");
C.CustomTag_i00 = new A.CustomTag("observatory-application");
C.CustomTag_iFj = new A.CustomTag("service-error-view");
C.CustomTag_if9 = new A.CustomTag("eval-box");
C.CustomTag_k6K = new A.CustomTag("isolate-nav-menu");
C.CustomTag_lGg = new A.CustomTag("class-nav-menu");
C.CustomTag_m1p = new A.CustomTag("error-view");
C.CustomTag_mX6 = new A.CustomTag("nav-menu");
C.CustomTag_omH = new A.CustomTag("isolate-run-state");
C.CustomTag_oqK = new A.CustomTag("json-view");
C.CustomTag_oyU = new A.CustomTag("isolate-ref");
C.CustomTag_qGx = new A.CustomTag("function-ref");
C.CustomTag_sQR = new A.CustomTag("library-ref");
C.CustomTag_sYc = new A.CustomTag("field-view");
C.CustomTag_sww = new A.CustomTag("service-ref");
C.CustomTag_uwd = new A.CustomTag("nav-bar");
C.CustomTag_wwi = new A.CustomTag("curly-block");
C.CustomTag_yT2 = new A.CustomTag("instance-view");
C.Duration_0 = new P.Duration(0);
C.ErrorViewElement_methods = F.ErrorViewElement.prototype;
C.EvalBoxElement_methods = L.EvalBoxElement.prototype;
C.EvalLinkElement_methods = R.EvalLinkElement.prototype;
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
C.EventStreamProvider_hashchange = H.setRuntimeTypeInfo(new W.EventStreamProvider("hashchange"), [W.Event]);
C.EventStreamProvider_input = H.setRuntimeTypeInfo(new W.EventStreamProvider("input"), [W.Event]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
C.EventStreamProvider_message = H.setRuntimeTypeInfo(new W.EventStreamProvider("message"), [W.MessageEvent]);
C.EventStreamProvider_mousedown = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousedown"), [W.MouseEvent]);
C.EventStreamProvider_mousemove = H.setRuntimeTypeInfo(new W.EventStreamProvider("mousemove"), [W.MouseEvent]);
C.FieldRefElement_methods = D.FieldRefElement.prototype;
C.FieldViewElement_methods = A.FieldViewElement.prototype;
C.FunctionRefElement_methods = U.FunctionRefElement.prototype;
C.FunctionViewElement_methods = N.FunctionViewElement.prototype;
C.HeapMapElement_methods = O.HeapMapElement.prototype;
C.HeapProfileElement_methods = K.HeapProfileElement.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.InstanceRefElement_methods = B.InstanceRefElement.prototype;
C.InstanceViewElement_methods = Z.InstanceViewElement.prototype;
C.IsolateCounterChartElement_methods = D.IsolateCounterChartElement.prototype;
C.IsolateLocationElement_methods = D.IsolateLocationElement.prototype;
C.IsolateNavMenuElement_methods = A.IsolateNavMenuElement.prototype;
C.IsolateProfileElement_methods = X.IsolateProfileElement.prototype;
C.IsolateRefElement_methods = N.IsolateRefElement.prototype;
C.IsolateRunStateElement_methods = D.IsolateRunStateElement.prototype;
C.IsolateSharedSummaryElement_methods = D.IsolateSharedSummaryElement.prototype;
C.IsolateSummaryElement_methods = D.IsolateSummaryElement.prototype;
C.IsolateViewElement_methods = L.IsolateViewElement.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C.JsonEncoder_null = new P.JsonEncoder(null);
C.JsonViewElement_methods = Z.JsonViewElement.prototype;
C.Level_FINER_400 = new N.Level("FINER", 400);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_SEVERE_1000 = new N.Level("SEVERE", 1000);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
C.LibraryNavMenuElement_methods = A.LibraryNavMenuElement.prototype;
C.LibraryRefElement_methods = R.LibraryRefElement.prototype;
C.LibraryViewElement_methods = M.LibraryViewElement.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_KIf = Isolate.makeConstantList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431]);
C.List_UiL = Isolate.makeConstantList([43, 45, 42, 47, 33, 38, 60, 61, 62, 63, 94, 124]);
C.List_Ynd = Isolate.makeConstantList(["==", "!=", "<=", ">=", "||", "&&"]);
C.List_empty = Isolate.makeConstantList([]);
C.List_empty0 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeVariableMirror]);
C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.TypeMirror]);
C.List_empty2 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [J.JSInt]);
C.List_empty3 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.ClassMirror]);
C.List_in_this = Isolate.makeConstantList(["in", "this"]);
C.List_mBx = Isolate.makeConstantList(["rowColor0", "rowColor1", "rowColor2", "rowColor3", "rowColor4", "rowColor5", "rowColor6", "rowColor7", "rowColor8"]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_ww8 = Isolate.makeConstantList([40, 41, 91, 93, 123, 125]);
C.List_05B = Isolate.makeConstantList(["caption", "col", "colgroup", "option", "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
C.Map_05eTF = new H.ConstantStringMap(11, {caption: null, col: null, colgroup: null, option: null, optgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, C.List_05B);
C.List_48l = Isolate.makeConstantList(["webkitanimationstart", "webkitanimationend", "webkittransitionend", "domfocusout", "domfocusin", "animationend", "animationiteration", "animationstart", "doubleclick", "fullscreenchange", "fullscreenerror", "keyadded", "keyerror", "keymessage", "needkey", "speechchange"]);
C.Map_484CA = new H.ConstantStringMap(16, {webkitanimationstart: "webkitAnimationStart", webkitanimationend: "webkitAnimationEnd", webkittransitionend: "webkitTransitionEnd", domfocusout: "DOMFocusOut", domfocusin: "DOMFocusIn", animationend: "webkitAnimationEnd", animationiteration: "webkitAnimationIteration", animationstart: "webkitAnimationStart", doubleclick: "dblclick", fullscreenchange: "webkitfullscreenchange", fullscreenerror: "webkitfullscreenerror", keyadded: "webkitkeyadded", keyerror: "webkitkeyerror", keymessage: "webkitkeymessage", needkey: "webkitneedkey", speechchange: "webkitSpeechChange"}, C.List_48l);
C.List_FKi = Isolate.makeConstantList(["!", ":", ",", ")", "]", "}", "?", "||", "&&", "|", "^", "&", "!=", "==", ">=", ">", "<=", "<", "+", "-", "%", "/", "*", "(", "[", ".", "{"]);
C.Map_FKtZ4 = new H.ConstantStringMap(27, {"!": 0, ":": 0, ",": 0, ")": 0, "]": 0, "}": 0, "?": 1, "||": 2, "&&": 3, "|": 4, "^": 5, "&": 6, "!=": 7, "==": 7, ">=": 8, ">": 8, "<=": 8, "<": 8, "+": 9, "-": 9, "%": 10, "/": 10, "*": 10, "(": 11, "[": 11, ".": 11, "{": 11}, C.List_FKi);
C.List_c9P = Isolate.makeConstantList(["name", "extends", "constructor", "noscript", "attributes"]);
C.Map_c94aj = new H.ConstantStringMap(5, {name: 1, extends: 1, constructor: 1, noscript: 1, attributes: 1}, C.List_c9P);
C.List_enumerate = Isolate.makeConstantList(["enumerate"]);
C.Map_wgEsG = new H.ConstantStringMap(1, {enumerate: K.enumerate$closure()}, C.List_enumerate);
C.MutationObserver_methods = W.MutationObserver.prototype;
C.NavBarElement_methods = A.NavBarElement.prototype;
C.NavMenuElement_methods = A.NavMenuElement.prototype;
C.NavMenuItemElement_methods = A.NavMenuItemElement.prototype;
C.NavRefreshElement_methods = A.NavRefreshElement.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.ObservatoryApplicationElement_methods = V.ObservatoryApplicationElement.prototype;
C.ObservatoryElement_methods = Z.ObservatoryElement.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.PolymerDeclaration_methods = A.PolymerDeclaration.prototype;
C.PolymerElement_methods = A.PolymerElement.prototype;
C.ResponseViewerElement_methods = Q.ResponseViewerElement.prototype;
C.ScriptInsetElement_methods = T.ScriptInsetElement.prototype;
C.ScriptRefElement_methods = A.ScriptRefElement.prototype;
C.ScriptViewElement_methods = U.ScriptViewElement.prototype;
C.ServiceErrorViewElement_methods = R.ServiceErrorViewElement.prototype;
C.ServiceExceptionViewElement_methods = D.ServiceExceptionViewElement.prototype;
C.ServiceObjectViewElement_methods = U.ServiceObjectViewElement.prototype;
C.ServiceRefElement_methods = Q.ServiceRefElement.prototype;
C.SlidingCheckboxElement_methods = Q.SlidingCheckboxElement.prototype;
C.StackFrameElement_methods = K.StackFrameElement.prototype;
C.StackTraceElement_methods = X.StackTraceElement.prototype;
C.Symbol_46c = new H.Symbol0("dart.core.Object");
C.Symbol_4YB = new H.Symbol0("dart.core.DateTime");
C.Symbol_6TA = new H.Symbol0("dart.core.bool");
C.Symbol_Qyo = new H.Symbol0("[]");
C.Symbol_active = new H.Symbol0("active");
C.Symbol_anchor = new H.Symbol0("anchor");
C.Symbol_app = new H.Symbol0("app");
C.Symbol_architecture = new H.Symbol0("architecture");
C.Symbol_args = new H.Symbol0("args");
C.Symbol_assertsEnabled = new H.Symbol0("assertsEnabled");
C.Symbol_busy = new H.Symbol0("busy");
C.Symbol_call = new H.Symbol0("call");
C.Symbol_callback = new H.Symbol0("callback");
C.Symbol_checked = new H.Symbol0("checked");
C.Symbol_checkedText = new H.Symbol0("checkedText");
C.Symbol_classTable = new H.Symbol0("classTable");
C.Symbol_cls = new H.Symbol0("cls");
C.Symbol_code = new H.Symbol0("code");
C.Symbol_counters = new H.Symbol0("counters");
C.Symbol_coverage = new H.Symbol0("coverage");
C.Symbol_currentHash = new H.Symbol0("currentHash");
C.Symbol_devtools = new H.Symbol0("devtools");
C.Symbol_displayCutoff = new H.Symbol0("displayCutoff");
C.Symbol_displayValue = new H.Symbol0("displayValue");
C.Symbol_dynamic = new H.Symbol0("dynamic");
C.Symbol_endPos = new H.Symbol0("endPos");
C.Symbol_entry = new H.Symbol0("entry");
C.Symbol_error = new H.Symbol0("error");
C.Symbol_exception = new H.Symbol0("exception");
C.Symbol_expand = new H.Symbol0("expand");
C.Symbol_expanded = new H.Symbol0("expanded");
C.Symbol_expander = new H.Symbol0("expander");
C.Symbol_expanderStyle = new H.Symbol0("expanderStyle");
C.Symbol_expr = new H.Symbol0("expr");
C.Symbol_field = new H.Symbol0("field");
C.Symbol_fileAndLine = new H.Symbol0("fileAndLine");
C.Symbol_firstTokenPos = new H.Symbol0("firstTokenPos");
C.Symbol_formattedAverage = new H.Symbol0("formattedAverage");
C.Symbol_formattedCollections = new H.Symbol0("formattedCollections");
C.Symbol_formattedExclusiveTicks = new H.Symbol0("formattedExclusiveTicks");
C.Symbol_formattedInclusiveTicks = new H.Symbol0("formattedInclusiveTicks");
C.Symbol_formattedLine = new H.Symbol0("formattedLine");
C.Symbol_formattedTotalCollectionTime = new H.Symbol0("formattedTotalCollectionTime");
C.Symbol_fragmentation = new H.Symbol0("fragmentation");
C.Symbol_frame = new H.Symbol0("frame");
C.Symbol_function = new H.Symbol0("function");
C.Symbol_getColumnLabel = new H.Symbol0("getColumnLabel");
C.Symbol_hasClass = new H.Symbol0("hasClass");
C.Symbol_hasDisassembly = new H.Symbol0("hasDisassembly");
C.Symbol_hasParent = new H.Symbol0("hasParent");
C.Symbol_hashLinkWorkaround = new H.Symbol0("hashLinkWorkaround");
C.Symbol_hideTagsChecked = new H.Symbol0("hideTagsChecked");
C.Symbol_hitStyle = new H.Symbol0("hitStyle");
C.Symbol_hoverText = new H.Symbol0("hoverText");
C.Symbol_iC9 = new H.Symbol0("dart.core.String");
C.Symbol_iconClass = new H.Symbol0("iconClass");
C.Symbol_idle = new H.Symbol0("idle");
C.Symbol_instance = new H.Symbol0("instance");
C.Symbol_internal = new H.Symbol0("internal");
C.Symbol_isDart = new H.Symbol0("isDart");
C.Symbol_isEmpty = new H.Symbol0("isEmpty");
C.Symbol_isNotEmpty = new H.Symbol0("isNotEmpty");
C.Symbol_isOptimized = new H.Symbol0("isOptimized");
C.Symbol_isolate = new H.Symbol0("isolate");
C.Symbol_jumpTarget = new H.Symbol0("jumpTarget");
C.Symbol_kind = new H.Symbol0("kind");
C.Symbol_label = new H.Symbol0("label");
C.Symbol_last = new H.Symbol0("last");
C.Symbol_lastTokenPos = new H.Symbol0("lastTokenPos");
C.Symbol_length = new H.Symbol0("length");
C.Symbol_libraries = new H.Symbol0("libraries");
C.Symbol_library = new H.Symbol0("library");
C.Symbol_lineMode = new H.Symbol0("lineMode");
C.Symbol_lines = new H.Symbol0("lines");
C.Symbol_link = new H.Symbol0("link");
C.Symbol_loading = new H.Symbol0("loading");
C.Symbol_mainPort = new H.Symbol0("mainPort");
C.Symbol_map = new H.Symbol0("map");
C.Symbol_mapAsString = new H.Symbol0("mapAsString");
C.Symbol_mdn = new H.Symbol0("dart.core.int");
C.Symbol_message = new H.Symbol0("message");
C.Symbol_msg = new H.Symbol0("msg");
C.Symbol_name = new H.Symbol0("name");
C.Symbol_nameIsEmpty = new H.Symbol0("nameIsEmpty");
C.Symbol_newHeapCapacity = new H.Symbol0("newHeapCapacity");
C.Symbol_newHeapUsed = new H.Symbol0("newHeapUsed");
C.Symbol_noSuchMethod = new H.Symbol0("noSuchMethod");
C.Symbol_object = new H.Symbol0("object");
C.Symbol_objectPool = new H.Symbol0("objectPool");
C.Symbol_oldHeapCapacity = new H.Symbol0("oldHeapCapacity");
C.Symbol_oldHeapUsed = new H.Symbol0("oldHeapUsed");
C.Symbol_pad = new H.Symbol0("pad");
C.Symbol_path = new H.Symbol0("path");
C.Symbol_pauseEvent = new H.Symbol0("pauseEvent");
C.Symbol_pos = new H.Symbol0("pos");
C.Symbol_profile = new H.Symbol0("profile");
C.Symbol_qualified = new H.Symbol0("qualified");
C.Symbol_qualifiedName = new H.Symbol0("qualifiedName");
C.Symbol_ref = new H.Symbol0("ref");
C.Symbol_refreshTime = new H.Symbol0("refreshTime");
C.Symbol_registerCallback = new H.Symbol0("registerCallback");
C.Symbol_response = new H.Symbol0("response");
C.Symbol_result = new H.Symbol0("result");
C.Symbol_results = new H.Symbol0("results");
C.Symbol_rootLib = new H.Symbol0("rootLib");
C.Symbol_running = new H.Symbol0("running");
C.Symbol_s2s = new H.Symbol0("dart.core.Null");
C.Symbol_sMO = new H.Symbol0("dart.core.double");
C.Symbol_sampleCount = new H.Symbol0("sampleCount");
C.Symbol_sampleDepth = new H.Symbol0("sampleDepth");
C.Symbol_sampleRate = new H.Symbol0("sampleRate");
C.Symbol_script = new H.Symbol0("script");
C.Symbol_sgp = new H.Symbol0("[]=");
C.Symbol_showCoverage = new H.Symbol0("showCoverage");
C.Symbol_sortedRows = new H.Symbol0("sortedRows");
C.Symbol_stacktrace = new H.Symbol0("stacktrace");
C.Symbol_status = new H.Symbol0("status");
C.Symbol_tagSelector = new H.Symbol0("tagSelector");
C.Symbol_text = new H.Symbol0("text");
C.Symbol_timeSpan = new H.Symbol0("timeSpan");
C.Symbol_topFrame = new H.Symbol0("topFrame");
C.Symbol_totalSamplesInProfile = new H.Symbol0("totalSamplesInProfile");
C.Symbol_trace = new H.Symbol0("trace");
C.Symbol_tree = new H.Symbol0("tree");
C.Symbol_typeChecksEnabled = new H.Symbol0("typeChecksEnabled");
C.Symbol_uncheckedText = new H.Symbol0("uncheckedText");
C.Symbol_uptime = new H.Symbol0("uptime");
C.Symbol_url = new H.Symbol0("url");
C.Symbol_value = new H.Symbol0("value");
C.Symbol_version = new H.Symbol0("version");
C.Symbol_vm = new H.Symbol0("vm");
C.Symbol_vmName = new H.Symbol0("vmName");
C.Symbol_void = new H.Symbol0("void");
C.TopNavMenuElement_methods = A.TopNavMenuElement.prototype;
C.Type_pe4 = H.createRuntimeType('ObservableList');
C.TypeVariable_AuK = new H.TypeVariable(C.Type_pe4, "E", 0);
C.Type_2Vk = H.createRuntimeType('IndexedValue');
C.TypeVariable_bBG = new H.TypeVariable(C.Type_2Vk, "V", 0);
C.Type_ejQ = H.createRuntimeType('ObservableBox');
C.TypeVariable_mDP = new H.TypeVariable(C.Type_ejQ, "T", 0);
C.Type_caQ = H.createRuntimeType('ObservableMap');
C.TypeVariable_pea = new H.TypeVariable(C.Type_caQ, "V", 0);
C.TypeVariable_wAg = new H.TypeVariable(C.Type_caQ, "K", 0);
C.Type_0e9 = H.createRuntimeType('ScriptViewElement');
C.Type_2jN = H.createRuntimeType('CodeRefElement');
C.Type_4IJ = H.createRuntimeType('FieldViewElement');
C.Type_6L0 = H.createRuntimeType('Uint8List');
C.Type_8Gl = H.createRuntimeType('IsolateSharedSummaryElement');
C.Type_8eb = H.createRuntimeType('EvalBoxElement');
C.Type_AD4 = H.createRuntimeType('NavMenuItemElement');
C.Type_AGr = H.createRuntimeType('JsTypeVariableMirror');
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_Art = H.createRuntimeType('Float32List');
C.Type_Aym = H.createRuntimeType('CodeViewElement');
C.Type_C7R = H.createRuntimeType('TopNavMenuElement');
C.Type_CAk = H.createRuntimeType('Uint16List');
C.Type_E0k = H.createRuntimeType('VMViewElement');
C.Type_ECh = H.createRuntimeType('IsolateLocationElement');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_ES1 = H.createRuntimeType('IsolateRefElement');
C.Type_EVD = H.createRuntimeType('InstanceRefElement');
C.Type_EjN = H.createRuntimeType('Function');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_Eue = H.createRuntimeType('VMRefElement');
C.Type_FKd = H.createRuntimeType('ServiceErrorViewElement');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_I2I = H.createRuntimeType('PolymerElement');
C.Type_JFX = H.createRuntimeType('ClassNavMenuElement');
C.Type_Jcu = H.createRuntimeType('StackFrameElement');
C.Type_KMd = H.createRuntimeType('NavMenuElement');
C.Type_Kyy = H.createRuntimeType('JsonViewElement');
C.Type_LV6 = H.createRuntimeType('HeapProfileElement');
C.Type_Mu6 = H.createRuntimeType('ServiceObjectViewElement');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_Npb = H.createRuntimeType('ErrorViewElement');
C.Type_O5a = H.createRuntimeType('ClassViewElement');
C.Type_ON8 = H.createRuntimeType('BreakpointListElement');
C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_SnA = H.createRuntimeType('int');
C.Type_SoB = H.createRuntimeType('HeapMapElement');
C.Type_Sxn = H.createRuntimeType('NavRefreshElement');
C.Type_UJT = H.createRuntimeType('ServiceRefElement');
C.Type_UKT = H.createRuntimeType('ResponseViewerElement');
C.Type_UoK = H.createRuntimeType('Int16List');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_YgH = H.createRuntimeType('ObservatoryApplicationElement');
C.Type_YnA = H.createRuntimeType('PolymerDeclaration');
C.Type_ZKG = H.createRuntimeType('IsolateViewElement');
C.Type_a1Y = H.createRuntimeType('ScriptInsetElement');
C.Type_aAD = H.createRuntimeType('IsolateRunStateElement');
C.Type_bDN = H.createRuntimeType('FunctionViewElement');
C.Type_cOY = H.createRuntimeType('IsolateProfileElement');
C.Type_ckn = H.createRuntimeType('Float64List');
C.Type_cop = H.createRuntimeType('CurlyBlockElement');
C.Type_dTZ = H.createRuntimeType('Int32List');
C.Type_dVs = H.createRuntimeType('DateTime');
C.Type_e5Z = H.createRuntimeType('dynamic');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_gqS = H.createRuntimeType('InstanceViewElement');
C.Type_iL9 = H.createRuntimeType('IsolateSummaryElement');
C.Type_irB = H.createRuntimeType('Uint32List');
C.Type_kA7 = H.createRuntimeType('ActionLinkElement');
C.Type_kuc = H.createRuntimeType('SlidingCheckboxElement');
C.Type_mp3 = H.createRuntimeType('Int8List');
C.Type_mpV = H.createRuntimeType('LibraryRefElement');
C.Type_nV5 = H.createRuntimeType('NavBarElement');
C.Type_nVV = H.createRuntimeType('StackTraceElement');
C.Type_oGP = H.createRuntimeType('ByteData');
C.Type_ohY = H.createRuntimeType('FieldRefElement');
C.Type_p2P = H.createRuntimeType('EvalLinkElement');
C.Type_ql8 = H.createRuntimeType('ClassRefElement');
C.Type_qph = H.createRuntimeType('LibraryViewElement');
C.Type_qq1 = H.createRuntimeType('double');
C.Type_s2l = H.createRuntimeType('LibraryNavMenuElement');
C.Type_sRP = H.createRuntimeType('ObservatoryElement');
C.Type_wAg = H.createRuntimeType('ByteBuffer');
C.Type_wBh = H.createRuntimeType('ScriptRefElement');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.Type_wT1 = H.createRuntimeType('IsolateCounterChartElement');
C.Type_wgH = H.createRuntimeType('FunctionRefElement');
C.Type_wsa = H.createRuntimeType('IsolateNavMenuElement');
C.Type_ww8 = H.createRuntimeType('CollapsibleContentElement');
C.Type_y1j = H.createRuntimeType('ServiceExceptionViewElement');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Utf8Codec_false = new P.Utf8Codec(false);
C.VMRefElement_methods = X.VMRefElement.prototype;
C.VMViewElement_methods = U.VMViewElement.prototype;
C.Window_methods = W.Window.prototype;
C._CustomEventStreamProvider__determineTransitionEventType = H.setRuntimeTypeInfo(new W._CustomEventStreamProvider(W.Element__determineTransitionEventType$closure()), [W.TransitionEvent]);
$.libraries_to_load = {};
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.GoogleChart__api = null;
$.printToZone = null;
$.classMirrors = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$._allObservablesCount = 0;
$._allObservables = null;
$._delivering = false;
$.Polymer__preparingElements = 0;
$._useDirtyChecking = true;
$.ServiceMap_objectIdRingPrefix = "objects/";
$.TemplateBindExtension__initStyles = null;
$.interceptedNames = ["$add", "$and", "$div", "$eq", "$ge", "$gt", "$index", "$indexSet", "$le", "$lt", "$mod", "$mul", "$negate", "$shl", "$shr", "$sub", "$tdiv", "$xor", "Element$created$0", "HeapProfileElement$created$0", "ObservatoryApplicationElement$created$0", "PolymerDeclaration$created$0", "PolymerElement$created$0", "__isolate_helper$_add$1", "_add$1", "_addClass$3", "_async$_add$1", "_buildStackTree$0", "_buildTree$0", "_checkIndex$2", "_checkSublistArguments$3", "_classHasNoAllocations$1", "_classIdToRGBA$1", "_classNameAt$1", "_combinedTableColumnValue$2", "_constructElementForObject$0", "_draw$0", "_drawTagProfileChart$0", "_ensureRequestAnimationFrame$0", "_findJumpTarget$1", "_getQualifiedName$1", "_handleClick$1", "_handleMouseMove$1", "_initMouseEvent$15", "_invalidIndex$2", "_lowerCaseMap$1", "_objectAt$1", "_observe$1", "_packColor$1", "_publish$1", "_rangeCheck$2", "_refresh$0", "_renderPages$1", "_replaceChild$2", "_requestAnimationFrame$1", "_script_inset_element$_updateProperties$0", "_service$_update$2", "_setRangeFast$4", "_shlPositive$1", "_shrOtherPositive$1", "_tdivFast$1", "_update$0", "_updateChartData$0", "_updateClassList$2", "_updateFragmentationData$0", "_updateProperties$1", "_updateTagProfile$0", "accept$1", "accumulateInstanceAttributes$0", "add$1", "addAll$1", "addAttributeDelegates$1", "addEventListener$3", "addHostListeners$0", "addNodeListeners$3", "addRow$1", "allMatches$1", "any$1", "append$1", "asyncUnbindAll$0", "attributeChanged$3", "attributeToProperty$2", "bind$3", "buttonClick$3", "cacheSheets$0", "cacheStyles$0", "cancelUnbindAll$0", "cancelUnbindAll$1$preventCascade", "change$3", "changeSort$3", "clear$0", "close$0", "codeUnitAt$1", "coloring$1", "compareTo$1", "complete$0", "complete$1", "contains$1", "contains$2", "copyInstanceAttributes$0", "countersChanged$1", "coverageChanged$1", "createDocumentFragment$0", "createShadowRoot$0", "cssTextForScope$1", "cssTextToScopeStyle$2", "defaultValue$1", "deliverChanges$0", "dispatchMethod$3", "doAction$3", "doneCallback$0", "elementAt$1", "endsWith$1", "enteredView$0", "eval$1", "eval$3", "evalNow$3", "expand$1", "expandChanged$1", "expandEvent$2", "expander$0", "fileAndLine$1", "findNodes$1", "findNodes$2", "firstWhere$1", "firstWhere$2$orElse", "fold$2", "forEach$1", "formatSeconds$1", "formatSize$1", "formatTime$1", "formatTimePrecise$1", "formattedAverage$1", "formattedCollections$1", "formattedTotalCollectionTime$1", "fragmentationChanged$1", "functionChanged$1", "get$$$", "get$$function", "get$ACCUMULATED", "get$ACCUMULATED_SIZE", "get$ALLOCATED_BEFORE_GC", "get$ALLOCATED_BEFORE_GC_SIZE", "get$ALLOCATED_SINCE_GC", "get$ALLOCATED_SINCE_GC_SIZE", "get$LIVE_AFTER_GC", "get$LIVE_AFTER_GC_SIZE", "get$MICROSECONDS_PER_SECOND", "get$_PAGE_SEPARATION_HEIGHT", "get$__js_helper$_name", "get$__js_mirrors$_type", "get$_action_link_element$__$busy", "get$_action_link_element$__$callback", "get$_action_link_element$__$label", "get$_breakpoint_list_element$__$msg", "get$_children", "get$_classIdToColor", "get$_classIdToName", "get$_class_view_element$__$cls", "get$_closeIconClass", "get$_code_view_element$__$code", "get$_collapsed", "get$_collapsible_content_element$__$displayValue", "get$_collapsible_content_element$__$iconClass", "get$_colorToClassId", "get$_curly_block_element$__$busy", "get$_curly_block_element$__$callback", "get$_curly_block_element$__$expand", "get$_curly_block_element$__$expanded", "get$_error_view_element$__$error", "get$_eval_box_element$__$callback", "get$_eval_box_element$__$lineMode", "get$_eval_box_element$__$results", "get$_eval_box_element$__$text", "get$_eval_link_element$__$busy", "get$_eval_link_element$__$callback", "get$_eval_link_element$__$expr", "get$_eval_link_element$__$label", "get$_eval_link_element$__$result", "get$_eventDelegates", "get$_field_view_element$__$field", "get$_fragmentationCanvas", "get$_fragmentationData", "get$_freeColor", "get$_function_ref_element$__$hasClass", "get$_function_ref_element$__$hasParent", "get$_function_ref_element$__$isDart", "get$_function_ref_element$__$qualified", "get$_function_view_element$__$function", "get$_function_view_element$__$kind", "get$_function_view_element$__$qualifiedName", "get$_heap_map_element$__$fragmentation", "get$_heap_map_element$__$status", "get$_heap_profile_element$__$classTable", "get$_heap_profile_element$__$profile", "get$_id", "get$_instanceAttributes", "get$_instance_view_element$__$instance", "get$_instance_view_element$__$path", "get$_isolate_profile_element$__$displayCutoff", "get$_isolate_profile_element$__$hideTagsChecked", "get$_isolate_profile_element$__$profile", "get$_isolate_profile_element$__$refreshTime", "get$_isolate_profile_element$__$sampleCount", "get$_isolate_profile_element$__$sampleDepth", "get$_isolate_profile_element$__$sampleRate", "get$_isolate_profile_element$__$tagSelector", "get$_isolate_profile_element$__$timeSpan", "get$_isolate_profile_element$_id", "get$_isolate_summary_element$__$counters", "get$_isolate_summary_element$__$isolate", "get$_isolate_view_element$__$isolate", "get$_json_view_element$__$map", "get$_json_view_element$__$mapAsString", "get$_library_view_element$__$library", "get$_name", "get$_nav_bar_element$__$active", "get$_nav_bar_element$__$anchor", "get$_nav_bar_element$__$callback", "get$_nav_bar_element$__$cls", "get$_nav_bar_element$__$isolate", "get$_nav_bar_element$__$label", "get$_nav_bar_element$__$last", "get$_nav_bar_element$__$library", "get$_nav_bar_element$__$link", "get$_nav_bar_element$__$pad", "get$_newPieChart", "get$_newPieDataTable", "get$_observatory_application_element$__$app", "get$_observatory_application_element$__$devtools", "get$_oldPieChart", "get$_oldPieDataTable", "get$_openIconClass", "get$_pageHeight", "get$_pageSeparationColor", "get$_polymer$_observe", "get$_polymer$_publish", "get$_publishLC", "get$_response_viewer_element$__$app", "get$_script_inset_element$__$coverage", "get$_script_inset_element$__$endPos", "get$_script_inset_element$__$lines", "get$_script_inset_element$__$pos", "get$_script_inset_element$__$script", "get$_script_ref_element$__$pos", "get$_script_view_element$__$script", "get$_script_view_element$__$showCoverage", "get$_selector", "get$_service_error_view_element$__$error", "get$_service_exception_view_element$__$exception", "get$_service_object_view_element$__$object", "get$_service_ref_element$__$internal", "get$_service_ref_element$__$ref", "get$_sliding_checkbox_element$__$checked", "get$_sliding_checkbox_element$__$checkedText", "get$_sliding_checkbox_element$__$uncheckedText", "get$_stack_frame_element$__$frame", "get$_stack_trace_element$__$trace", "get$_updateTimer", "get$_vm_view_element$__$error", "get$_vm_view_element$__$vm", "get$active", "get$anchor", "get$app", "get$attributes", "get$bindings", "get$bottom", "get$bound", "get$bubbles", "get$busy", "get$callback", "get$changes", "get$chart", "get$checked", "get$checkedText", "get$children", "get$className", "get$classTable", "get$classes", "get$client", "get$cls", "get$code", "get$collapsed", "get$content", "get$context2D", "get$counters", "get$coverage", "get$data", "get$detail", "get$devtools", "get$displayCutoff", "get$displayThreshold", "get$displayValue", "get$endPos", "get$entries", "get$error", "get$exception", "get$expand", "get$expanded", "get$expander", "get$expr", "get$field", "get$fileAndLine", "get$first", "get$firstChild", "get$form", "get$fragmentation", "get$frame", "get$hasClass", "get$hasObservers", "get$hasParent", "get$hash", "get$hashCode", "get$hashLinkWorkaround", "get$height", "get$hideTagsChecked", "get$hitStyleExecuted", "get$hitStyleNone", "get$hitStyleNotExecuted", "get$host", "get$hoverText", "get$href", "get$iconClass", "get$id", "get$index", "get$instance", "get$internal", "get$isDart", "get$isEmpty", "get$isFinal", "get$isFinite", "get$isNaN", "get$isNegative", "get$isNotEmpty", "get$isolate", "get$iterator", "get$key", "get$kind", "get$label", "get$last", "get$left", "get$length", "get$library", "get$lineMode", "get$lines", "get$link", "get$loaded", "get$localName", "get$location", "get$map", "get$mapAsString", "get$message", "get$method", "get$msg", "get$name", "get$nameIsEmpty", "get$newValue", "get$nextNode", "get$nodes", "get$object", "get$offset", "get$oldValue", "get$on", "get$onChange", "get$onClick", "get$onInput", "get$onMouseDown", "get$onMouseMove", "get$operator", "get$ownerDocument", "get$pad", "get$parent", "get$parentNode", "get$path", "get$pauseEvent", "get$port", "get$pos", "get$print", "get$profile", "get$qualified", "get$qualifiedName", "get$ref", "get$refreshTime", "get$response", "get$responseText", "get$result", "get$results", "get$right", "get$rowIndex", "get$rows", "get$runtimeType", "get$sampleCount", "get$sampleDepth", "get$sampleRate", "get$script", "get$selectedIndex", "get$serviceId", "get$shadowRoot", "get$showCoverage", "get$src", "get$status", "get$superDeclaration", "get$tagProfileChart", "get$tagSelector", "get$target", "get$templateContent", "get$text", "get$timeSpan", "get$top", "get$topLeft", "get$trace", "get$tree", "get$type", "get$uncheckedText", "get$url", "get$value", "get$values", "get$version", "get$vm", "get$width", "get$x", "get$y", "getAttribute$1", "getBoundingClientRect$0", "getElementById$1", "getRange$2", "getString$1", "hitStyle$1", "hostEventListener$1", "importNode$2", "index$2", "indexOf$1", "indexOf$2", "inferObservers$1", "insert$2", "insertAll$2", "insertAllBefore$2", "insertBefore$2", "installLocalSheets$0", "isBool$1", "isDouble$1", "isError$1", "isInstance$1", "isInt$1", "isList$1", "isNull$1", "isString$1", "isType$1", "isUnexpected$1", "isolateChanged$1", "join$1", "lastIndexOf$1", "lastIndexOf$2", "leftView$0", "lightFromTemplate$1", "load$0", "map$1", "mapChanged$1", "marshalNodeReferences$1", "matchAsPrefix$1", "matchAsPrefix$2", "matches$1", "matchesWithAncestors$1", "max$1", "mouseOut$3", "mouseOver$3", "noSuchMethod$1", "notifyChange$1", "notifyPropertyChange$3", "notifyPropertyChanges$1", "objectChanged$1", "observe$3$childList$subtree", "observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree", "observeArrayValue$3", "observeProperties$0", "observed$0", "onError$1", "onShow$0", "open$3$async", "open$5$async$password$user", "padding$1", "parseDeclaration$1", "parseDeclarations$1", "pause$0", "pause$1", "polymerCreated$0", "posChanged$1", "postMessage$2", "postMessage$3", "prepareElement$0", "preventDefault$0", "print$1", "print$2", "profileChanged$1", "propertyForAttribute$1", "publishAttributes$2", "putImageData$7", "query$1", "queryAll$1", "querySelectorAll$1", "refChanged$1", "reflectPropertyToAttribute$1", "refresh$1", "refreshCoverage$0", "refreshCoverage$1", "refreshDone$0", "refreshGC$1", "registerType$1", "registerWhenReady$0", "reload$0", "remainder$1", "remove$0", "remove$1", "removeAt$1", "removeEventListener$3", "removeRange$2", "replaceAll$2", "replaceWith$1", "reset$0", "resetAccumulator$1", "resume$0", "resume$1", "retainedSize$1", "retainingPath$1", "round$0", "roundToDouble$0", "scriptChanged$1", "selectExpr$1", "send$1", "send$2", "serializeValue$1", "set$$$", "set$$function", "set$ACCUMULATED", "set$ACCUMULATED_SIZE", "set$ALLOCATED_BEFORE_GC", "set$ALLOCATED_BEFORE_GC_SIZE", "set$ALLOCATED_SINCE_GC", "set$ALLOCATED_SINCE_GC_SIZE", "set$LIVE_AFTER_GC", "set$LIVE_AFTER_GC_SIZE", "set$MICROSECONDS_PER_SECOND", "set$_PAGE_SEPARATION_HEIGHT", "set$__js_helper$_name", "set$__js_mirrors$_type", "set$_action_link_element$__$busy", "set$_action_link_element$__$callback", "set$_action_link_element$__$label", "set$_breakpoint_list_element$__$msg", "set$_children", "set$_classIdToColor", "set$_classIdToName", "set$_class_view_element$__$cls", "set$_closeIconClass", "set$_code_view_element$__$code", "set$_collapsed", "set$_collapsible_content_element$__$displayValue", "set$_collapsible_content_element$__$iconClass", "set$_colorToClassId", "set$_curly_block_element$__$busy", "set$_curly_block_element$__$callback", "set$_curly_block_element$__$expand", "set$_curly_block_element$__$expanded", "set$_error_view_element$__$error", "set$_eval_box_element$__$callback", "set$_eval_box_element$__$lineMode", "set$_eval_box_element$__$results", "set$_eval_box_element$__$text", "set$_eval_link_element$__$busy", "set$_eval_link_element$__$callback", "set$_eval_link_element$__$expr", "set$_eval_link_element$__$label", "set$_eval_link_element$__$result", "set$_eventDelegates", "set$_field_view_element$__$field", "set$_fragmentationCanvas", "set$_fragmentationData", "set$_freeColor", "set$_function_ref_element$__$hasClass", "set$_function_ref_element$__$hasParent", "set$_function_ref_element$__$isDart", "set$_function_ref_element$__$qualified", "set$_function_view_element$__$function", "set$_function_view_element$__$kind", "set$_function_view_element$__$qualifiedName", "set$_heap_map_element$__$fragmentation", "set$_heap_map_element$__$status", "set$_heap_profile_element$__$classTable", "set$_heap_profile_element$__$profile", "set$_id", "set$_instanceAttributes", "set$_instance_view_element$__$instance", "set$_instance_view_element$__$path", "set$_isolate_profile_element$__$displayCutoff", "set$_isolate_profile_element$__$hideTagsChecked", "set$_isolate_profile_element$__$profile", "set$_isolate_profile_element$__$refreshTime", "set$_isolate_profile_element$__$sampleCount", "set$_isolate_profile_element$__$sampleDepth", "set$_isolate_profile_element$__$sampleRate", "set$_isolate_profile_element$__$tagSelector", "set$_isolate_profile_element$__$timeSpan", "set$_isolate_profile_element$_id", "set$_isolate_summary_element$__$counters", "set$_isolate_summary_element$__$isolate", "set$_isolate_view_element$__$isolate", "set$_json_view_element$__$map", "set$_json_view_element$__$mapAsString", "set$_library_view_element$__$library", "set$_name", "set$_nav_bar_element$__$active", "set$_nav_bar_element$__$anchor", "set$_nav_bar_element$__$callback", "set$_nav_bar_element$__$cls", "set$_nav_bar_element$__$isolate", "set$_nav_bar_element$__$label", "set$_nav_bar_element$__$last", "set$_nav_bar_element$__$library", "set$_nav_bar_element$__$link", "set$_nav_bar_element$__$pad", "set$_newPieChart", "set$_newPieDataTable", "set$_observatory_application_element$__$app", "set$_observatory_application_element$__$devtools", "set$_oldPieChart", "set$_oldPieDataTable", "set$_openIconClass", "set$_pageHeight", "set$_pageSeparationColor", "set$_polymer$_observe", "set$_polymer$_publish", "set$_publishLC", "set$_response_viewer_element$__$app", "set$_script_inset_element$__$coverage", "set$_script_inset_element$__$endPos", "set$_script_inset_element$__$lines", "set$_script_inset_element$__$pos", "set$_script_inset_element$__$script", "set$_script_ref_element$__$pos", "set$_script_view_element$__$script", "set$_script_view_element$__$showCoverage", "set$_selector", "set$_service_error_view_element$__$error", "set$_service_exception_view_element$__$exception", "set$_service_object_view_element$__$object", "set$_service_ref_element$__$internal", "set$_service_ref_element$__$ref", "set$_sliding_checkbox_element$__$checked", "set$_sliding_checkbox_element$__$checkedText", "set$_sliding_checkbox_element$__$uncheckedText", "set$_stack_frame_element$__$frame", "set$_stack_trace_element$__$trace", "set$_updateTimer", "set$_vm_view_element$__$error", "set$_vm_view_element$__$vm", "set$active", "set$anchor", "set$app", "set$bindings", "set$bottom", "set$bound", "set$bubbles", "set$busy", "set$callback", "set$chart", "set$checked", "set$checkedText", "set$children", "set$className", "set$classTable", "set$classes", "set$cls", "set$code", "set$collapsed", "set$content", "set$counters", "set$coverage", "set$data", "set$devtools", "set$displayCutoff", "set$displayThreshold", "set$displayValue", "set$endPos", "set$entries", "set$error", "set$exception", "set$expand", "set$expanded", "set$expander", "set$expr", "set$field", "set$fileAndLine", "set$firstChild", "set$form", "set$fragmentation", "set$frame", "set$hasClass", "set$hasParent", "set$hash", "set$hashLinkWorkaround", "set$height", "set$hideTagsChecked", "set$hitStyleExecuted", "set$hitStyleNone", "set$hitStyleNotExecuted", "set$host", "set$href", "set$iconClass", "set$id", "set$index", "set$instance", "set$internal", "set$isDart", "set$isFinal", "set$isolate", "set$key", "set$kind", "set$label", "set$last", "set$left", "set$length", "set$library", "set$lineMode", "set$lines", "set$link", "set$loaded", "set$map", "set$mapAsString", "set$message", "set$method", "set$msg", "set$name", "set$newValue", "set$nextNode", "set$nodes", "set$object", "set$oldValue", "set$operator", "set$ownerDocument", "set$pad", "set$parent", "set$parentNode", "set$path", "set$pauseEvent", "set$pos", "set$print", "set$profile", "set$qualified", "set$qualifiedName", "set$ref", "set$refreshTime", "set$response", "set$responseText", "set$result", "set$results", "set$right", "set$rowIndex", "set$rows", "set$sampleCount", "set$sampleDepth", "set$sampleRate", "set$script", "set$selectedIndex", "set$showCoverage", "set$src", "set$status", "set$tagProfileChart", "set$tagSelector", "set$target", "set$text", "set$timeSpan", "set$top", "set$trace", "set$tree", "set$type", "set$uncheckedText", "set$url", "set$value", "set$values", "set$version", "set$vm", "set$width", "set$x", "set$y", "setAll$2", "setRange$3", "setRange$4", "shadowFromTemplate$1", "showCoverageChanged$1", "skip$1", "sort$0", "sort$1", "split$1", "start$0", "startsWith$1", "startsWith$2", "stop$0", "sublist$1", "sublist$2", "substring$1", "substring$2", "tagSelectorChanged$1", "take$1", "takeAttributes$0", "toInt$0", "toList$0", "toList$1$growable", "toLowerCase$0", "toRadixString$1", "toString$0", "toStringAsFixed$1", "toggleDisplay$3", "toggleExpand$3", "toggleExpanded$3", "trim$0", "unbind$1", "unbindAll$0", "unobserved$0", "unregisterObserver$1", "unregisterObservers$0", "updateLineMode$3", "waitingForExtendee$1", "waitingForType$1", "where$1"];
$.mapTypeToInterceptor = [C.Type_0e9, U.ScriptViewElement, {created: U.ScriptViewElement$created}, C.Type_2jN, O.CodeRefElement, {created: O.CodeRefElement$created}, C.Type_4IJ, A.FieldViewElement, {created: A.FieldViewElement$created}, C.Type_8Gl, D.IsolateSharedSummaryElement, {created: D.IsolateSharedSummaryElement$created}, C.Type_8eb, L.EvalBoxElement, {created: L.EvalBoxElement$created}, C.Type_AD4, A.NavMenuItemElement, {created: A.NavMenuItemElement$created}, C.Type_AHF, H.NativeTypedArray, {"": H.NativeTypedArray$}, C.Type_Aym, F.CodeViewElement, {created: F.CodeViewElement$created}, C.Type_C7R, A.TopNavMenuElement, {created: A.TopNavMenuElement$created}, C.Type_E0k, U.VMViewElement, {created: U.VMViewElement$created}, C.Type_ECh, D.IsolateLocationElement, {created: D.IsolateLocationElement$created}, C.Type_EQs, W.GlobalEventHandlers, {}, C.Type_ES1, N.IsolateRefElement, {created: N.IsolateRefElement$created}, C.Type_EVD, B.InstanceRefElement, {created: B.InstanceRefElement$created}, C.Type_Eue, X.VMRefElement, {created: X.VMRefElement$created}, C.Type_FKd, R.ServiceErrorViewElement, {created: R.ServiceErrorViewElement$created}, C.Type_I2I, A.PolymerElement, {created: A.PolymerElement$created}, C.Type_JFX, A.ClassNavMenuElement, {created: A.ClassNavMenuElement$created}, C.Type_Jcu, K.StackFrameElement, {created: K.StackFrameElement$created}, C.Type_KMd, A.NavMenuElement, {created: A.NavMenuElement$created}, C.Type_Kyy, Z.JsonViewElement, {created: Z.JsonViewElement$created}, C.Type_LV6, K.HeapProfileElement, {created: K.HeapProfileElement$created}, C.Type_Mu6, U.ServiceObjectViewElement, {created: U.ServiceObjectViewElement$created}, C.Type_NlB, H.NativeTypedArrayOfDouble, {"": H.NativeTypedArrayOfDouble$}, C.Type_Npb, F.ErrorViewElement, {created: F.ErrorViewElement$created}, C.Type_O5a, Z.ClassViewElement, {created: Z.ClassViewElement$created}, C.Type_ON8, B.BreakpointListElement, {created: B.BreakpointListElement$created}, C.Type_QyU, W.WindowEventHandlers, {}, C.Type_SoB, O.HeapMapElement, {created: O.HeapMapElement$created}, C.Type_Sxn, A.NavRefreshElement, {created: A.NavRefreshElement$created}, C.Type_UJT, Q.ServiceRefElement, {created: Q.ServiceRefElement$created}, C.Type_UKT, Q.ResponseViewerElement, {created: Q.ResponseViewerElement$created}, C.Type_YgH, V.ObservatoryApplicationElement, {created: V.ObservatoryApplicationElement$created}, C.Type_YnA, A.PolymerDeclaration, {created: A.PolymerDeclaration$created}, C.Type_ZKG, L.IsolateViewElement, {created: L.IsolateViewElement$created}, C.Type_a1Y, T.ScriptInsetElement, {created: T.ScriptInsetElement$created}, C.Type_aAD, D.IsolateRunStateElement, {created: D.IsolateRunStateElement$created}, C.Type_bDN, N.FunctionViewElement, {created: N.FunctionViewElement$created}, C.Type_cOY, X.IsolateProfileElement, {created: X.IsolateProfileElement$created}, C.Type_cop, R.CurlyBlockElement, {created: R.CurlyBlockElement$created}, C.Type_gqS, Z.InstanceViewElement, {created: Z.InstanceViewElement$created}, C.Type_iL9, D.IsolateSummaryElement, {created: D.IsolateSummaryElement$created}, C.Type_kA7, X.ActionLinkElement, {created: X.ActionLinkElement$created}, C.Type_kuc, Q.SlidingCheckboxElement, {created: Q.SlidingCheckboxElement$created}, C.Type_mpV, R.LibraryRefElement, {created: R.LibraryRefElement$created}, C.Type_nV5, A.NavBarElement, {created: A.NavBarElement$created}, C.Type_nVV, X.StackTraceElement, {created: X.StackTraceElement$created}, C.Type_ohY, D.FieldRefElement, {created: D.FieldRefElement$created}, C.Type_p2P, R.EvalLinkElement, {created: R.EvalLinkElement$created}, C.Type_ql8, Q.ClassRefElement, {created: Q.ClassRefElement$created}, C.Type_qph, M.LibraryViewElement, {created: M.LibraryViewElement$created}, C.Type_s2l, A.LibraryNavMenuElement, {created: A.LibraryNavMenuElement$created}, C.Type_sRP, Z.ObservatoryElement, {created: Z.ObservatoryElement$created}, C.Type_wBh, A.ScriptRefElement, {created: A.ScriptRefElement$created}, C.Type_wOW, H.NativeTypedArrayOfInt, {"": H.NativeTypedArrayOfInt$}, C.Type_wT1, D.IsolateCounterChartElement, {created: D.IsolateCounterChartElement$created}, C.Type_wgH, U.FunctionRefElement, {created: U.FunctionRefElement$created}, C.Type_wsa, A.IsolateNavMenuElement, {created: A.IsolateNavMenuElement$created}, C.Type_ww8, R.CollapsibleContentElement, {created: R.CollapsibleContentElement$created}, C.Type_y1j, D.ServiceExceptionViewElement, {created: D.ServiceExceptionViewElement$created}];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [J.JSInt]);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "customElementsReady", "customElementsReady", "get$customElementsReady", function() {
  return new B.closure().call$0();
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "publicSymbolPattern", "Symbol_publicSymbolPattern", "get$Symbol_publicSymbolPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("^(?:(?:[\\-+*/%&|^]|\\[\\]=?|==|~/?|<[<=]?|>[>=]?|unary-)$|(?!(?:assert|break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:efault|o)|e(?:lse|num|xtends)|f(?:alse|inal(?:ly)?|or)|i[fns]|n(?:ew|ull)|ret(?:hrow|urn)|s(?:uper|witch)|t(?:h(?:is|row)|r(?:ue|y))|v(?:ar|oid)|w(?:hile|ith))\\b(?!\\$))[a-zA-Z$][\\w$]*(?:=?$|[.](?!$)))+?$", false, true, false), null, null);
});
Isolate.$lazy($, "_dynamicType", "JsMirrorSystem__dynamicType", "get$JsMirrorSystem__dynamicType", function() {
  return new H.JsTypeMirror(C.Symbol_dynamic);
});
Isolate.$lazy($, "_voidType", "JsMirrorSystem__voidType", "get$JsMirrorSystem__voidType", function() {
  return new H.JsTypeMirror(C.Symbol_void);
});
Isolate.$lazy($, "librariesByName", "JsMirrorSystem_librariesByName", "get$JsMirrorSystem_librariesByName", function() {
  return H.JsMirrorSystem_computeLibrariesByName();
});
Isolate.$lazy($, "currentJsMirrorSystem", "currentJsMirrorSystem", "get$currentJsMirrorSystem", function() {
  return new H.JsMirrorSystem(null, new H.JsIsolateMirror(init.globalState.currentContext));
});
Isolate.$lazy($, "mangledNames", "mangledNames", "get$mangledNames", function() {
  return H.computeMangledNames(init.mangledNames, false);
});
Isolate.$lazy($, "reflectiveNames", "reflectiveNames", "get$reflectiveNames", function() {
  return H.computeReflectiveNames($.get$mangledNames());
});
Isolate.$lazy($, "mangledGlobalNames", "mangledGlobalNames", "get$mangledGlobalNames", function() {
  return H.computeMangledNames(init.mangledGlobalNames, true);
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "webkitEvents", "ElementEvents_webkitEvents", "get$ElementEvents_webkitEvents", function() {
  return H.fillLiteralMap(["animationend", "webkitAnimationEnd", "animationiteration", "webkitAnimationIteration", "animationstart", "webkitAnimationStart", "fullscreenchange", "webkitfullscreenchange", "fullscreenerror", "webkitfullscreenerror", "keyadded", "webkitkeyadded", "keyerror", "webkitkeyerror", "keymessage", "webkitkeymessage", "needkey", "webkitneedkey", "pointerlockchange", "webkitpointerlockchange", "pointerlockerror", "webkitpointerlockerror", "resourcetimingbufferfull", "webkitresourcetimingbufferfull", "transitionend", "webkitTransitionEnd", "speechchange", "webkitSpeechChange"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(function() { return this; }());
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) { this.o = o; };
});
Isolate.$lazy($, "_freeColor", "HeapMapElement__freeColor", "get$HeapMapElement__freeColor", function() {
  return [255, 255, 255, 255];
});
Isolate.$lazy($, "_pageSeparationColor", "HeapMapElement__pageSeparationColor", "get$HeapMapElement__pageSeparationColor", function() {
  return [0, 0, 0, 255];
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  return H.setRuntimeTypeInfo(H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), [J.JSString, N.Logger]);
});
Isolate.$lazy($, "_logger", "_logger0", "get$_logger0", function() {
  return N.Logger_Logger("Observable.dirtyCheck");
});
Isolate.$lazy($, "objectType", "objectType", "get$objectType", function() {
  return P.reflectClass(C.Type_HqF);
});
Isolate.$lazy($, "_pathRegExp", "_pathRegExp", "get$_pathRegExp", function() {
  return new L.closure1().call$0();
});
Isolate.$lazy($, "_spacesRegExp", "_spacesRegExp", "get$_spacesRegExp", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\s", false, true, false), null, null);
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("observe.PathObserver");
});
Isolate.$lazy($, "_typesByName", "_typesByName", "get$_typesByName", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Type);
});
Isolate.$lazy($, "_waitType", "_waitType", "get$_waitType", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_waitSuper", "_waitSuper", "get$_waitSuper", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, [J.JSArray, A.PolymerDeclaration]);
});
Isolate.$lazy($, "_declarations", "_declarations", "get$_declarations", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, A.PolymerDeclaration);
});
Isolate.$lazy($, "_objectType", "_objectType", "get$_objectType", function() {
  return P.reflectClass(C.Type_HqF);
});
Isolate.$lazy($, "_sheetLog", "_sheetLog", "get$_sheetLog", function() {
  return N.Logger_Logger("polymer.stylesheet");
});
Isolate.$lazy($, "_reverseEventTranslations", "_reverseEventTranslations", "get$_reverseEventTranslations", function() {
  return new A.closure20().call$0();
});
Isolate.$lazy($, "bindPattern", "Polymer_bindPattern", "get$Polymer_bindPattern", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("\\{\\{([^{}]*)}}", false, true, false), null, null);
});
Isolate.$lazy($, "_polymerSyntax", "Polymer__polymerSyntax", "get$Polymer__polymerSyntax", function() {
  var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSString, P.Object);
  t1.addAll$1(0, C.Map_wgEsG);
  return new A._PolymerExpressionsWithEventDelegate(t1);
});
Isolate.$lazy($, "_ready", "Polymer__ready", "get$Polymer__ready", function() {
  return H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
});
Isolate.$lazy($, "veiledElements", "Polymer_veiledElements", "get$Polymer_veiledElements", function() {
  return ["body"];
});
Isolate.$lazy($, "_observeLog", "_observeLog", "get$_observeLog", function() {
  return N.Logger_Logger("polymer.observe");
});
Isolate.$lazy($, "_eventsLog", "_eventsLog", "get$_eventsLog", function() {
  return N.Logger_Logger("polymer.events");
});
Isolate.$lazy($, "_unbindLog", "_unbindLog", "get$_unbindLog", function() {
  return N.Logger_Logger("polymer.unbind");
});
Isolate.$lazy($, "_bindLog", "_bindLog", "get$_bindLog", function() {
  return N.Logger_Logger("polymer.bind");
});
Isolate.$lazy($, "_shadowHost", "_shadowHost", "get$_shadowHost", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [A.Polymer]);
});
Isolate.$lazy($, "_librariesToLoad", "_librariesToLoad", "get$_librariesToLoad", function() {
  return A._discoverScripts(document, J.get$href$x(C.Window_methods.get$location(window)), null, null);
});
Isolate.$lazy($, "_libs", "_libs", "get$_libs", function() {
  return $.get$currentJsMirrorSystem().get$libraries();
});
Isolate.$lazy($, "_rootUri", "_rootUri", "get$_rootUri", function() {
  return $.get$currentJsMirrorSystem().isolate.get$rootLibrary().get$uri();
});
Isolate.$lazy($, "_loaderLog", "_loaderLog", "get$_loaderLog", function() {
  return N.Logger_Logger("polymer.loader");
});
Isolate.$lazy($, "_typeHandlers", "_typeHandlers", "get$_typeHandlers", function() {
  return new Z.closure0().call$0();
});
Isolate.$lazy($, "_logger", "_logger1", "get$_logger1", function() {
  return N.Logger_Logger("polymer_expressions");
});
Isolate.$lazy($, "_BINARY_OPERATORS", "_BINARY_OPERATORS", "get$_BINARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure4(), "-", new K.closure5(), "*", new K.closure6(), "/", new K.closure7(), "==", new K.closure8(), "!=", new K.closure9(), ">", new K.closure10(), ">=", new K.closure11(), "<", new K.closure12(), "<=", new K.closure13(), "||", new K.closure14(), "&&", new K.closure15(), "|", new K.closure16()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_UNARY_OPERATORS", "_UNARY_OPERATORS", "get$_UNARY_OPERATORS", function() {
  return H.fillLiteralMap(["+", new K.closure17(), "-", new K.closure18(), "!", new K.closure19()], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "_currentIsolateMatcher", "VM__currentIsolateMatcher", "get$VM__currentIsolateMatcher", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("isolates/\\d+", false, true, false), null, null);
});
Isolate.$lazy($, "_currentObjectMatcher", "VM__currentObjectMatcher", "get$VM__currentObjectMatcher", function() {
  return new H.JSSyntaxRegExp(H.JSSyntaxRegExp_makeNative("isolates/\\d+/", false, true, false), null, null);
});
Isolate.$lazy($, "_checkboxEventType", "_InputBinding__checkboxEventType", "get$_InputBinding__checkboxEventType", function() {
  return new M.closure2().call$0();
});
Isolate.$lazy($, "_contentsOwner", "TemplateBindExtension__contentsOwner", "get$TemplateBindExtension__contentsOwner", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [null]);
});
Isolate.$lazy($, "_ownerStagingDocument", "TemplateBindExtension__ownerStagingDocument", "get$TemplateBindExtension__ownerStagingDocument", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [null]);
});
Isolate.$lazy($, "_allTemplatesSelectors", "TemplateBindExtension__allTemplatesSelectors", "get$TemplateBindExtension__allTemplatesSelectors", function() {
  return "template, " + J.map$1$ax(C.Map_05eTF.get$keys(), new M.closure3()).join$1(0, ", ");
});
Isolate.$lazy($, "_expando", "_expando", "get$_expando", function() {
  return H.setRuntimeTypeInfo(new P.Expando("template_binding"), [null]);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [P.Object,
C.TypeVariable_wAg,
C.TypeVariable_pea,
C.TypeVariable_bBG,
C.TypeVariable_AuK,
C.TypeVariable_mDP,
"object",
"interceptor",
"proto",
"extension",
"indexability",
"type",
"name",
"codeUnit",
"string",
"index",
"isolate",
"function",
"entry",
"args",
"sender",
"e",
"msg",
"topLevel",
"message",
"isSpawnUri",
"startPaused",
"replyTo",
"x",
"record",
"value",
"memberName",
{func: "dynamic__String", args: [J.JSString]},
"source",
"radix",
"handleError",
"array",
"codePoints",
"charCodes",
"years",
"month",
"day",
"hours",
"minutes",
"seconds",
"milliseconds",
"isUtc",
"receiver",
"key",
"positionalArguments",
"namedArguments",
"className",
"argument",
"ex",
"expression",
"keyValuePairs",
"result",
"closure",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
"arity",
"functions",
"reflectionInfo",
"isStatic",
"jsArguments",
"propertyName",
"isSuperCall",
"stubName",
"isIntercepted",
"fieldName",
"property",
"staticName",
"list",
"returnType",
"parameterTypes",
"optionalParameterTypes",
"rti",
"typeArguments",
"target",
"typeInfo",
"substitutionName",
,
"onTypeVariable",
"types",
"startIndex",
"substitution",
"arguments",
"isField",
"checks",
"asField",
"s",
"t",
"signature",
"context",
"contextName",
"o",
"allowShorter",
"obj",
"tag",
"interceptorClass",
"transformer",
"hooks",
"pattern",
"multiLine",
"caseSensitive",
"global",
"needle",
"haystack",
"other",
"from",
"to",
{func: "args0"},
{func: "args1", args: [null]},
"_",
"a",
"total",
"pad",
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
"v",
"time",
"bytes",
{func: "String__dynamic", ret: J.JSString, args: [null]},
{func: "void_", void: true},
"iterable",
"f",
"initialValue",
"combine",
"leftDelimiter",
"rightDelimiter",
"compare",
"start",
"end",
"skipCount",
"src",
"srcStart",
"dst",
"dstStart",
"count",
"element",
"endIndex",
"left",
"right",
"symbol",
{func: "InstanceMirror__Object", ret: P.InstanceMirror, args: [P.Object]},
"reflectee",
"mangledName",
"methods",
"variables",
"mixinNames",
"code",
"typeVariables",
"owner",
"simpleName",
"victim",
"fieldSpecification",
"jsMangledNames",
"isGlobal",
"map",
"errorHandler",
"zone",
"listeners",
"callback",
"notificationHandler",
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
"error",
"stackTrace",
"userCode",
"onSuccess",
"onError",
"subscription",
"future",
"duration",
{func: "void__Zone_ZoneDelegate_Zone_dynamic_StackTrace", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, null, P.StackTrace]},
"self",
"parent",
{func: "dynamic__Zone_ZoneDelegate_Zone_args0", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args1_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}, null]},
"arg",
{func: "dynamic__Zone_ZoneDelegate_Zone_args2_dynamic_dynamic", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}, null, null]},
{func: "ZoneCallback__Zone_ZoneDelegate_Zone_args0", ret: {func: "args0"}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "ZoneUnaryCallback__Zone_ZoneDelegate_Zone_args1", ret: {func: "args1", args: [null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}]},
{func: "ZoneBinaryCallback__Zone_ZoneDelegate_Zone_args2", ret: {func: "args2", args: [null, null]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args2", args: [null, null]}]},
{func: "void__Zone_ZoneDelegate_Zone_args0", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args0"}]},
{func: "Timer__Zone_ZoneDelegate_Zone_Duration_void_", ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: "void_", void: true}]},
{func: "void__Zone_ZoneDelegate_Zone_String", void: true, args: [P.Zone, P.ZoneDelegate, P.Zone, J.JSString]},
"line",
{func: "void__String", void: true, args: [J.JSString]},
{func: "Zone__Zone_ZoneDelegate_Zone_ZoneSpecification_Map", ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, P.Map]},
"specification",
"zoneValues",
"table",
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
"b",
{func: "int__dynamic", ret: J.JSInt, args: [null]},
"parts",
"m",
"number",
"json",
"reviver",
{func: "Object__dynamic", ret: P.Object, args: [null]},
"toEncodable",
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
"formattedString",
"n",
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "int__String__int__String_int", ret: J.JSInt, args: [J.JSString], named: {onError: {func: "int__String", ret: J.JSInt, args: [J.JSString]}, radix: J.JSInt}},
"uri",
"host",
"scheme",
"query",
"queryParameters",
"fragment",
"component",
C.Utf8Codec_false,
false,
"canonicalTable",
"text",
"encoding",
"spaceToPlus",
{func: "String__EventTarget", ret: J.JSString, args: [W.EventTarget]},
"typeExtension",
"url",
"withCredentials",
"onProgress",
"method",
"responseType",
"mimeType",
"requestHeaders",
"sendData",
"thing",
"hash",
"win",
"constructor",
{func: "args4", args: [null, null, null, null]},
"oldValue",
"newValue",
"document",
"extendsTagName",
"w",
"captureThis",
"data",
"createProxy",
"mustCopy",
"nativeImageData",
"imageData",
"current",
"currentStart",
"currentEnd",
"old",
"oldStart",
"oldEnd",
"distances",
"arr1",
"arr2",
"searchLength",
"splices",
"records",
"field",
"cls",
"props",
"getter",
"template",
"extendee",
"sheet",
"node",
"path",
"originalPrepareBinding",
"methodName",
"style",
"scope",
"doc",
"baseUri",
"seen",
"scripts",
"uriString",
"currentValue",
"expr",
"l",
{func: "Iterable__Iterable", ret: [P.Iterable, K.IndexedValue], args: [P.Iterable]},
"classMirror",
"c",
"collection",
"delegate",
"model",
"bound",
"stagingDocument",
"el",
"useRoot",
"content",
"bindings",
"val",
{func: "args2", args: [null, null]},
{func: "dynamic__String_dynamic", args: [J.JSString, null]},
"parameter",
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
J.JSBool,
J.JSString,
[P.Map, J.JSString, W.Element],
{func: "bool_", ret: J.JSBool},
C.C_Reflectable,
C.C_ObservableProperty,
{func: "dynamic__bool", args: [J.JSBool]},
C.C_PublishedProperty,
{func: "String_", ret: J.JSString},
{func: "void__dynamic_dynamic_dynamic", void: true, args: [null, null, null]},
X.PolymerElement_ChangeNotifier,
H.Closure,
G.LocationManager,
D.VM,
{func: "Isolate_", ret: D.Isolate},
{func: "dynamic__Isolate", args: [D.Isolate]},
{func: "ServiceObject_", ret: D.ServiceObject},
{func: "dynamic__ServiceObject", args: [D.ServiceObject]},
{func: "void__ServiceError", void: true, args: [D.ServiceError]},
{func: "void__ServiceException", void: true, args: [D.ServiceException]},
"exception",
"event",
J.JSInt,
[J.JSArray, G.TableTreeRow],
[J.JSArray, J.JSString],
{func: "List_", ret: [J.JSArray, J.JSInt]},
{func: "String__int_int", ret: J.JSString, args: [J.JSInt, J.JSInt]},
"row",
"column",
{func: "dynamic__int_int", args: [J.JSInt, J.JSInt]},
"i",
"j",
D.ServiceMap,
{func: "ServiceMap_", ret: D.ServiceMap},
{func: "dynamic__ServiceMap", args: [D.ServiceMap]},
"done",
B.ObservatoryElement_ChangeNotifier,
D.ServiceObject,
Q.ServiceRefElement,
{func: "Future__String", ret: [P.Future, D.ServiceObject], args: [J.JSString]},
"dummy",
Z.ObservatoryElement_ChangeNotifier1,
{func: "Code_", ret: D.Code},
D.Code,
{func: "dynamic__Code", args: [D.Code]},
{func: "Element__Node", ret: W.Element, args: [W.Node]},
{func: "void__Event_dynamic_Node", void: true, args: [W.Event, null, W.Node]},
"detail",
F.ObservatoryElement_ChangeNotifier2,
"r",
R.ObservatoryElement_ChangeNotifier3,
R.PolymerElement_ChangeNotifier0,
"library",
{func: "dynamic__JsLibraryMirror", args: [H.JsLibraryMirror]},
{func: "dynamic__Symbol_Mirror", args: [P.Symbol, P.Mirror]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
"typeArgument",
"tv",
{func: "ClassMirror__int", ret: P.ClassMirror, args: [J.JSInt]},
{func: "dynamic__int", args: [J.JSInt]},
{func: "TypeMirror__int", ret: P.TypeMirror, args: [J.JSInt]},
"reflectiveName",
{func: "dynamic__String_String", args: [J.JSString, J.JSString]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "void___dynamic", void: true, opt: [null]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
"ignored",
"convert",
"isMatch",
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"each",
"k",
{func: "bool___SplayTreeMapNode", ret: J.JSBool, args: [P._SplayTreeMapNode]},
"matched",
{func: "int__String", ret: J.JSInt, args: [J.JSString]},
{func: "double__String", ret: J.JSDouble, args: [J.JSString]},
"ch",
{func: "bool__int", ret: J.JSBool, args: [J.JSInt]},
{func: "int__int", ret: J.JSInt, args: [J.JSInt]},
"digit",
"part",
{func: "int__dynamic_dynamic", ret: J.JSInt, args: [null, null]},
"byteString",
{func: "int__int_int", ret: J.JSInt, args: [J.JSInt, J.JSInt]},
"byte",
"buffer",
"xhr",
"header",
"prevValue",
F.ObservatoryElement_ChangeNotifier4,
{func: "Future__String0", ret: [P.Future, V.ObservableMap], args: [J.JSString]},
Q.ObservableList,
{func: "evalType_", ret: {func: "Future__String0", ret: [P.Future, V.ObservableMap], args: [J.JSString]}},
{func: "dynamic__evalType", args: [{func: "Future__String0", ret: [P.Future, V.ObservableMap], args: [J.JSString]}]},
{func: "ObservableList_", ret: Q.ObservableList},
{func: "dynamic__ObservableList", args: [Q.ObservableList]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
L.ObservatoryElement_ChangeNotifier5,
R.PolymerElement_ChangeNotifier1,
A.ObservatoryElement_ChangeNotifier6,
U.ServiceRefElement_ChangeNotifier,
{func: "String__ServiceMap", ret: J.JSString, args: [D.ServiceMap]},
N.ObservatoryElement_ChangeNotifier7,
{func: "PixelReference_", ret: O.PixelReference},
{func: "int__Iterable", ret: J.JSInt, args: [[P.Iterable, J.JSInt]]},
"color",
{func: "void__int_String_Iterable", void: true, args: [J.JSInt, J.JSString, [P.Iterable, J.JSInt]]},
"classId",
{func: "void__dynamic_int", void: true, args: [null, J.JSInt]},
"classList",
"freeClassId",
{func: "Iterable__int", ret: [P.Iterable, J.JSInt], args: [J.JSInt]},
{func: "String__Point", ret: J.JSString, args: [[P.Point, J.JSInt]]},
"point",
{func: "ObjectInfo__Point", ret: O.ObjectInfo, args: [[P.Point, J.JSInt]]},
{func: "void__int", void: true, args: [J.JSInt]},
"startPage",
O.ObservatoryElement_ChangeNotifier8,
"response",
"st",
G.SortedTable,
{func: "SortedTable_", ret: G.SortedTable},
{func: "dynamic__SortedTable", args: [G.SortedTable]},
{func: "void__Event_dynamic_Element", void: true, args: [W.Event, null, W.Element]},
{func: "bool__Map", ret: J.JSBool, args: [P.Map]},
{func: "dynamic__Map_int", args: [P.Map, J.JSInt]},
{func: "String__bool", ret: J.JSString, args: [J.JSBool]},
"newSpace",
K.ObservatoryElement_ChangeNotifier9,
{func: "dynamic__int_dynamic", args: [J.JSInt, null]},
{func: "Iterable__dynamic__String", ret: P.Iterable, args: [{func: "dynamic__String", args: [J.JSString]}]},
{func: "Iterable__Iterable__String", ret: P.Iterable, args: [{func: "Iterable__String", ret: P.Iterable, args: [J.JSString]}]},
{func: "void__bool_dynamic", void: true, args: [J.JSBool, null]},
"expand",
{func: "Future__dynamic", ret: [P.Future, D.ServiceObject], args: [null]},
Z.ObservatoryElement_ChangeNotifier10,
D.CodeTrieNode,
J.JSDouble,
G.TableTree,
{func: "String__TableTreeRow", ret: J.JSString, args: [G.TableTreeRow]},
X.ObservatoryElement_ChangeNotifier11,
D.Isolate,
D.ObservatoryElement_ChangeNotifier12,
{func: "Future__dynamic0", ret: P.Future, args: [null]},
D.ObservatoryElement_ChangeNotifier13,
D.ObservatoryElement_ChangeNotifier14,
D.ObservatoryElement_ChangeNotifier15,
V.ObservableMap,
D.CounterChart,
{func: "ObservableMap_", ret: V.ObservableMap},
{func: "dynamic__ObservableMap", args: [V.ObservableMap]},
D.ObservatoryElement_ChangeNotifier16,
P.Timer,
L.TagProfileChart,
L.ObservatoryElement_ChangeNotifier17,
"tagProfile",
Z.ObservatoryElement_ChangeNotifier18,
D.Library,
{func: "Library_", ret: D.Library},
{func: "dynamic__Library", args: [D.Library]},
M.ObservatoryElement_ChangeNotifier19,
"rec",
{func: "dynamic__LogRecord", args: [N.LogRecord]},
A.ObservatoryElement_ChangeNotifier20,
A.ObservatoryElement_ChangeNotifier21,
A.ObservatoryElement_ChangeNotifier22,
A.ObservatoryElement_ChangeNotifier23,
A.ObservatoryElement_ChangeNotifier24,
A.ObservatoryElement_ChangeNotifier25,
A.ObservatoryElement_ChangeNotifier26,
A.ObservatoryElement_ChangeNotifier27,
G.ObservatoryApplication,
{func: "ObservatoryApplication_", ret: G.ObservatoryApplication},
{func: "dynamic__ObservatoryApplication", args: [G.ObservatoryApplication]},
V.ObservatoryElement_ChangeNotifier28,
{func: "void__String_dynamic_dynamic", void: true, args: [J.JSString, null, null]},
{func: "String__double", ret: J.JSString, args: [J.JSDouble]},
{func: "String__Map", ret: J.JSString, args: [P.Map]},
"frame",
{func: "bool__String", ret: J.JSBool, args: [J.JSString]},
A.PolymerElement,
{func: "dynamic__ZoneDelegate_Zone", args: [P.ZoneDelegate, P.Zone]},
{func: "dynamic__Zone_ZoneDelegate_Zone_args1", args: [P.Zone, P.ZoneDelegate, P.Zone, {func: "args1", args: [null]}]},
{func: "int_", ret: J.JSInt},
{func: "bool__Object", ret: J.JSBool, args: [P.Object]},
{func: "void__Object", void: true, args: [P.Object]},
{func: "dynamic__List", args: [[J.JSArray, G.ListChangeRecord]]},
{func: "dynamic__List0", args: [[J.JSArray, T.ChangeRecord]]},
"onName",
"eventType",
{func: "void__String_String", void: true, args: [J.JSString, J.JSString]},
{func: "void__Iterable", void: true, args: [[P.Iterable, T.ChangeRecord]]},
"changes",
{func: "void__Event", void: true, args: [W.Event]},
"pair",
"p",
{func: "void__List", void: true, args: [[J.JSArray, T.ChangeRecord]]},
"d",
"def",
{func: "dynamic__String_dynamic_dynamic", args: [J.JSString, null, null]},
"arg0",
{func: "Index__Expression_Expression", ret: U.Index, args: [U.Expression, U.Expression]},
"h",
"item",
3,
{func: "dynamic__Expression", args: [U.Expression]},
Q.ObservatoryElement_ChangeNotifier29,
D.Script,
[J.JSArray, D.ScriptLine],
{func: "Script_", ret: D.Script},
{func: "dynamic__Script", args: [D.Script]},
{func: "List_0", ret: [J.JSArray, D.ScriptLine]},
{func: "dynamic__List1", args: [[J.JSArray, D.ScriptLine]]},
{func: "String__ScriptLine", ret: J.JSString, args: [D.ScriptLine]},
T.ObservatoryElement_ChangeNotifier30,
A.ServiceRefElement_ChangeNotifier0,
U.ObservatoryElement_ChangeNotifier31,
{func: "ServiceObjectOwner_", ret: D.ServiceObjectOwner},
{func: "VM_", ret: D.VM},
{func: "Iterable_1", ret: [P.Iterable, D.Isolate]},
{func: "double_", ret: J.JSDouble},
{func: "dynamic__double", args: [J.JSDouble]},
"isolateId",
[P.Map, J.JSString, J.JSDouble],
{func: "String__String", ret: J.JSString, args: [J.JSString]},
"id",
{func: "void__ServiceMap", void: true, args: [D.ServiceMap]},
"coverage",
{func: "ObservableList_0", ret: [Q.ObservableList, D.Library]},
{func: "dynamic__ObservableList0", args: [[Q.ObservableList, D.Library]]},
{func: "Map_", ret: P.Map},
{func: "dynamic__Map", args: [P.Map]},
{func: "DartError_", ret: D.DartError},
{func: "dynamic__DartError", args: [D.DartError]},
"scriptCoverage",
"timer",
[J.JSArray, D.PcDescriptor],
{func: "CodeInstruction_", ret: D.CodeInstruction},
{func: "dynamic__CodeInstruction", args: [D.CodeInstruction]},
{func: "String__Code", ret: J.JSString, args: [D.Code]},
{func: "CodeKind_", ret: D.CodeKind},
{func: "dynamic__CodeKind", args: [D.CodeKind]},
{func: "void__Script", void: true, args: [D.Script]},
"script",
"func",
D.ServiceError,
{func: "ServiceError_", ret: D.ServiceError},
{func: "dynamic__ServiceError", args: [D.ServiceError]},
R.ObservatoryElement_ChangeNotifier32,
D.ServiceException,
{func: "ServiceException_", ret: D.ServiceException},
{func: "dynamic__ServiceException", args: [D.ServiceException]},
D.ObservatoryElement_ChangeNotifier33,
{func: "ObservatoryElement_", ret: Z.ObservatoryElement},
U.ObservatoryElement_ChangeNotifier34,
Q.ObservatoryElement_ChangeNotifier0,
"details",
Q.PolymerElement_ChangeNotifier2,
K.ObservatoryElement_ChangeNotifier35,
X.ObservatoryElement_ChangeNotifier36,
"y",
{func: "String__Object", ret: J.JSString, args: [P.Object]},
{func: "String__List", ret: J.JSString, args: [[J.JSArray, P.Object]]},
"values",
{func: "void__List0", void: true, args: [[J.JSArray, G.ListChangeRecord]]},
{func: "dynamic__List2", args: [J.JSArray]},
D.DartError,
{func: "dynamic__VM", args: [D.VM]},
U.ObservatoryElement_ChangeNotifier37,
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner((function(a){H.startRootIsolate(E.main0$closure(),a)}), []);
  } else {
    (function(a){H.startRootIsolate(E.main0$closure(),a)})([]);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "object" && classData instanceof Array) {
          classData = fields = classData[0];
        }
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      constructor["@"] = desc;
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = {};
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=index.html_bootstrap.dart.js.map
//@ sourceMappingURL=index.html_bootstrap.dart.js.map
